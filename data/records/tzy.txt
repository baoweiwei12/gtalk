用户: tzy
时间: 2024-01-02T02:59:47.918Z
消息: 我有一个curl命令，请帮我写个shell脚本，循环执行我的curl命令500次，每执行一次间隔0.2秒

用户: tzy
时间: 2024-01-02T03:02:18.907Z
消息: 我搞错了，并不是curl命令，而是test_dataenrich_service -a1251001047 -s"id:45262620011002239X;phone:19176069940;required_features:mig_2008_0_evil_score_tssd,mig_2008_0_evil_tag_tssd" -d11.141.202.227 -P15328 -u6 -i1，这个是shell命令

用户: tzy
时间: 2024-01-04T03:09:36.576Z
消息: 为什么http框架，总是有“路由表”这种设计？必须要人手动注册路由呢？我有一个想法是将路由表抛弃，通过继承基类结构体自动注册路由，这个方法可好？

用户: tzy
时间: 2024-01-04T03:15:54.517Z
消息: 为我介绍更多如此设计的go语言框架！

用户: tzy
时间: 2024-01-04T03:21:11.151Z
消息: 你说到了Beego，可以给我举个自动生成路由规则的例子吗

用户: tzy
时间: 2024-01-04T03:35:34.120Z
消息: 我太喜欢这种注释路由了，请问go语言还有其他注释路由的框架吗？

用户: tzy
时间: 2024-01-04T03:36:02.683Z
消息: 我太喜欢这种注释路由了，请问go语言还有其他注释路由的服务器框架吗？

用户: tzy
时间: 2024-01-04T06:18:38.269Z
消息: beego的注释路由是怎么实现的？如果我想像它一样，在其他框架中加入注释路由，如何做？

用户: tzy
时间: 2024-01-05T03:43:19.890Z
消息: 详细告诉我这个项目：https://github.com/xxjwxc/ginrpc，是如何实现注释路由的？

用户: tzy
时间: 2024-01-05T03:44:33.507Z
消息: 它是如何在代码中解析这些注释的？详细说说！一定要详细

用户: tzy
时间: 2024-01-05T03:45:34.507Z
消息: 它是如何在代码中解析这些注释的？贴出它的详细实现代码，并解释给我听

用户: tzy
时间: 2024-01-05T03:46:28.371Z
消息: ./main.go:31:13: invalid operation: cannot call non-function ft.Method(0).PkgPath (value of type string）

用户: tzy
时间: 2024-01-05T05:56:09.674Z
消息: go语言怎么实现注释路由？具体怎么获取某个函数的注释内容呢？

用户: tzy
时间: 2024-01-05T05:56:31.835Z
消息: 获取注释的性能如何呀？

用户: tzy
时间: 2024-01-05T05:57:17.275Z
消息: 如果是处理几百个文件的注释，那它的速度怎么样？

用户: tzy
时间: 2024-01-05T05:58:23.159Z
消息: 写一个go/doc获取函数注释的示例，我希望实现像beego一样的注释路由功能

用户: tzy
时间: 2024-01-05T06:06:39.637Z
消息: 我希望模仿beego框架实现注释路由功能，你可以帮我完成它并写一段demo吗

用户: tzy
时间: 2024-01-05T06:08:00.320Z
消息: 我希望模仿beego框架实现golang语言web服务器注释路由功能，请帮我实现它

用户: tzy
时间: 2024-01-05T06:08:52.942Z
消息: 写一个go/doc获取函数注释的示例，我希望实现像beego一样的注释路由功能

用户: tzy
时间: 2024-01-05T06:09:14.938Z
消息: 写一个go/doc获取函数注释的示例，我希望实现像beego一样的注释路由功能

用户: tzy
时间: 2024-01-05T07:34:07.662Z
消息: go如何通过反射获取一个结构体的方法入参？

用户: tzy
时间: 2024-01-05T08:08:43.281Z
消息: go如何通过反射调用类成员变量方法

用户: tzy
时间: 2024-01-05T08:09:39.045Z
消息: 我的意思是，调用Person里面的成员变量的方法

用户: tzy
时间: 2024-01-05T08:10:07.927Z
消息: go如何通过反射调用父类方法

用户: tzy
时间: 2024-01-05T08:13:55.251Z
消息: 下面的go代码，如何通过反射使得GetUserName调用方法pushRegisterList？
type Controller struct {
}

func (this Controller) pushRegisterList() {

}

type GetUserName struct {
	Controller `route:"/v1/get/User/Name" method:"get"`
}

用户: tzy
时间: 2024-01-05T08:15:59.042Z
消息: 未解析的引用 'MethodByName'

用户: tzy
时间: 2024-01-05T08:16:59.141Z
消息: 未解析的引用 'MethodByName'

用户: tzy
时间: 2024-01-05T08:17:38.091Z
消息: controllerValue没有MethodByName方法！

用户: tzy
时间: 2024-01-05T08:27:22.254Z
消息: 下面的go代码，如何通过反射使得GetUserName调用方法pushRegisterList？请写出demo
type Controller struct {
}

func (this Controller) pushRegisterList() {

}

type GetUserName struct {
Controller
}

用户: tzy
时间: 2024-01-05T08:27:40.948Z
消息: 下面的go代码，如何通过反射使得GetUserName调用方法pushRegisterList？请写出demo
type Controller struct {
}

func (this Controller) pushRegisterList() {

}

type GetUserName struct {
Controller
}

用户: tzy
时间: 2024-01-05T08:27:48.240Z
消息: 下面的go代码，如何通过反射使得GetUserName调用方法pushRegisterList？请写出demo
type Controller struct {
}

func (this Controller) pushRegisterList() {

}

type GetUserName struct {
Controller
}

用户: tzy
时间: 2024-01-05T08:30:16.910Z
消息: panic: reflect: call of reflect.Value.Call on zero Value

用户: tzy
时间: 2024-01-05T08:30:29.868Z
消息: panic: reflect: call of reflect.Value.Call on zero Value

用户: tzy
时间: 2024-01-05T08:30:42.465Z
消息: panic: reflect: call of reflect.Value.Call on zero Value

用户: tzy
时间: 2024-01-06T13:17:46.726Z
消息: go语言，是否允许把json数据解析到一个反射类型的结构体当中？如把string类型的json数据解析到
type Person struct{
    Id string `json:"id"`
    Name string `json:"name"`
}中

用户: tzy
时间: 2024-01-06T13:19:44.245Z
消息: go语言，是否允许把json数据解析到一个反射类型的结构体当中？如把string类型的json数据解析到一个反射类型的数据中

用户: tzy
时间: 2024-01-06T13:20:05.978Z
消息: 是

用户: tzy
时间: 2024-01-06T13:22:23.635Z
消息: go语言，是否允许把json数据解析到一个反射类型的结构体当中？例如我需要通过反射取得一个函数的参数类型，并把string类型的json数据解析成为这个参数的实例

用户: tzy
时间: 2024-01-06T16:20:13.175Z
消息: 用中文告诉我，为什么下面a与reqBodyJson打印的值都为空？package main

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"io/ioutil"
	"reflect"
	"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
	fmt.Println("!23")
}

type IController interface {
	PushRegisterList()
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
	st := reflect.TypeOf(ctrl)
	field := st.Field(0)

	method := strings.ToUpper(field.Tag.Get("method"))
	reqPath := field.Tag.Get("route")

	if st.NumMethod() != 2 {
		panic("Controller method error")
	}

	fmt.Println("methodNum:", st.NumMethod())
	fn := st.Method(1)

	fn.Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
	})

	fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
	// 调用pushRegisterList方法
	fmt.Println(field.Type.Method(0).Name)
	//method.Call(nil)

	fmt.Println("method:", method, reqPath)
	switch method {
	case "POST":
		fmt.Println("reqPath:",reqPath)
		serv.g.POST(reqPath, func(c *gin.Context) {
			a, _ := c.GetRawData()
			fmt.Println("a:", a, string(a))
			reqBodyJson, _ := ioutil.ReadAll(c.Request.Body)
			fmt.Println("Req:", reqBodyJson)
			reqBodyType := st.Method(0).Type.In(2)
			param := reflect.New(reqBodyType).Interface()

			// 解析JSON数据到参数实例
			err := json.Unmarshal(reqBodyJson, &param)
			if err != nil {
				fmt.Println("here")
				c.Writer.WriteString("error")
				return
			}
			fmt.Println("param:", param)
			st.Method(0).Func.Call([]reflect.Value{
				reflect.ValueOf(ctrl),
				reflect.ValueOf(c),
				reflect.ValueOf(param),
			})
		})
	}
}

type Server struct {
	g *gin.Engine
}

var serv = Server{
	g: gin.Default(),
}

type context struct {
}

func init() {
	RouteRegister(GetUserName{})
}

type GetUserName struct {
	Controller `route:"/v1/get/User/Name" method:"post"`
}

type require struct {
	id   string `json:"id"`
	pass string `json:"pass"`
	why  string `json:"why"`
}

type respones struct {
	name string `json:"name"`
}

func (this GetUserName) GetName(ctx gin.Context, req *require) *respones {
	ctx.Writer.WriteString("GetName")
	return nil
}

func main() {
	serv.g.Run(":8080")
}


用户: tzy
时间: 2024-01-06T16:21:56.339Z
消息: 用中文告诉我，为什么下面a与reqBodyJson打印的值都为空？
package main

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"io/ioutil"
	"reflect"
	"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
	fmt.Println("!23")
}

type IController interface {
	PushRegisterList()
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
	st := reflect.TypeOf(ctrl)
	field := st.Field(0)

	method := strings.ToUpper(field.Tag.Get("method"))
	reqPath := field.Tag.Get("route")

	if st.NumMethod() != 2 {
		panic("Controller method error")
	}

	fmt.Println("methodNum:", st.NumMethod())
	fn := st.Method(1)

	fn.Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
	})

	fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
	// 调用pushRegisterList方法
	fmt.Println(field.Type.Method(0).Name)
	//method.Call(nil)

	fmt.Println("method:", method, reqPath)
	switch method {
	case "POST":
		fmt.Println("reqPath:",reqPath)
		serv.g.POST(reqPath, func(c *gin.Context) {
			a, _ := c.GetRawData()
			fmt.Println("a:", a, string(a))
			reqBodyJson, _ := ioutil.ReadAll(c.Request.Body)
			fmt.Println("Req:", reqBodyJson)
			reqBodyType := st.Method(0).Type.In(2)
			param := reflect.New(reqBodyType).Interface()

			// 解析JSON数据到参数实例
			err := json.Unmarshal(reqBodyJson, &param)
			if err != nil {
				fmt.Println("here")
				c.Writer.WriteString("error")
				return
			}
			fmt.Println("param:", param)
			st.Method(0).Func.Call([]reflect.Value{
				reflect.ValueOf(ctrl),
				reflect.ValueOf(c),
				reflect.ValueOf(param),
			})
		})
	}
}

type Server struct {
	g *gin.Engine
}

var serv = Server{
	g: gin.Default(),
}

type context struct {
}

func init() {
	RouteRegister(GetUserName{})
}

type GetUserName struct {
	Controller `route:"/v1/get/User/Name" method:"post"`
}

type require struct {
	Id   string `json:"id"`
	Pass string `json:"pass"`
	Why  string `json:"why"`
}

type respones struct {
	name string `json:"name"`
}

func (this GetUserName) GetName(ctx gin.Context, req *require) *respones {
	ctx.Writer.WriteString("GetName")
	return nil
}

func main() {
	serv.g.Run(":8080")
}


用户: tzy
时间: 2024-01-06T16:23:09.175Z
消息: 用中文告诉我，为什么下面a与reqBodyJson打印的值为：a: [] Req: []
package main

import (
"encoding/json"
"fmt"
"github.com/gin-gonic/gin"
"io/ioutil"
"reflect"
"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
fmt.Println("!23")
}

type IController interface {
PushRegisterList()
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
st := reflect.TypeOf(ctrl)
field := st.Field(0)

method := strings.ToUpper(field.Tag.Get("method"))
reqPath := field.Tag.Get("route")

if st.NumMethod() != 2 {
	panic("Controller method error")
}

fmt.Println("methodNum:", st.NumMethod())
fn := st.Method(1)

fn.Func.Call([]reflect.Value{
	reflect.ValueOf(ctrl),
})

fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
// 调用pushRegisterList方法
fmt.Println(field.Type.Method(0).Name)
//method.Call(nil)

fmt.Println("method:", method, reqPath)
switch method {
case "POST":
	fmt.Println("reqPath:",reqPath)
	serv.g.POST(reqPath, func(c *gin.Context) {
		a, _ := c.GetRawData()
		fmt.Println("a:", a, string(a))
		reqBodyJson, _ := ioutil.ReadAll(c.Request.Body)
		fmt.Println("Req:", reqBodyJson)
		reqBodyType := st.Method(0).Type.In(2)
		param := reflect.New(reqBodyType).Interface()

		// 解析JSON数据到参数实例
		err := json.Unmarshal(reqBodyJson, &param)
		if err != nil {
			fmt.Println("here")
			c.Writer.WriteString("error")
			return
		}
		fmt.Println("param:", param)
		st.Method(0).Func.Call([]reflect.Value{
			reflect.ValueOf(ctrl),
			reflect.ValueOf(c),
			reflect.ValueOf(param),
		})
	})
}
}

type Server struct {
g *gin.Engine
}

var serv = Server{
g: gin.Default(),
}

type context struct {
}

func init() {
RouteRegister(GetUserName{})
}

type GetUserName struct {
Controller route:"/v1/get/User/Name" method:"post"
}

type require struct {
Id   string json:"id"
Pass string json:"pass"
Why  string json:"why"
}

type respones struct {
name string json:"name"
}

func (this GetUserName) GetName(ctx gin.Context, req *require) *respones {
ctx.Writer.WriteString("GetName")
return nil
}

func main() {
serv.g.Run(":8080")
}

用户: tzy
时间: 2024-01-06T16:23:58.315Z
消息: 用中文告诉我，为什么我使用postman向服务器发送正确的json信息，下面a与reqBodyJson打印的值为：a: [] Req: []
package main

import (
"encoding/json"
"fmt"
"github.com/gin-gonic/gin"
"io/ioutil"
"reflect"
"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
fmt.Println("!23")
}

type IController interface {
PushRegisterList()
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
st := reflect.TypeOf(ctrl)
field := st.Field(0)

method := strings.ToUpper(field.Tag.Get("method"))
reqPath := field.Tag.Get("route")

if st.NumMethod() != 2 {
panic("Controller method error")
}

fmt.Println("methodNum:", st.NumMethod())
fn := st.Method(1)

fn.Func.Call([]reflect.Value{
reflect.ValueOf(ctrl),
})

fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
// 调用pushRegisterList方法
fmt.Println(field.Type.Method(0).Name)
//method.Call(nil)

fmt.Println("method:", method, reqPath)
switch method {
case "POST":
fmt.Println("reqPath:",reqPath)
serv.g.POST(reqPath, func(c *gin.Context) {
a, _ := c.GetRawData()
fmt.Println("a:", a, string(a))
reqBodyJson, _ := ioutil.ReadAll(c.Request.Body)
fmt.Println("Req:", reqBodyJson)
reqBodyType := st.Method(0).Type.In(2)
param := reflect.New(reqBodyType).Interface()

	// 解析JSON数据到参数实例
	err := json.Unmarshal(reqBodyJson, &param)
	if err != nil {
		fmt.Println("here")
		c.Writer.WriteString("error")
		return
	}
	fmt.Println("param:", param)
	st.Method(0).Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
		reflect.ValueOf(c),
		reflect.ValueOf(param),
	})
})
}
}

type Server struct {
g *gin.Engine
}

var serv = Server{
g: gin.Default(),
}

type context struct {
}

func init() {
RouteRegister(GetUserName{})
}

type GetUserName struct {
Controller route:"/v1/get/User/Name" method:"post"
}

type require struct {
Id   string json:"id"
Pass string json:"pass"
Why  string json:"why"
}

type respones struct {
name string json:"name"
}

func (this GetUserName) GetName(ctx gin.Context, req *require) *respones {
ctx.Writer.WriteString("GetName")
return nil
}

func main() {
serv.g.Run(":8080")
}

用户: tzy
时间: 2024-01-06T16:37:58.821Z
消息: 为什么在客户端正确请求服务器的情况下，下面的代码接收不到请求体？func main() {
	g := gin.Default()

	g.POST("/123", func(ctx *gin.Context) {
		a, err := ctx.GetRawData()
		if err != nil {
			fmt.Println("Error:	", err)
		}
		fmt.Println("a:", a, string(a))
		reqBodyJson, _ := ioutil.ReadAll(ctx.Request.Body)
		fmt.Println("Req:", reqBodyJson)

		ctx.JSON(200, gin.H{
			"haha": 123,
		})
	})
	g.Run(":8080")
}

用户: tzy
时间: 2024-01-06T16:38:43.694Z
消息: 修改后任然不行

用户: tzy
时间: 2024-01-06T16:51:48.082Z
消息: 用中文告诉我，下面的代码，为什么parma的类型是**main.require？如何修正代码？package main

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"reflect"
	"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
	fmt.Println("!23")
}

type IController interface {
	PushRegisterList()
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
	st := reflect.TypeOf(ctrl)
	field := st.Field(0)

	method := strings.ToUpper(field.Tag.Get("method"))
	reqPath := field.Tag.Get("route")

	if st.NumMethod() != 2 {
		panic("Controller method error")
	}

	fmt.Println("methodNum:", st.NumMethod())
	fn := st.Method(1)

	fn.Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
	})

	fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
	// 调用pushRegisterList方法
	fmt.Println(field.Type.Method(0).Name)
	//method.Call(nil)

	fmt.Println("method:", method, reqPath)
	switch method {
	case "POST":
		fmt.Println("reqPath:", reqPath)
		serv.g.POST(reqPath, func(c *gin.Context) {
			reqBodyJson, _ := c.GetRawData()
			reqBodyType := st.Method(0).Type.In(2)
			param := reflect.New(reqBodyType)

			// 解析JSON数据到参数实例
			err := json.Unmarshal(reqBodyJson, &param)
			if err != nil {
				fmt.Println("here")
				c.Writer.WriteString("error")
				return
			}
			fmt.Println("param:", param, param.Type())
			st.Method(0).Func.Call([]reflect.Value{
				reflect.ValueOf(ctrl),
				reflect.ValueOf(c),
				reflect.ValueOf(param),
			})
		})
	}
}

type Server struct {
	g *gin.Engine
}

var serv = Server{
	g: gin.Default(),
}

type context struct {
}

func init() {
	RouteRegister(GetUserName{})
}

type GetUserName struct {
	Controller `route:"/v1/get/User/Name" method:"post"`
}

type require struct {
	Id   string `json:"id"`
	Pass string `json:"pass"`
	Why  string `json:"why"`
}

type respones struct {
	name string `json:"name"`
}

func (this GetUserName) GetName(ctx *gin.Context, req *require) *respones {
	ctx.Writer.WriteString("GetName")
	return nil
}

func main() {
	serv.g.Run(":8080")
}


用户: tzy
时间: 2024-01-07T04:26:08.373Z
消息: 用中文告诉我“reflect: Elem of invalid type main.require”怎么解决？代码如下package main

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"reflect"
	"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
	fmt.Println("!23")
}

type IController interface {
	PushRegisterList()
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
	st := reflect.TypeOf(ctrl)
	field := st.Field(0)

	method := strings.ToUpper(field.Tag.Get("method"))
	reqPath := field.Tag.Get("route")

	if st.NumMethod() != 2 {
		panic("Controller method error")
	}

	fmt.Println("methodNum:", st.NumMethod())
	fn := st.Method(1)

	fn.Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
	})

	fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
	// 调用pushRegisterList方法
	fmt.Println(field.Type.Method(0).Name)
	//method.Call(nil)

	fmt.Println("method:", method, reqPath)
	switch method {
	case "POST":
		fmt.Println("reqPath:", reqPath)
		serv.g.POST(reqPath, func(c *gin.Context) {
			reqBodyJson, _ := c.GetRawData()
			reqBodyType := st.Method(0).Type.In(2)
			param := reflect.New(reqBodyType.Elem())

			fmt.Println("params:", param.Type())
			// 解析JSON数据到参数实例
			err := json.Unmarshal(reqBodyJson, param)
			if err != nil {
				fmt.Println("here", err)
				c.Writer.WriteString("error")
				return
			}
			fmt.Println("param:", st.Method(0).Name, param.Elem().String())
			st.Method(0).Func.Call([]reflect.Value{
				reflect.ValueOf(ctrl),
				reflect.ValueOf(c),
				param.Elem(),
			})
		})
	}
}

type Server struct {
	g *gin.Engine
}

var serv = Server{
	g: gin.Default(),
}

type context struct {
}

func init() {
	RouteRegister(GetUserName{})
}

type GetUserName struct {
	Controller `route:"/v1/get/User/Name" method:"post"`
}

type require struct {
	Id   string `json:"id"`
	Pass string `json:"pass"`
	Why  string `json:"why"`
}

type respones struct {
	name string `json:"name"`
}

func (this GetUserName) GetName(ctx *gin.Context, req *require) *respones {
	ctx.JSON(200, map[string]string{
		"id":   req.Id,
		"pass": req.Pass,
		"why":  req.Why,
	})
	return nil
}

func main() {
	serv.g.Run(":8080")
}


用户: tzy
时间: 2024-01-07T04:26:58.603Z
消息: 不，问题出在err := json.Unmarshal(reqBodyJson, param)

用户: tzy
时间: 2024-01-07T04:29:59.778Z
消息: go的json标签，怎么表示是否是必须项？

用户: tzy
时间: 2024-01-07T04:35:01.398Z
消息: 那么下面的代码，是否无法通过 json.Unmarshal判断json数据是否是req结构体类型的？package main

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"reflect"
	"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
	fmt.Println("!23")
}

type IController interface {
	PushRegisterList()
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
	st := reflect.TypeOf(ctrl)
	field := st.Field(0)

	method := strings.ToUpper(field.Tag.Get("method"))
	reqPath := field.Tag.Get("route")

	if st.NumMethod() != 2 {
		panic("Controller method error")
	}

	fmt.Println("methodNum:", st.NumMethod())
	fn := st.Method(1)

	fn.Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
	})

	fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
	// 调用pushRegisterList方法
	fmt.Println(field.Type.Method(0).Name)
	//method.Call(nil)

	fmt.Println("method:", method, reqPath)
	switch method {
	case "POST":
		fmt.Println("reqPath:", reqPath)
		serv.g.POST(reqPath, func(c *gin.Context) {
			reqBodyJson, _ := c.GetRawData()
			reqBodyType := st.Method(0).Type.In(2)
			param := reflect.New(reqBodyType.Elem()).Interface()

			//fmt.Println("params:", param.Type())
			// 解析JSON数据到参数实例
			err := json.Unmarshal(reqBodyJson, param)
			if err != nil {
				fmt.Println("here", err)
				c.Writer.WriteString("error")
				return
			}
			//fmt.Println("param:", st.Method(0).Name, param.Elem().String())
			st.Method(0).Func.Call([]reflect.Value{
				reflect.ValueOf(ctrl),
				reflect.ValueOf(c),
				reflect.ValueOf(param),
			})
		})
	}
}

type Server struct {
	g *gin.Engine
}

var serv = Server{
	g: gin.Default(),
}

type context struct {
}

func init() {
	RouteRegister(GetUserName{})
}

type GetUserName struct {
	Controller `route:"/v1/get/User/Name" method:"post"`
}

type  require struct {
	Id   string `json:"id,omitempty"`
	Pass string `json:"pass,omitempty"`
	Why  string `json:"why,omitempty"`
}

type respones struct {
	name string `json:"name"`
}

func (this GetUserName) GetName(ctx *gin.Context, req *require) *respones {
	ctx.JSON(200, req)
	return nil
}

func main() {
	serv.g.Run(":8080")
}


用户: tzy
时间: 2024-01-07T04:56:29.016Z
消息: 那么下面的代码，是否无法通过 json.Unmarshal判断json数据是否是req结构体类型的？如果不能通过这种方法确定json数据是否合法，那如何改良我的代码已达成目的？
package main

import (
"encoding/json"
"fmt"
"github.com/gin-gonic/gin"
"reflect"
"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
fmt.Println("!23")
}

type IController interface {
PushRegisterList()
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
st := reflect.TypeOf(ctrl)
field := st.Field(0)

method := strings.ToUpper(field.Tag.Get("method"))
reqPath := field.Tag.Get("route")

if st.NumMethod() != 2 {
	panic("Controller method error")
}

fmt.Println("methodNum:", st.NumMethod())
fn := st.Method(1)

fn.Func.Call([]reflect.Value{
	reflect.ValueOf(ctrl),
})

fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
// 调用pushRegisterList方法
fmt.Println(field.Type.Method(0).Name)
//method.Call(nil)

fmt.Println("method:", method, reqPath)
switch method {
case "POST":
	fmt.Println("reqPath:", reqPath)
	serv.g.POST(reqPath, func(c *gin.Context) {
		reqBodyJson, _ := c.GetRawData()
		reqBodyType := st.Method(0).Type.In(2)
		param := reflect.New(reqBodyType.Elem()).Interface()

		//fmt.Println("params:", param.Type())
		// 解析JSON数据到参数实例
		err := json.Unmarshal(reqBodyJson, param)
		if err != nil {
			fmt.Println("here", err)
			c.Writer.WriteString("error")
			return
		}
		//fmt.Println("param:", st.Method(0).Name, param.Elem().String())
		st.Method(0).Func.Call([]reflect.Value{
			reflect.ValueOf(ctrl),
			reflect.ValueOf(c),
			reflect.ValueOf(param),
		})
	})
}
}

type Server struct {
g *gin.Engine
}

var serv = Server{
g: gin.Default(),
}

type context struct {
}

func init() {
RouteRegister(GetUserName{})
}

type GetUserName struct {
Controller route:"/v1/get/User/Name" method:"post"
}

type  require struct {
Id   string json:"id,omitempty"
Pass string json:"pass,omitempty"
Why  string json:"why,omitempty"
}

type respones struct {
name string json:"name"
}

func (this GetUserName) GetName(ctx *gin.Context, req *require) *respones {
ctx.JSON(200, req)
return nil
}

func main() {
serv.g.Run(":8080")
}

用户: tzy
时间: 2024-01-07T04:57:01.558Z
消息: 是的，你想要确定 JSON 数据是否符合特定结构体类型，并且我希望对此进行改良，以便在确定 JSON 数据是否合法时有更好的方法。

用户: tzy
时间: 2024-01-07T04:58:12.973Z
消息: 不，我是希望你修正我的代码，以达成目的

用户: tzy
时间: 2024-01-07T05:00:13.354Z
消息: 下面的代码，是否无法通过 json.Unmarshal判断json数据是否是req结构体类型的？如果不能通过这种方法确定json数据是否合法，那如何改良我的代码以实现对json数据的校验？
package main

import (
"encoding/json"
"fmt"
"github.com/gin-gonic/gin"
"reflect"
"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
fmt.Println("!23")
}

type IController interface {
PushRegisterList()
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
st := reflect.TypeOf(ctrl)
field := st.Field(0)

method := strings.ToUpper(field.Tag.Get("method"))
reqPath := field.Tag.Get("route")

if st.NumMethod() != 2 {
panic("Controller method error")
}

fmt.Println("methodNum:", st.NumMethod())
fn := st.Method(1)

fn.Func.Call([]reflect.Value{
reflect.ValueOf(ctrl),
})

fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
// 调用pushRegisterList方法
fmt.Println(field.Type.Method(0).Name)
//method.Call(nil)

fmt.Println("method:", method, reqPath)
switch method {
case "POST":
fmt.Println("reqPath:", reqPath)
serv.g.POST(reqPath, func(c *gin.Context) {
reqBodyJson, _ := c.GetRawData()
reqBodyType := st.Method(0).Type.In(2)
param := reflect.New(reqBodyType.Elem()).Interface()

	//fmt.Println("params:", param.Type())
	// 解析JSON数据到参数实例
	err := json.Unmarshal(reqBodyJson, param)
	if err != nil {
		fmt.Println("here", err)
		c.Writer.WriteString("error")
		return
	}
	//fmt.Println("param:", st.Method(0).Name, param.Elem().String())
	st.Method(0).Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
		reflect.ValueOf(c),
		reflect.ValueOf(param),
	})
})
}
}

type Server struct {
g *gin.Engine
}

var serv = Server{
g: gin.Default(),
}

type context struct {
}

func init() {
RouteRegister(GetUserName{})
}

type GetUserName struct {
Controller route:"/v1/get/User/Name" method:"post"
}

type  require struct {
Id   string json:"id,omitempty"
Pass string json:"pass,omitempty"
Why  string json:"why,omitempty"
}

type respones struct {
name string json:"name"
}

func (this GetUserName) GetName(ctx *gin.Context, req *require) *respones {
ctx.JSON(200, req)
return nil
}

func main() {
serv.g.Run(":8080")
}

用户: tzy
时间: 2024-01-07T05:05:33.380Z
消息: 下面的代码，是否无法通过 json.Unmarshal判断json数据是否是req结构体类型的？如果不能通过这种方法确定json数据是否合法，那如何改良RouteRegister函数以实现对json数据的校验？
package main

import (
"encoding/json"
"fmt"
"github.com/gin-gonic/gin"
"reflect"
"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
fmt.Println("!23")
}

type IController interface {
PushRegisterList()
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
st := reflect.TypeOf(ctrl)
field := st.Field(0)

method := strings.ToUpper(field.Tag.Get("method"))
reqPath := field.Tag.Get("route")

if st.NumMethod() != 2 {
panic("Controller method error")
}

fmt.Println("methodNum:", st.NumMethod())
fn := st.Method(1)

fn.Func.Call([]reflect.Value{
reflect.ValueOf(ctrl),
})

fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
// 调用pushRegisterList方法
fmt.Println(field.Type.Method(0).Name)
//method.Call(nil)

fmt.Println("method:", method, reqPath)
switch method {
case "POST":
fmt.Println("reqPath:", reqPath)
serv.g.POST(reqPath, func(c *gin.Context) {
reqBodyJson, _ := c.GetRawData()
reqBodyType := st.Method(0).Type.In(2)
param := reflect.New(reqBodyType.Elem()).Interface()

//fmt.Println("params:", param.Type())
// 解析JSON数据到参数实例
err := json.Unmarshal(reqBodyJson, param)
if err != nil {
	fmt.Println("here", err)
	c.Writer.WriteString("error")
	return
}
//fmt.Println("param:", st.Method(0).Name, param.Elem().String())
st.Method(0).Func.Call([]reflect.Value{
	reflect.ValueOf(ctrl),
	reflect.ValueOf(c),
	reflect.ValueOf(param),
})
})
}
}

type Server struct {
g *gin.Engine
}

var serv = Server{
g: gin.Default(),
}

type context struct {
}

func init() {
RouteRegister(GetUserName{})
}

type GetUserName struct {
Controller route:"/v1/get/User/Name" method:"post"
}

type  require struct {
Id   string `json:"id,omitempty"`
Pass string `json:"pass,omitempty"`
Why  string `json:"why,omitempty"`
}

type respones struct {
name string `json:"name"`
}

func (this GetUserName) GetName(ctx *gin.Context, req *require) *respones {
ctx.JSON(200, req)
return nil
}

func main() {
serv.g.Run(":8080")
}

用户: tzy
时间: 2024-01-07T05:11:56.579Z
消息: NIHAO WOJIAOYINTING

用户: tzy
时间: 2024-01-07T05:12:12.558Z
消息: OYUANLAINIHUIJIANGZHONGWENAHHHHHHH

用户: tzy
时间: 2024-01-07T11:00:35.430Z
消息: go如何判断变量是否是0值？如string类型的是否是“”，int等数字类型的是否是0？，指针类型是否是nil？

用户: tzy
时间: 2024-01-07T11:00:52.363Z
消息: 我的意思是，有没有通用函数可以做这种判断

用户: tzy
时间: 2024-01-07T11:04:06.149Z
消息: 是否能通过 reflect.ValueOf(a) 判断a的成员变量是否为空值？

用户: tzy
时间: 2024-01-07T11:10:37.203Z
消息: 用中文告诉我，在todo标记的地方，如何判断param的成员变量是否为空值？代码如下：package main

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"reflect"
	"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
	fmt.Println("!23")
}

type IController interface {
	PushRegisterList()
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
	st := reflect.TypeOf(ctrl)
	field := st.Field(0)

	method := strings.ToUpper(field.Tag.Get("method"))
	reqPath := field.Tag.Get("route")

	if st.NumMethod() != 2 {
		panic("Controller method error")
	}

	fmt.Println("methodNum:", st.NumMethod())
	fn := st.Method(1)

	fn.Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
	})

	fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
	// 调用pushRegisterList方法
	fmt.Println(field.Type.Method(0).Name)
	//method.Call(nil)

	fmt.Println("method:", method, reqPath)
	switch method {
	case "POST":
		fmt.Println("reqPath:", reqPath)
		serv.g.POST(reqPath, func(c *gin.Context) {
			reqBodyJson, _ := c.GetRawData()
			reqBodyType := st.Method(0).Type.In(2)
			param := reflect.New(reqBodyType.Elem()).Interface()

			//fmt.Println("params:", param.Type())
			// 解析JSON数据到参数实例
			err := json.Unmarshal(reqBodyJson, param)
			if err != nil {
				fmt.Println("here", err)
				c.Writer.WriteString("error")
				return
			}

			//todo
			
			//fmt.Println("param:", st.Method(0).Name, param.Elem().String())
			st.Method(0).Func.Call([]reflect.Value{
				reflect.ValueOf(ctrl),
				reflect.ValueOf(c),
				reflect.ValueOf(param),
			})
		})
	}
}

type Server struct {
	g *gin.Engine
}

var serv = Server{
	g: gin.Default(),
}

type context struct {
}

func init() {
	RouteRegister(GetUserName{})
}

type GetUserName struct {
	Controller `route:"/v1/get/User/Name" method:"post"`
}

type require struct {
	Id   string `json:"id"`
	Pass string `json:"pass,omitempty"`
	Why  string `json:"why,omitempty"`
}

type respones struct {
	name string `json:"name"`
}

func (this GetUserName) GetName(ctx *gin.Context, req *require) *respones {
	ctx.JSON(200, req)
	return nil
}

func main() {
	serv.g.Run(":8080")
}


用户: tzy
时间: 2024-01-07T11:10:56.794Z
消息: 你错了，param是any类型的变量

用户: tzy
时间: 2024-01-07T12:13:56.756Z
消息: 用中文告诉我，为什么下面的代码出现：.\main.go:90:7: undefined: isJsonInvalid
package main

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"net/http"
	"reflect"
	"strings"
)

type Controller struct {
}

func (this Controller) PushRegisterList() {
	fmt.Println("!23")
}

type IController interface {
	PushRegisterList()
}

// 判断request json对象必选参数是否缺失
func isJsonParamMiss(jsonInstance reflect.Value) bool {
	for i := 0; i < jsonInstance.NumField(); i++ {
		fieldValue := jsonInstance.Field(i)
		// 如果是可选项则跳过判断
		if strings.Contains(fieldValue.Type().Field(i).Tag.Get("json"), "omitempty") {
			continue
		}

		// 结构体类型递归判断
		if fieldValue.Type().Kind() == reflect.Struct {
			if isJsonParamMiss(fieldValue) {
				return true
			}
		}

		// 基础数据类型直接判断
		if fieldValue.IsZero() {
			return true
		}
	}

	return false
}

// func RouteRegister[T IController](ctrl T) {
func RouteRegister(ctrl IController) {
	st := reflect.TypeOf(ctrl)
	field := st.Field(0)

	method := strings.ToUpper(field.Tag.Get("method"))
	reqPath := field.Tag.Get("route")

	if st.NumMethod() != 2 {
		panic("Controller method error")
	}

	fmt.Println("methodNum:", st.NumMethod())
	fn := st.Method(1)

	fn.Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
	})

	fmt.Println("params:", st.Method(0).Type.In(1), st.Method(0).Type.In(2))
	// 调用pushRegisterList方法
	fmt.Println(field.Type.Method(0).Name)
	//method.Call(nil)

	fmt.Println("method:", method, reqPath)
	switch method {
	case "POST":
		fmt.Println("reqPath:", reqPath)
		serv.g.POST(reqPath, func(c *gin.Context) {
			reqBodyJson, _ := c.GetRawData()
			reqBodyType := st.Method(0).Type.In(2)
			param := reflect.New(reqBodyType.Elem()).Interface()

			//fmt.Println("params:", param.Type())
			// 解析JSON数据到参数实例
			err := json.Unmarshal(reqBodyJson, param)
			if err != nil {
				c.String(http.StatusBadRequest, "Invalid Json Request")
				return
			}

			indirectParam := reflect.Indirect(reflect.ValueOf(param))
			if isJsonInvalid(indirectParam) {
				c.String(http.StatusBadRequest, "Invalid Json Request")
			}

			st.Method(0).Func.Call([]reflect.Value{
				reflect.ValueOf(ctrl),
				reflect.ValueOf(c),
				reflect.ValueOf(param),
			})
		})
	}
}

type Server struct {
	g *gin.Engine
}

var serv = Server{
	g: gin.Default(),
}

type context struct {
}

func init() {
	RouteRegister(GetUserName{})
}

type GetUserName struct {
	Controller `route:"/v1/get/User/Name" method:"post"`
}

type require struct {
	Id   string `json:"id"`
	Pass string `json:"pass,omitempty"`
	Why  string `json:"why,omitempty"`
}

type respones struct {
	name string `json:"name"`
}

func (this GetUserName) GetName(ctx *gin.Context, req *require) *respones {
	req.Id += "handle"
	ctx.JSON(200, req)
	ctx.JSON(200, req)
	return nil
}

func main() {
	serv.g.Run(":8080")
}


用户: tzy
时间: 2024-01-07T12:14:17.170Z
消息: 你仔细看我的代码，这个函数是已经定义的

用户: tzy
时间: 2024-01-08T06:20:49.839Z
消息: 个人成长方面的okr

用户: tzy
时间: 2024-01-08T06:21:32.153Z
消息: 提升个人能力及在团队协作能力的okr

用户: tzy
时间: 2024-01-08T06:30:18.625Z
消息: 赔付审核的OKR

用户: tzy
时间: 2024-01-08T06:58:59.769Z
消息: 大概就是提升在团队中存在感的okr

用户: tzy
时间: 2024-01-09T02:31:59.494Z
消息: 我使用gorm.io/gen库的时候返回错误信息：illegal character NUL，是为啥

用户: tzy
时间: 2024-01-09T03:06:55.313Z
消息: 通常来说，我们开发服务器时，需要将一条消息的请求作为一个数据库事务完成吗

用户: tzy
时间: 2024-01-09T03:07:57.574Z
消息: 那具体在设计服务器框架的时候，我应该如何设计呢？请以gin框架为例，二次开发一个以一条消息的请求作为一个数据库事务的web服务器框架

用户: tzy
时间: 2024-01-09T03:11:39.182Z
消息: 分析一下你给我的这串代码，请问它什么时候会回滚？：
package main

import (
	"github.com/gin-gonic/gin"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

type Message struct {
	ID   int    `json:"id"`
	Text string `json:"text"`
}

func main() {
	r := gin.Default()
	db, err := gorm.Open(sqlite.Open("test.db"), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}
	db.AutoMigrate(&Message{})

	// 中间件函数用于处理数据库事务
	txMiddleware := func() gin.HandlerFunc {
		return func(c *gin.Context) {
			tx := db.Begin()
			c.Set("tx", tx)
			c.Next()

			if c.Writer.Written() {
				tx.Commit()
			} else {
				tx.Rollback()
			}
		}
	}

	r.Use(txMiddleware())

	// 处理请求的函数
	r.POST("/message", func(c *gin.Context) {
		var message Message
		if err := c.ShouldBindJSON(&message); err == nil {
			tx, _ := c.Get("tx")
			db := tx.(*gorm.DB)
			db.Create(&message)
			c.JSON(200, message)
		} else {
			c.JSON(400, gin.H{"error": "Invalid request"})
		}
	})

	r.Run(":8080")
}

用户: tzy
时间: 2024-01-09T03:12:05.305Z
消息: c.Writer.Written()什么时候为真呢

用户: tzy
时间: 2024-01-09T06:15:50.514Z
消息: 并发场景下，gorm会不会提交错事务？

用户: tzy
时间: 2024-01-09T06:17:00.126Z
消息: 下面这段代码虽然好，但是并非每条信息都需要用到db，如何改进呢？
package main

import (
	"github.com/gin-gonic/gin"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

type Message struct {
	ID   int    `json:"id"`
	Text string `json:"text"`
}

func main() {
	r := gin.Default()
	db, err := gorm.Open(sqlite.Open("test.db"), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}
	db.AutoMigrate(&Message{})

	// 中间件函数用于处理数据库事务
	txMiddleware := func() gin.HandlerFunc {
		return func(c *gin.Context) {
			tx := db.Begin()
			c.Set("tx", tx)
			c.Next()

			if c.Writer.Written() {
				tx.Commit()
			} else {
				tx.Rollback()
			}
		}
	}

	r.Use(txMiddleware())

	// 处理请求的函数
	r.POST("/message", func(c *gin.Context) {
		var message Message
		if err := c.ShouldBindJSON(&message); err == nil {
			tx, _ := c.Get("tx")
			db := tx.(*gorm.DB)
			db.Create(&message)
			c.JSON(200, message)
		} else {
			c.JSON(400, gin.H{"error": "Invalid request"})
		}
	})

	r.Run(":8080")
}


用户: tzy
时间: 2024-01-09T06:18:29.203Z
消息: 我的意思是，为何不在处理请求的函数中自由选择是否开启事务，而中间件里面自动判断是否要提交事务？

用户: tzy
时间: 2024-01-09T06:21:24.718Z
消息: 我的意思是，不用在中间件中开启事务，而是在处理请求的函数中自由选择是否开启事务，在中间件里面自动判断是否要提交事务？

用户: tzy
时间: 2024-01-09T08:48:18.777Z
消息: goframe框架是否是通过给进程发送信号实现优雅重启的？如果是，那么gf工具是如何获取进程号的？

用户: tzy
时间: 2024-01-09T08:49:07.234Z
消息: goframe框架是否是通过给进程发送信号实现优雅重启的？如果是，那么gf工具是如何获取进程号的？

用户: tzy
时间: 2024-01-09T08:49:21.036Z
消息: goframe框架是否是通过给进程发送信号实现优雅重启的？如果是，那么gf工具是如何获取进程号的？

用户: tzy
时间: 2024-01-09T08:49:39.077Z
消息: goframe框架是否是通过给进程发送信号实现优雅重启的？如果是，那么gf工具是如何获取进程号的？

用户: tzy
时间: 2024-01-09T08:50:26.221Z
消息: 那如果你来做框架开发者，你会怎么获取服务器的进程号？要知道，服务器的进程名字可不是固定的

用户: tzy
时间: 2024-01-09T09:51:37.442Z
消息: golang的air工具是否适用于线上环境用于优雅重启？

用户: tzy
时间: 2024-01-09T09:52:50.968Z
消息: 有哪些库可以帮助我优雅重启gin框架？告诉我并给我示例代码

用户: tzy
时间: 2024-01-09T11:47:37.622Z
消息: go的endless库提到了hammerTime，那它说的hammerTime是啥意思？

用户: tzy
时间: 2024-01-09T11:48:29.023Z
消息: go的endless库中的hammerTime是什么意思？触发了hammerTime的话，会发生什么？

用户: tzy
时间: 2024-01-09T11:48:55.358Z
消息: go的endless库中的hammerTime是什么意思？触发了hammerTime的话，会发生什么？

用户: tzy
时间: 2024-01-09T11:49:21.122Z
消息: "github.com/fvbock/endless"库中的hammerTime是什么意思？触发了hammerTime的话，会发生什么？

用户: tzy
时间: 2024-01-10T02:27:08.504Z
消息: 个人过往正确践行文化价值观的行为及材料举证补充

用户: tzy
时间: 2024-01-10T02:28:51.582Z
消息: 个人突出业绩产出及举证说明（形式不限）

用户: tzy
时间: 2024-01-10T02:35:32.922Z
消息: 	fmt.Println("fn.type:", fn.Func.Type())
	fmt.Println("valueOf ctrl:", reflect.ValueOf(ctrl).Type())
	fn.Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
	})

上面的代码打印的结果是：
fn.type: func(user.GetUserInfo) *route.api
valueOf ctrl: user.GetUserInfo
panic: reflect: Field index out of bounds

那么：为什么会出现该panic？如何修正？

用户: tzy
时间: 2024-01-10T02:36:29.702Z
消息: 	fmt.Println("fn.type:", fn.Func.Type())
	fmt.Println("valueOf ctrl:", reflect.ValueOf(ctrl).Type())
	fn.Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
	})

上面的代码打印的结果是：
fn.type: func(user.GetUserInfo) *route.api
valueOf ctrl: user.GetUserInfo
panic: reflect: Field index out of bounds

那么：为什么会出现该panic？如何修正？

用户: tzy
时间: 2024-01-10T02:37:52.470Z
消息: 	fmt.Println("fn.type:", fn.Func.Type())
	fmt.Println("valueOf ctrl:", reflect.ValueOf(ctrl).Type())
	fn.Func.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
	})

上面的代码打印的结果是：
fn.type: func(user.GetUserInfo) *route.api
valueOf ctrl: user.GetUserInfo
panic: reflect: Field index out of bounds

那么：为什么会出现该panic？如何修正？

用户: tzy
时间: 2024-01-10T02:40:20.822Z
消息: fmt.Println("fn.type:", fn.Func.Type())
fmt.Println("valueOf ctrl:", reflect.ValueOf(ctrl).Type())
fn.Func.Call([]reflect.Value{
	reflect.ValueOf(ctrl),
})
上面的代码打印的结果是：
fn.type: func(user.GetUserInfo) *route.api
valueOf ctrl: user.GetUserInfo
panic: reflect: Field index out of bounds

那么：为什么会出现该panic？如何修正？

用户: tzy
时间: 2024-01-10T02:43:01.502Z
消息: 代码如下：
fn.Func.Call([]reflect.Value{
reflect.ValueOf(ctrl),
})

情况如下：
fn的类型是: func(user.GetUserInfo) *route.api
ctrl的类型是: user.GetUserInfo
那么为什么会出现panic: reflect: Field index out of bounds？如何修正？

用户: tzy
时间: 2024-01-10T02:48:52.501Z
消息: 商户团队在2023年的核心业务价值产出及贡献及举证说明

用户: tzy
时间: 2024-01-10T02:55:39.343Z
消息: 践行文化价值观的行为

用户: tzy
时间: 2024-01-10T02:56:56.159Z
消息: fn的类型是: func(user.GetUserInfo) *route.Api，ctrl的类型是: user.GetUserInfo，我的代码如下：
fn.Func.Call([]reflect.Value{
reflect.ValueOf(ctrl),
})
那么为什么会出现panic: reflect: Field index out of bounds？如何修正？

用户: tzy
时间: 2024-01-10T02:57:19.980Z
消息: 所以问题到底出在哪里？

用户: tzy
时间: 2024-01-10T02:57:37.976Z
消息: 我已经把打印的结果告诉你了

用户: tzy
时间: 2024-01-10T02:58:01.290Z
消息: 打印结果：fn的类型是: func(user.GetUserInfo) *route.Api，ctrl的类型是: user.GetUserInfo

用户: tzy
时间: 2024-01-10T03:05:21.203Z
消息: 从人工和策略方面发现并提出解决问题

用户: tzy
时间: 2024-01-10T03:13:42.824Z
消息: 人过往正确践行文化价值观的行为

用户: tzy
时间: 2024-01-10T03:15:37.893Z
消息: 我需要更具体的例子

用户: tzy
时间: 2024-01-10T03:19:24.936Z
消息: 环保活动的意义

用户: tzy
时间: 2024-01-10T03:20:32.606Z
消息: 我想给“httpMethod”起一个简短的变量名，你有什么推荐？

用户: tzy
时间: 2024-01-10T03:20:43.726Z
消息: 还有呢？

用户: tzy
时间: 2024-01-10T03:20:55.469Z
消息: 以物换花 活动的意义

用户: tzy
时间: 2024-01-10T03:30:40.382Z
消息: 践行文化价值观的行为体现

用户: tzy
时间: 2024-01-12T09:59:51.189Z
消息: 本周学习了很多新业务方面的东西，帮我写一篇周报的心得

用户: tzy
时间: 2024-01-12T10:10:04.987Z
消息: 如何开启coredump？并用gdb查看堆栈信息？

用户: tzy
时间: 2024-01-16T09:26:54.350Z
消息: ImportError: cannot import name 'Literal'

用户: tzy
时间: 2024-01-16T09:53:25.765Z
消息: 下面是什么原因：
[root@VM-12-16-centos app]# python main.py 
Traceback (most recent call last):
  File "/data/app/main.py", line 1, in <module>
    from fastapi import FastAPI
ModuleNotFoundError: No module named 'fastapi'
[root@VM-12-16-centos app]# pip3 install fastapi
WARNING: Running pip install with root privileges is generally not a good idea. Try `pip3 install --user` instead.
Requirement already satisfied: fastapi in /usr/local/lib/python3.6/site-packages
Requirement already satisfied: starlette==0.19.1 in /usr/local/lib/python3.6/site-packages (from fastapi)
Requirement already satisfied: pydantic!=1.7,!=1.7.1,!=1.7.2,!=1.7.3,!=1.8,!=1.8.1,<2.0.0,>=1.6.2 in /usr/local/lib/python3.6/site-packages (from fastapi)
Requirement already satisfied: typing-extensions>=3.10.0; python_version < "3.10" in /usr/local/lib/python3.6/site-packages (from starlette==0.19.1->fastapi)
Requirement already satisfied: contextlib2>=21.6.0; python_version < "3.7" in /usr/local/lib/python3.6/site-packages (from starlette==0.19.1->fastapi)
Requirement already satisfied: anyio<5,>=3.4.0 in /usr/local/lib/python3.6/site-packages (from starlette==0.19.1->fastapi)
Requirement already satisfied: dataclasses>=0.6; python_version < "3.7" in /usr/local/lib/python3.6/site-packages (from pydantic!=1.7,!=1.7.1,!=1.7.2,!=1.7.3,!=1.8,!=1.8.1,<2.0.0,>=1.6.2->fastapi)
Requirement already satisfied: contextvars; python_version < "3.7" in /usr/local/lib/python3.6/site-packages (from anyio<5,>=3.4.0->starlette==0.19.1->fastapi)
Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.6/site-packages (from anyio<5,>=3.4.0->starlette==0.19.1->fastapi)
Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.6/site-packages (from anyio<5,>=3.4.0->starlette==0.19.1->fastapi)
Requirement already satisfied: immutables>=0.9 in /usr/local/lib64/python3.6/site-packages (from contextvars; python_version < "3.7"->anyio<5,>=3.4.0->starlette==0.19.1->fastapi)

用户: tzy
时间: 2024-01-16T09:53:41.853Z
消息: 用中文告诉我，下面是什么原因：[root@VM-12-16-centos app]# python main.py 
Traceback (most recent call last):
  File "/data/app/main.py", line 1, in <module>
    from fastapi import FastAPI
ModuleNotFoundError: No module named 'fastapi'
[root@VM-12-16-centos app]# pip3 install fastapi
WARNING: Running pip install with root privileges is generally not a good idea. Try `pip3 install --user` instead.
Requirement already satisfied: fastapi in /usr/local/lib/python3.6/site-packages
Requirement already satisfied: starlette==0.19.1 in /usr/local/lib/python3.6/site-packages (from fastapi)
Requirement already satisfied: pydantic!=1.7,!=1.7.1,!=1.7.2,!=1.7.3,!=1.8,!=1.8.1,<2.0.0,>=1.6.2 in /usr/local/lib/python3.6/site-packages (from fastapi)
Requirement already satisfied: typing-extensions>=3.10.0; python_version < "3.10" in /usr/local/lib/python3.6/site-packages (from starlette==0.19.1->fastapi)
Requirement already satisfied: contextlib2>=21.6.0; python_version < "3.7" in /usr/local/lib/python3.6/site-packages (from starlette==0.19.1->fastapi)
Requirement already satisfied: anyio<5,>=3.4.0 in /usr/local/lib/python3.6/site-packages (from starlette==0.19.1->fastapi)
Requirement already satisfied: dataclasses>=0.6; python_version < "3.7" in /usr/local/lib/python3.6/site-packages (from pydantic!=1.7,!=1.7.1,!=1.7.2,!=1.7.3,!=1.8,!=1.8.1,<2.0.0,>=1.6.2->fastapi)
Requirement already satisfied: contextvars; python_version < "3.7" in /usr/local/lib/python3.6/site-packages (from anyio<5,>=3.4.0->starlette==0.19.1->fastapi)
Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.6/site-packages (from anyio<5,>=3.4.0->starlette==0.19.1->fastapi)
Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.6/site-packages (from anyio<5,>=3.4.0->starlette==0.19.1->fastapi)
Requirement already satisfied: immutables>=0.9 in /usr/local/lib64/python3.6/site-packages (from contextvars; python_version < "3.7"->anyio<5,>=3.4.0->starlette==0.19.1->fastapi)

用户: tzy
时间: 2024-01-16T09:54:04.633Z
消息: 如何使用虚拟环境

用户: tzy
时间: 2024-01-16T13:41:52.027Z
消息: 用中文告诉我，下面这是什么情况：pip3 install uvicorn
WARNING: pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.
Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError("Can't connect to HTTPS URL because the SSL module is not available.")': /simple/uvicorn/
WARNING: Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError("Can't connect to HTTPS URL because the SSL module is not available.")': /simple/uvicorn/
WARNING: Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError("Can't connect to HTTPS URL because the SSL module is not available.")': /simple/uvicorn/
WARNING: Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError("Can't connect to HTTPS URL because the SSL module is not available.")': /simple/uvicorn/
WARNING: Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError("Can't connect to HTTPS URL because the SSL module is not available.")': /simple/uvicorn/
Could not fetch URL https://pypi.tuna.tsinghua.edu.cn/simple/uvicorn/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.tuna.tsinghua.edu.cn', port=443): Max retries exceeded with url: /simple/uvicorn/ (Caused by SSLError("Can't connect to HTTPS URL because the SSL module is not available.")) - skipping
ERROR: Could not find a version that satisfies the requirement uvicorn (from versions: none)
ERROR: No matching distribution found for uvicorn
WARNING: pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.
Could not fetch URL https://pypi.tuna.tsinghua.edu.cn/simple/pip/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.tuna.tsinghua.edu.cn', port=443): Max retries exceeded with url: /simple/pip/ (Caused by SSLError("Can't connect to HTTPS URL because the SSL module is not available.")) - skipping
WARNING: There was an error checking the latest version of pip.


用户: tzy
时间: 2024-01-17T07:19:04.741Z
消息: 我在写ppt代码，帮助我获取50个随机数作为一个数组，每一个元素如：showNum1 = Int(Rnd * (lenNum))，接下来再使用for循环遍历里面的元素

用户: tzy
时间: 2024-01-17T07:19:16.129Z
消息: 我在写ppt代码，帮助我获取50个随机数作为一个数组，每一个元素如：showNum1 = Int(Rnd * (lenNum))，接下来再使用for循环遍历里面的元素

用户: tzy
时间: 2024-01-17T07:19:35.803Z
消息: 我在写ppt代码，帮助我获取50个随机数作为一个数组，每一个元素如：showNum1 = Int(Rnd * (lenNum))，接下来再使用for循环遍历里面的元素

用户: tzy
时间: 2024-01-17T07:19:41.107Z
消息: 我在写ppt代码，帮助我获取50个随机数作为一个数组，每一个元素如：showNum1 = Int(Rnd * (lenNum))，接下来再使用for循环遍历里面的元素

用户: tzy
时间: 2024-01-17T07:19:48.221Z
消息: 我在写ppt代码，帮助我获取50个随机数作为一个数组，每一个元素如：showNum1 = Int(Rnd * (lenNum))，接下来再使用for循环遍历里面的元素

用户: tzy
时间: 2024-01-17T12:07:37.134Z
消息: 用vb写一个生成50个不重复随机数的代码

用户: tzy
时间: 2024-01-17T13:04:35.548Z
消息: 这个代码的结果范围会是多少：Int(810 * Rnd + 1)

用户: tzy
时间: 2024-01-17T13:06:40.388Z
消息: 我的代码会出现错误，在SlideShowWindows(1).View.Slide.Shapes("text_show" & CStr(i)).TextFrame.TextRange.Text = nameArray(randomNumbers(ii)) + " " + nameArray(randomNumbers(ii + 1)) + " " + nameArray(randomNumbers(ii + 2)) + " " + nameArray(randomNumbers(ii + 3)) + " " + nameArray(randomNumbers(ii + 4)) '将抽到的名字显示在文这行。
全部代码如下，请告诉我是什么原因导致的：
Option Explicit
Dim is_runing As Boolean '是否运行，判断抽奖是否在滚动
Dim nameArray() As String '放抽奖名字的数组
Dim temp As Integer '临时变量
Dim lenNum As Integer '抽奖数组长度记录

'初始化调用('加载名字,名字个数，是否运行等变量设置)
Sub OnSlideShowPageChange()
    Dim names As String
    'SlideShowWindows(1).View.Slide是当前幻灯片 ， shapes("text_names")是幻灯片中的形状
    names = SlideShowWindows(1).View.Slide.Shapes("text_names").TextFrame.TextRange.Text '读取文本框中的字符串
    nameArray = Split(names, " ") '将名字字符串按空格分割开，存入抽奖数组中
    lenNum = UBound(nameArray) - LBound(nameArray) + 1 '计算名字数组的个数
    If lenNum <= 1 Then MsgBox ("抽奖名单未设置，请先将抽奖内容用空格隔开放到下方的文本框后，再抽奖！")
    is_runing = False '初始化抽奖未运行
    CommandButton1.Caption = "点击抽奖" '按钮初始化显示文字
    SlideShowWindows(1).View.Slide.Shapes("text_show").TextFrame.TextRange.Text = "点击开始抽奖" '文本框的初识文字显示
    'MsgBox ("名字总数是：" & lenNum & "个")
End Sub

'暂停n毫秒函数
Private Sub sleep(ByRef n As Long)
   Dim x As Long
   x = Timer * 1000 + n
   Do While x >= Timer * 1000
       DoEvents
   Loop
End Sub

'滚动抽奖函数
Private Sub roll()
    Dim i As Integer, ii As Integer, showNum1 As Integer, showNum2 As Integer, showNum3 As Integer, showNum4 As Integer, showNum5 As Integer
    
    Randomize
    Do While is_runing
    
        'Dim randomNumbers(1 To 25) As Integer
        'Dim lenNum As Integer
        
        ' 初始化随机数生成器
        'Randomize
        
        ' 生成随机数并将其存储到数组中
        'For i = 1 To 25
        '    randomNumbers(i) = Int(Rnd * lenNum)
        '    sleep
        'Next i
        
        Dim randomNumbers(1 To 50) As Integer
        Dim randomNumber As Integer
        Dim j As Integer
        Dim isDuplicate As Boolean
        
        ' 生成随机数
        Randomize
        For i = 1 To 50
            isDuplicate = True
            While isDuplicate
                randomNumber = Int(810 * Rnd + 1) ' 生成1到810的随机数
                isDuplicate = False
                For j = 1 To i - 1
                    If randomNumbers(j) = randomNumber Then
                        isDuplicate = True
                        Exit For
                    End If
                Next j
            Wend
            randomNumbers(i) = randomNumber
        Next i
        
        ' 使用For循环遍历数组中的元素
        For i = 1 To 10
            ii = (i - 1) * 5 + 1
            
            MsgBox ii
            sleep 5
            SlideShowWindows(1).View.Slide.Shapes("text_show" & CStr(i)).TextFrame.TextRange.Text = nameArray(randomNumbers(ii)) + " " + nameArray(randomNumbers(ii + 1)) + " " + nameArray(randomNumbers(ii + 2)) + " " + nameArray(randomNumbers(ii + 3)) + " " + nameArray(randomNumbers(ii + 4)) '将抽到的名字显示在文

            sleep 1
        Next i

        sleep 50
    Loop
    If is_runing = False Then '停止运行后，将抽出的名字后面的名字往前移动
        'SlideShowWindows(1).View.Slide.Shapes("text_show1").TextFrame.TextRange.Text = nameArray(showNum1)
        For i = temp To UBound(nameArray) - 1
            nameArray(i) = nameArray(i + 1)
        Next i
        lenNum = lenNum - 1
    End If
    'MsgBox ("剩余的名字总数是：" & lenNum)
End Sub

Private Sub CommandButton1_Click()
    If is_runing Then
        is_runing = False
        CommandButton1.Caption = "点击抽奖"
    Else
        is_runing = True
        CommandButton1.Caption = "点击停止"
        If lenNum <= 1 Then
            MsgBox ("抽奖箱已空，请退出ppt后重新开始！")
        Else
            roll '调用上面的滚动抽奖函数
        End If
    End If
    'MsgBox ("当前状态：" & is_runing)
End Sub




用户: tzy
时间: 2024-01-17T14:03:04.254Z
消息: vb代码如何知道是否进入了下一个幻灯片？

用户: tzy
时间: 2024-01-17T14:05:15.668Z
消息: 是这样的，下面的代码，如果按下“点击抽奖”后，未按下“点击停止”就直接进入了下一个幻灯片，那么，如果在下一个幻灯片中点击了“点击停止”就会报错。如何解决呢，代码如下：
Option Explicit
Dim is_runing As Boolean '是否运行，判断抽奖是否在滚动
Dim nameArray() As String '放抽奖名字的数组
Dim temp As Integer '临时变量
Dim lenNum As Integer '抽奖数组长度记录

'初始化调用('加载名字,名字个数，是否运行等变量设置)
Sub OnSlideShowPageChange()
    Dim names As String
    'SlideShowWindows(1).View.Slide是当前幻灯片 ， shapes("text_names")是幻灯片中的形状
    names = SlideShowWindows(1).View.Slide.Shapes("text_names").TextFrame.TextRange.Text '读取文本框中的字符串
    nameArray = Split(names, " ") '将名字字符串按空格分割开，存入抽奖数组中
    lenNum = UBound(nameArray) - LBound(nameArray) + 1 '计算名字数组的个数
    If lenNum <= 1 Then MsgBox ("抽奖名单未设置，请先将抽奖内容用空格隔开放到下方的文本框后，再抽奖！")
    is_runing = False '初始化抽奖未运行
    CommandButton1.Caption = "点击抽奖" '按钮初始化显示文字
    SlideShowWindows(1).View.Slide.Shapes("text_show").TextFrame.TextRange.Text = "点击开始抽奖" '文本框的初识文字显示
    'MsgBox ("名字总数是：" & lenNum & "个")
End Sub

'暂停n毫秒函数
Private Sub sleep(ByRef n As Long)
   Dim x As Long
   x = Timer * 1000 + n
   Do While x >= Timer * 1000
       DoEvents
   Loop
End Sub

'滚动抽奖函数
Private Sub roll()
    Dim i As Integer, showNum1 As Integer, showNum2 As Integer, showNum3 As Integer, showNum As Integer, showNum4 As Integer
    
    
    Randomize
    Do While is_runing
        showNum1 = Int(Rnd * (lenNum)) '生成抽奖的随机数，用于读取数组中的名字
        sleep 4
        showNum2 = Int(Rnd * (lenNum)) '生成抽奖的随机数，用于读取数组中的名字
        sleep 5
        showNum3 = Int(Rnd * (lenNum)) '生成抽奖的随机数，用于读取数组中的名字
        sleep 1
        showNum4 = Int(Rnd * (lenNum)) '生成抽奖的随机数，用于读取数组中的名字
        sleep 12
        SlideShowWindows(1).View.Slide.Shapes("text_show1").TextFrame.TextRange.Text = nameArray(showNum1) '将抽到的名字显示在文本框
        SlideShowWindows(1).View.Slide.Shapes("text_show2").TextFrame.TextRange.Text = nameArray(showNum2) '将抽到的名字显示在文本框
        SlideShowWindows(1).View.Slide.Shapes("text_show3").TextFrame.TextRange.Text = nameArray(showNum3) '将抽到的名字显示在文本框
        SlideShowWindows(1).View.Slide.Shapes("text_show4").TextFrame.TextRange.Text = nameArray(showNum4) '将抽到的名字显示在文本框
        temp = showNum '存储抽到的随机数，用于后面的去重
        sleep 50
    Loop
    If is_runing = False Then '停止运行后，将抽出的名字后面的名字往前移动
        'SlideShowWindows(1).View.Slide.Shapes("text_show1").TextFrame.TextRange.Text = nameArray(showNum1)
        'For i = temp To UBound(nameArray) - 1
        '    nameArray(i) = nameArray(i + 1)
        'Next i
        'lenNum = lenNum - 1
    End If
    'MsgBox ("剩余的名字总数是：" & lenNum)
End Sub

Private Sub CommandButton1_Click()
    If is_runing Then
        is_runing = False
        CommandButton1.Caption = "点击抽奖"
    Else
        is_runing = True
        CommandButton1.Caption = "点击停止"
        If lenNum <= 1 Then
            MsgBox ("抽奖箱已空，请退出ppt后重新开始！")
        Else
            roll '调用上面的滚动抽奖函数
        End If
    End If
    'MsgBox ("当前状态：" & is_runing)
End Sub





用户: tzy
时间: 2024-01-17T14:52:11.323Z
消息: ppt怎么设置 点击某一个按钮时播放一段音乐，再次点击这个按钮时播放另一段音乐呢

用户: tzy
时间: 2024-01-17T15:11:05.926Z
消息: 下面的代码，如果按下“点击抽奖”后，未按下“点击停止”就直接进入了下一个幻灯片，那么，如果在下一个幻灯片中点击了“点击停止”就会报错。那么如何在ppt退出或者在进入下一页前，达到“点击停止”的效果呢？，代码如下：
Option Explicit
Dim is_runing As Boolean '是否运行，判断抽奖是否在滚动
Dim nameArray() As String '放抽奖名字的数组
Dim temp As Integer '临时变量
Dim lenNum As Integer '抽奖数组长度记录

'初始化调用('加载名字,名字个数，是否运行等变量设置)
Sub OnSlideShowPageChange()
Dim names As String
'SlideShowWindows(1).View.Slide是当前幻灯片 ， shapes("text_names")是幻灯片中的形状
names = SlideShowWindows(1).View.Slide.Shapes("text_names").TextFrame.TextRange.Text '读取文本框中的字符串
nameArray = Split(names, " ") '将名字字符串按空格分割开，存入抽奖数组中
lenNum = UBound(nameArray) - LBound(nameArray) + 1 '计算名字数组的个数
If lenNum <= 1 Then MsgBox ("抽奖名单未设置，请先将抽奖内容用空格隔开放到下方的文本框后，再抽奖！")
is_runing = False '初始化抽奖未运行
CommandButton1.Caption = "点击抽奖" '按钮初始化显示文字
SlideShowWindows(1).View.Slide.Shapes("text_show").TextFrame.TextRange.Text = "点击开始抽奖" '文本框的初识文字显示
'MsgBox ("名字总数是：" & lenNum & "个")
End Sub

'暂停n毫秒函数
Private Sub sleep(ByRef n As Long)
Dim x As Long
x = Timer * 1000 + n
Do While x >= Timer * 1000
DoEvents
Loop
End Sub

'滚动抽奖函数
Private Sub roll()
Dim i As Integer, showNum1 As Integer, showNum2 As Integer, showNum3 As Integer, showNum As Integer, showNum4 As Integer

Randomize
Do While is_runing
    showNum1 = Int(Rnd * (lenNum)) '生成抽奖的随机数，用于读取数组中的名字
    sleep 4
    showNum2 = Int(Rnd * (lenNum)) '生成抽奖的随机数，用于读取数组中的名字
    sleep 5
    showNum3 = Int(Rnd * (lenNum)) '生成抽奖的随机数，用于读取数组中的名字
    sleep 1
    showNum4 = Int(Rnd * (lenNum)) '生成抽奖的随机数，用于读取数组中的名字
    sleep 12
    SlideShowWindows(1).View.Slide.Shapes("text_show1").TextFrame.TextRange.Text = nameArray(showNum1) '将抽到的名字显示在文本框
    SlideShowWindows(1).View.Slide.Shapes("text_show2").TextFrame.TextRange.Text = nameArray(showNum2) '将抽到的名字显示在文本框
    SlideShowWindows(1).View.Slide.Shapes("text_show3").TextFrame.TextRange.Text = nameArray(showNum3) '将抽到的名字显示在文本框
    SlideShowWindows(1).View.Slide.Shapes("text_show4").TextFrame.TextRange.Text = nameArray(showNum4) '将抽到的名字显示在文本框
    temp = showNum '存储抽到的随机数，用于后面的去重
    sleep 50
Loop
If is_runing = False Then '停止运行后，将抽出的名字后面的名字往前移动
    'SlideShowWindows(1).View.Slide.Shapes("text_show1").TextFrame.TextRange.Text = nameArray(showNum1)
    'For i = temp To UBound(nameArray) - 1
    '    nameArray(i) = nameArray(i + 1)
    'Next i
    'lenNum = lenNum - 1
End If
'MsgBox ("剩余的名字总数是：" & lenNum)
End Sub

Private Sub CommandButton1_Click()
If is_runing Then
is_runing = False
CommandButton1.Caption = "点击抽奖"
Else
is_runing = True
CommandButton1.Caption = "点击停止"
If lenNum <= 1 Then
MsgBox ("抽奖箱已空，请退出ppt后重新开始！")
Else
roll '调用上面的滚动抽奖函数
End If
End If
'MsgBox ("当前状态：" & is_runing)
End Sub

用户: tzy
时间: 2024-01-17T15:12:29.389Z
消息: 不，我觉得应该是要在ppt退出或者在进入下一页前，结束当前程序

用户: tzy
时间: 2024-01-18T01:38:37.279Z
消息: sql语句 WHERE   dt like '2023%' 是什么意思

用户: tzy
时间: 2024-01-18T06:25:39.968Z
消息: word里面 两个换行符号怎么替换为空格

用户: tzy
时间: 2024-01-18T07:17:33.135Z
消息: cashCouponRecharge  这个是什么意思

用户: tzy
时间: 2024-01-18T15:13:30.370Z
消息: 我正在写ppt的vb代码，用vb给我写一个能在ppt代码中使用的加密算法加密和解密字符串“abc”的示例

用户: tzy
时间: 2024-01-18T15:21:40.147Z
消息: 那么ppt中的vb代码，如何将utf8字符转成中文？

用户: tzy
时间: 2024-01-18T15:22:42.674Z
消息: 有没有更简短的代码可以把utf8字符转成中文？

用户: tzy
时间: 2024-01-18T15:25:03.979Z
消息: 那如何把chineseString转为utf8String？

用户: tzy
时间: 2024-01-18T15:27:40.316Z
消息: 代码是不是有误？我使用utf8String = StrConv(chineseString, vbFromUnicode)后将Msg打印utf8String为问好


用户: tzy
时间: 2024-01-18T15:32:25.186Z
消息: 我正在写ppt的vb代码，用vb给我写一个能在ppt代码中将中文转化为字母的加密解密代码示例

用户: tzy
时间: 2024-01-18T15:36:58.192Z
消息: 为啥我用MsgBox打印出来不是字母？

用户: tzy
时间: 2024-01-18T15:40:07.503Z
消息: 运行时错误，‘13’

用户: tzy
时间: 2024-01-18T15:40:54.945Z
消息: vb在ppt中如何打印信息？

用户: tzy
时间: 2024-01-18T15:41:15.261Z
消息: 我是指用代码打印日志等信息

用户: tzy
时间: 2024-01-18T15:43:42.020Z
消息: 我正在写ppt的vb代码，用vb给我写一个能在ppt代码中将中文转化为字母的加密解密代码示例。如：将“你好”加密成“asedasfdasf213”等字符，并且能重新转化为中文

用户: tzy
时间: 2024-01-18T15:47:12.249Z
消息: 不对呀，加密后的结果还是中文是为什么

用户: tzy
时间: 2024-01-18T15:49:49.536Z
消息: charCode = CInt(codeArray(i + 1))这行会类型不匹配

用户: tzy
时间: 2024-01-18T15:51:23.964Z
消息: 下面的加解密代码在charCode = CInt(codeArray(i))这行会出现类型不匹配的问题，帮我修复它
Function EncryptText(text As String) As String
    Dim encryptedText As String
    Dim i As Integer
    For i = 1 To Len(text)
        Dim charCode As Integer
        charCode = Asc(Mid(text, i, 1))
        encryptedText = encryptedText & "-" & CStr(charCode) ' 添加分隔符
    Next i
    EncryptText = encryptedText
End Function

Function DecryptText(encryptedText As String) As String
    Dim decryptedText As String
    Dim codeArray() As String
    codeArray = Split(encryptedText, "-") ' 拆分加密字符串
    Dim i As Integer
    For i = 1 To UBound(codeArray) Step 2 ' 跳过分隔符获取字符编码
        Dim charCode As Integer
        charCode = CInt(codeArray(i))
        decryptedText = decryptedText & Chr(charCode)
    Next i
    DecryptText = decryptedText
End Function


用户: tzy
时间: 2024-01-18T16:01:34.115Z
消息: 帮我用vb写一个能在ppt里面运行的加解密函数，要求：可以将中文字符转换为纯字母的字符串，并且能通过这个纯字母的字符串在使用解密函数后重新得到中文

用户: tzy
时间: 2024-01-18T16:01:57.581Z
消息: 我不要映射的，我要加密的

用户: tzy
时间: 2024-01-18T16:03:15.449Z
消息: 帮我用vb写一个能在ppt里面运行的加解密函数，要求：可以将中文字符转换为只有字母和数字的字符串，并且能通过这个只有字母和数字的字符串在使用解密函数后重新得到中文。要求不使用映射的方法实现，越简单越好

用户: tzy
时间: 2024-01-19T05:48:21.130Z
消息: sql怎么写时间区间

用户: tzy
时间: 2024-01-19T09:50:19.344Z
消息: 这周我参与策划了年会的活动 帮我想想怎么写周报

用户: tzy
时间: 2024-01-20T03:42:00.195Z
消息: 我的python工程下有个.venv文件夹，是否可以通过它激活虚拟环境？

用户: tzy
时间: 2024-01-20T03:43:58.288Z
消息: 这个环境是在windows上打包的，所以没有bin目录，只有Scripts目录，我如何在mac上激活这个环境？

用户: tzy
时间: 2024-01-20T03:44:47.240Z
消息: dev % source ./.venv/Scripts/activate
./.venv/Scripts/activate:3: command not found: ^M
./.venv/Scripts/activate:70: parse error near `\n'

用户: tzy
时间: 2024-01-20T03:45:25.490Z
消息: zsh: command not found: dos2unix

用户: tzy
时间: 2024-01-20T03:46:14.430Z
消息: 激活了以后是不是还是得重新下载安装依赖？

用户: tzy
时间: 2024-01-20T03:46:46.919Z
消息: 那么为什么会：(.venv) tzy@TOMMYTTAN-MB0 dev % python3 start.py 
Traceback (most recent call last):
  File "/Users/tzy/ownCode/gpttalkRole/dev/start.py", line 1, in <module>
    import uvicorn
ModuleNotFoundError: No module named 'uvicorn'

用户: tzy
时间: 2024-01-20T03:48:07.036Z
消息: 不对呀，我下载好这个依赖后，又要我下载别的依赖

用户: tzy
时间: 2024-01-20T03:48:27.026Z
消息: 可是我已经激活虚拟环境了，按理来说不需要再下载安装依赖

用户: tzy
时间: 2024-01-20T03:48:54.011Z
消息: 如何查看是否已经进入了虚拟环境？

用户: tzy
时间: 2024-01-20T03:49:51.091Z
消息: 终端提示符在括号中显示虚拟环境的名字，但是我的Python 解释器路径指向本地解释器路径

用户: tzy
时间: 2024-01-20T03:55:40.791Z
消息: 我在windows上创建的虚拟环境是不是不能在mac上激活使用？

用户: tzy
时间: 2024-01-20T04:36:57.727Z
消息: npm怎么卸载vue-cli

用户: tzy
时间: 2024-01-20T04:39:05.212Z
消息:  ERROR  Error: command failed: yarn 
Error: command failed: yarn 
    at ChildProcess.<anonymous> (/usr/local/lib/node_modules/@vue/cli/lib/util/executeCommand.js:138:16)
    at ChildProcess.emit (node:events:394:28)
    at maybeClose (node:internal/child_process:1067:16)
    at Process.ChildProcess._handle.onexit (node:internal/child_process:301:5)

用户: tzy
时间: 2024-01-20T04:48:16.454Z
消息: 我运行vue create admin的时候出现：error jest-worker@28.1.3: The engine "node" is incompatible with this module. Expected version "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0". Got "16.4.2"
info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.
error Found incompatible module.
 ERROR  Error: command failed: yarn 
Error: command failed: yarn 
    at ChildProcess.<anonymous> (/usr/local/lib/node_modules/@vue/cli/lib/util/executeCommand.js:138:16)
    at ChildProcess.emit (node:events:394:28)
    at maybeClose (node:internal/child_process:1067:16)
    at Process.ChildProcess._handle.onexit (node:internal/child_process:301:5)
如何解决这个问题？

用户: tzy
时间: 2024-01-20T05:54:24.637Z
消息: 使用vue + elementPlus 做一个数据库管理后台，已经通过vue-cli构建了项目基本结构

用户: tzy
时间: 2024-01-20T05:55:08.143Z
消息: 帮我用vue + elementPlus写个管理后台界面的代码吧

用户: tzy
时间: 2024-01-20T06:37:23.069Z
消息: 下面的问题怎么解决：poetry shell
/Users/tzy/Library/Python/3.9/lib/python/site-packages/urllib3/__init__.py:34: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020
  warnings.warn(
Warning: In a future version of Poetry, PyPI will be disabled automatically if at least one custom primary source is configured. In order to avoid a breaking change and make your pyproject.toml forward compatible, add PyPI explicitly via 'poetry source add pypi'. By the way, this has the advantage that you can set the priority of PyPI as with any other source.
The currently activated Python version 3.9.6 is not supported by the project (^3.11).
Trying to find and use a compatible version. 

Poetry was unable to find a compatible version. If you have one, you can explicitly use it via the "env use" command.

用户: tzy
时间: 2024-01-20T06:38:41.284Z
消息: 怎么升级python版本到3.11？

用户: tzy
时间: 2024-01-21T03:22:18.492Z
消息: 已使用poetry的python工程如何用venv代替

用户: tzy
时间: 2024-01-21T03:22:43.135Z
消息: 可问题是我没找到有requirements.txt这个文件

用户: tzy
时间: 2024-01-21T03:24:16.881Z
消息: poetry export -f requirements.txt
/Users/tzy/Library/Python/3.9/lib/python/site-packages/urllib3/__init__.py:34: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020
  warnings.warn(
Warning: In a future version of Poetry, PyPI will be disabled automatically if at least one custom primary source is configured. In order to avoid a breaking change and make your pyproject.toml forward compatible, add PyPI explicitly via 'poetry source add pypi'. By the way, this has the advantage that you can set the priority of PyPI as with any other source.
Warning: poetry-plugin-export will not be installed by default in a future version of Poetry.
In order to avoid a breaking change and make your automation forward-compatible, please install poetry-plugin-export explicitly. See https://python-poetry.org/docs/plugins/#using-plugins for details on how to install a plugin.
To disable this warning run 'poetry config warnings.export false'.
--extra-index-url https://pypi.tuna.tsinghua.edu.cn/simple

aiosqlite==0.17.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:6c49dc6d3405929b1d08eeccc72306d3677503cc5e5e43771efc1e00232e8231 \
    --hash=sha256:f0e6acc24bc4864149267ac82fb46dfb3be4455f99fe21df82609cc6e6baee51
annotated-types==0.5.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:47cdc3490d9ac1506ce92c7aaa76c579dc3509ff11e098fc867e5130ab7be802 \
    --hash=sha256:58da39888f92c276ad970249761ebea80ba544b77acddaa1a4d6cf78287d45fd
anyio==4.0.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:cfdb2b588b9fc25ede96d8db56ed50848b0b649dca3dd1df0b11f683bb9e0b5f \
    --hash=sha256:f7ed51751b2c2add651e5747c891b47e26d2a21be5d32d9311dfe9692f3e5d7a
argon2-cffi-bindings==21.2.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:20ef543a89dee4db46a1a6e206cd015360e5a75822f76df533845c3cbaf72670 \
    --hash=sha256:2c3e3cc67fdb7d82c4718f19b4e7a87123caf8a93fde7e23cf66ac0337d3cb3f \
    --hash=sha256:3b9ef65804859d335dc6b31582cad2c5166f0c3e7975f324d9ffaa34ee7e6583 \
    --hash=sha256:3e385d1c39c520c08b53d63300c3ecc28622f076f4c2b0e6d7e796e9f6502194 \
    --hash=sha256:58ed19212051f49a523abb1dbe954337dc82d947fb6e5a0da60f7c8471a8476c \
    --hash=sha256:5e00316dabdaea0b2dd82d141cc66889ced0cdcbfa599e8b471cf22c620c329a \
    --hash=sha256:603ca0aba86b1349b147cab91ae970c63118a0f30444d4bc80355937c950c082 \
    --hash=sha256:6a22ad9800121b71099d0fb0a65323810a15f2e292f2ba450810a7316e128ee5 \
    --hash=sha256:8cd69c07dd875537a824deec19f978e0f2078fdda07fd5c42ac29668dda5f40f \
    --hash=sha256:93f9bf70084f97245ba10ee36575f0c3f1e7d7724d67d8e5b08e61787c320ed7 \
    --hash=sha256:9524464572e12979364b7d600abf96181d3541da11e23ddf565a32e70bd4dc0d \
    --hash=sha256:b2ef1c30440dbbcba7a5dc3e319408b59676e2e039e2ae11a8775ecf482b192f \
    --hash=sha256:b746dba803a79238e925d9046a63aa26bf86ab2a2fe74ce6b009a1c3f5c8f2ae \
    --hash=sha256:bb89ceffa6c791807d1305ceb77dbfacc5aa499891d2c55661c6459651fc39e3 \
    --hash=sha256:bd46088725ef7f58b5a1ef7ca06647ebaf0eb4baff7d1d0d177c6cc8744abd86 \
    --hash=sha256:ccb949252cb2ab3a08c02024acb77cfb179492d5701c7cbdbfd776124d4d2367 \
    --hash=sha256:d4966ef5848d820776f5f562a7d45fdd70c2f330c961d0d745b784034bd9f48d \
    --hash=sha256:e415e3f62c8d124ee16018e491a009937f8cf7ebf5eb430ffc5de21b900dad93 \
    --hash=sha256:ed2937d286e2ad0cc79a7087d3c272832865f779430e0cc2b4f3718d3159b0cb \
    --hash=sha256:f1152ac548bd5b8bcecfb0b0371f082037e47128653df2e8ba6e914d384f3c3e \
    --hash=sha256:f9f8b450ed0547e3d473fdc8612083fd08dd2120d6ac8f73828df9b7d45bb351
argon2-cffi==23.1.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:879c3e79a2729ce768ebb7d36d4609e3a78a4ca2ec3a9f12286ca057e3d0db08 \
    --hash=sha256:c670642b78ba29641818ab2e68bd4e6a78ba53b7eff7b4c3815ae16abf91c7ea
black==23.9.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:031e8c69f3d3b09e1aa471a926a1eeb0b9071f80b17689a655f7885ac9325a6f \
    --hash=sha256:13a2e4a93bb8ca74a749b6974925c27219bb3df4d42fc45e948a5d9feb5122b7 \
    --hash=sha256:13ef033794029b85dfea8032c9d3b92b42b526f1ff4bf13b2182ce4e917f5100 \
    --hash=sha256:14f04c990259576acd093871e7e9b14918eb28f1866f91968ff5524293f9c573 \
    --hash=sha256:24b6b3ff5c6d9ea08a8888f6977eae858e1f340d7260cf56d70a49823236b62d \
    --hash=sha256:403397c033adbc45c2bd41747da1f7fc7eaa44efbee256b53842470d4ac5a70f \
    --hash=sha256:50254ebfa56aa46a9fdd5d651f9637485068a1adf42270148cd101cdf56e0ad9 \
    --hash=sha256:538efb451cd50f43aba394e9ec7ad55a37598faae3348d723b59ea8e91616300 \
    --hash=sha256:638619a559280de0c2aa4d76f504891c9860bb8fa214267358f0a20f27c12948 \
    --hash=sha256:6a3b50e4b93f43b34a9d3ef00d9b6728b4a722c997c99ab09102fd5efdb88325 \
    --hash=sha256:6ccd59584cc834b6d127628713e4b6b968e5f79572da66284532525a042549f9 \
    --hash=sha256:75a2dc41b183d4872d3a500d2b9c9016e67ed95738a3624f4751a0cb4818fe71 \
    --hash=sha256:7d30ec46de88091e4316b17ae58bbbfc12b2de05e069030f6b747dfc649ad186 \
    --hash=sha256:8431445bf62d2a914b541da7ab3e2b4f3bc052d2ccbf157ebad18ea126efb91f \
    --hash=sha256:8fc1ddcf83f996247505db6b715294eba56ea9372e107fd54963c7553f2b6dfe \
    --hash=sha256:a732b82747235e0542c03bf352c126052c0fbc458d8a239a94701175b17d4855 \
    --hash=sha256:adc3e4442eef57f99b5590b245a328aad19c99552e0bdc7f0b04db6656debd80 \
    --hash=sha256:c46767e8df1b7beefb0899c4a95fb43058fa8500b6db144f4ff3ca38eb2f6393 \
    --hash=sha256:c619f063c2d68f19b2d7270f4cf3192cb81c9ec5bc5ba02df91471d0b88c4c5c \
    --hash=sha256:cf3a4d00e4cdb6734b64bf23cd4341421e8953615cba6b3670453737a72ec204 \
    --hash=sha256:cf99f3de8b3273a8317681d8194ea222f10e0133a24a7548c73ce44ea1679377 \
    --hash=sha256:d6bc09188020c9ac2555a498949401ab35bb6bf76d4e0f8ee251694664df6301
cffi==1.16.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:0c9ef6ff37e974b73c25eecc13952c55bceed9112be2d9d938ded8e856138bcc \
    --hash=sha256:131fd094d1065b19540c3d72594260f118b231090295d8c34e19a7bbcf2e860a \
    --hash=sha256:1b8ebc27c014c59692bb2664c7d13ce7a6e9a629be20e54e7271fa696ff2b417 \
    --hash=sha256:2c56b361916f390cd758a57f2e16233eb4f64bcbeee88a4881ea90fca14dc6ab \
    --hash=sha256:2d92b25dbf6cae33f65005baf472d2c245c050b1ce709cc4588cdcdd5495b520 \
    --hash=sha256:31d13b0f99e0836b7ff893d37af07366ebc90b678b6664c955b54561fc36ef36 \
    --hash=sha256:32c68ef735dbe5857c810328cb2481e24722a59a2003018885514d4c09af9743 \
    --hash=sha256:3686dffb02459559c74dd3d81748269ffb0eb027c39a6fc99502de37d501faa8 \
    --hash=sha256:582215a0e9adbe0e379761260553ba11c58943e4bbe9c36430c4ca6ac74b15ed \
    --hash=sha256:5b50bf3f55561dac5438f8e70bfcdfd74543fd60df5fa5f62d94e5867deca684 \
    --hash=sha256:5bf44d66cdf9e893637896c7faa22298baebcd18d1ddb6d2626a6e39793a1d56 \
    --hash=sha256:6602bc8dc6f3a9e02b6c22c4fc1e47aa50f8f8e6d3f78a5e16ac33ef5fefa324 \
    --hash=sha256:673739cb539f8cdaa07d92d02efa93c9ccf87e345b9a0b556e3ecc666718468d \
    --hash=sha256:68678abf380b42ce21a5f2abde8efee05c114c2fdb2e9eef2efdb0257fba1235 \
    --hash=sha256:68e7c44931cc171c54ccb702482e9fc723192e88d25a0e133edd7aff8fcd1f6e \
    --hash=sha256:6b3d6606d369fc1da4fd8c357d026317fbb9c9b75d36dc16e90e84c26854b088 \
    --hash=sha256:748dcd1e3d3d7cd5443ef03ce8685043294ad6bd7c02a38d1bd367cfd968e000 \
    --hash=sha256:7651c50c8c5ef7bdb41108b7b8c5a83013bfaa8a935590c5d74627c047a583c7 \
    --hash=sha256:7b78010e7b97fef4bee1e896df8a4bbb6712b7f05b7ef630f9d1da00f6444d2e \
    --hash=sha256:7e61e3e4fa664a8588aa25c883eab612a188c725755afff6289454d6362b9673 \
    --hash=sha256:80876338e19c951fdfed6198e70bc88f1c9758b94578d5a7c4c91a87af3cf31c \
    --hash=sha256:8895613bcc094d4a1b2dbe179d88d7fb4a15cee43c052e8885783fac397d91fe \
    --hash=sha256:88e2b3c14bdb32e440be531ade29d3c50a1a59cd4e51b1dd8b0865c54ea5d2e2 \
    --hash=sha256:8f8e709127c6c77446a8c0a8c8bf3c8ee706a06cd44b1e827c3e6a2ee6b8c098 \
    --hash=sha256:9cb4a35b3642fc5c005a6755a5d17c6c8b6bcb6981baf81cea8bfbc8903e8ba8 \
    --hash=sha256:9f90389693731ff1f659e55c7d1640e2ec43ff725cc61b04b2f9c6d8d017df6a \
    --hash=sha256:a09582f178759ee8128d9270cd1344154fd473bb77d94ce0aeb2a93ebf0feaf0 \
    --hash=sha256:a6a14b17d7e17fa0d207ac08642c8820f84f25ce17a442fd15e27ea18d67c59b \
    --hash=sha256:a72e8961a86d19bdb45851d8f1f08b041ea37d2bd8d4fd19903bc3083d80c896 \
    --hash=sha256:abd808f9c129ba2beda4cfc53bde801e5bcf9d6e0f22f095e45327c038bfe68e \
    --hash=sha256:ac0f5edd2360eea2f1daa9e26a41db02dd4b0451b48f7c318e217ee092a213e9 \
    --hash=sha256:b29ebffcf550f9da55bec9e02ad430c992a87e5f512cd63388abb76f1036d8d2 \
    --hash=sha256:b2ca4e77f9f47c55c194982e10f058db063937845bb2b7a86c84a6cfe0aefa8b \
    --hash=sha256:b7be2d771cdba2942e13215c4e340bfd76398e9227ad10402a8767ab1865d2e6 \
    --hash=sha256:b84834d0cf97e7d27dd5b7f3aca7b6e9263c56308ab9dc8aae9784abb774d404 \
    --hash=sha256:b86851a328eedc692acf81fb05444bdf1891747c25af7529e39ddafaf68a4f3f \
    --hash=sha256:bcb3ef43e58665bbda2fb198698fcae6776483e0c4a631aa5647806c25e02cc0 \
    --hash=sha256:c0f31130ebc2d37cdd8e44605fb5fa7ad59049298b3f745c74fa74c62fbfcfc4 \
    --hash=sha256:c6a164aa47843fb1b01e941d385aab7215563bb8816d80ff3a363a9f8448a8dc \
    --hash=sha256:d8a9d3ebe49f084ad71f9269834ceccbf398253c9fac910c4fd7053ff1386936 \
    --hash=sha256:db8e577c19c0fda0beb7e0d4e09e0ba74b1e4c092e0e40bfa12fe05b6f6d75ba \
    --hash=sha256:dc9b18bf40cc75f66f40a7379f6a9513244fe33c0e8aa72e2d56b0196a7ef872 \
    --hash=sha256:e09f3ff613345df5e8c3667da1d918f9149bd623cd9070c983c013792a9a62eb \
    --hash=sha256:e4108df7fe9b707191e55f33efbcb2d81928e10cea45527879a4749cbe472614 \
    --hash=sha256:e6024675e67af929088fda399b2094574609396b1decb609c55fa58b028a32a1 \
    --hash=sha256:e70f54f1796669ef691ca07d046cd81a29cb4deb1e5f942003f401c0c4a2695d \
    --hash=sha256:e715596e683d2ce000574bae5d07bd522c781a822866c20495e52520564f0969 \
    --hash=sha256:e760191dd42581e023a68b758769e2da259b5d52e3103c6060ddc02c9edb8d7b \
    --hash=sha256:ed86a35631f7bfbb28e108dd96773b9d5a6ce4811cf6ea468bb6a359b256b1e4 \
    --hash=sha256:ee07e47c12890ef248766a6e55bd38ebfb2bb8edd4142d56db91b21ea68b7627 \
    --hash=sha256:fa3a0128b152627161ce47201262d3140edb5a5c3da88d73a1b790a959126956 \
    --hash=sha256:fcc8eb6d5902bb1cf6dc4f187ee3ea80a1eba0a89aba40a5cb20a5087d961357
click==8.1.7 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28 \
    --hash=sha256:ca9853ad459e787e2192211578cc907e7594e294c7ccc834310722b41b9ca6de
colorama==0.4.6 ; python_version >= "3.11" and python_version < "4.0" and (sys_platform == "win32" or platform_system == "Windows") \
    --hash=sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44 \
    --hash=sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6
dnspython==2.4.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:57c6fbaaeaaf39c891292012060beb141791735dbb4004798328fc2c467402d8 \
    --hash=sha256:8dcfae8c7460a2f84b4072e26f1c9f4101ca20c071649cb7c34e8b6a93d58984
email-validator==2.0.0.post2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1ff6e86044200c56ae23595695c54e9614f4a9551e0e393614f764860b3d7900 \
    --hash=sha256:2466ba57cda361fb7309fd3d5a225723c788ca4bbad32a0ebd5373b99730285c
fastapi==0.100.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:522700d7a469e4a973d92321ab93312448fbe20fca9c8da97effc7e7bc56df23 \
    --hash=sha256:ec6dd52bfc4eff3063cfcd0713b43c87640fefb2687bbbe3d8a08d94049cdf32
h11==0.14.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:8f19fbbe99e72420ff35c00b27a34cb9937e902a8b810e2c88300c6f0a3b699d \
    --hash=sha256:e3fe4ac4b851c468cc8363d500db52c2ead036020723024a109d37346efaa761
idna==3.4 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:814f528e8dead7d329833b91c5faa87d60bf71824cd12a7530b5526063d02cb4 \
    --hash=sha256:90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2
iso8601==1.1.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:32811e7b81deee2063ea6d2e94f8819a86d1f3811e49d23623a41fa832bef03f \
    --hash=sha256:8400e90141bf792bce2634df533dc57e3bee19ea120a87bebcd3da89a58ad73f
isort==5.12.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:8bef7dde241278824a6d83f44a544709b065191b95b6e50894bdc722fcba0504 \
    --hash=sha256:f84c2818376e66cf843d497486ea8fed8700b340f308f076c6fb1229dff318b6
loguru==0.7.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:003d71e3d3ed35f0f8984898359d65b79e5b21943f78af86aa5491210429b8eb \
    --hash=sha256:e671a53522515f34fd406340ee968cb9ecafbc4b36c679da03c18fd8d0bd51ac
mypy-extensions==1.0.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d \
    --hash=sha256:75dbf8955dc00442a438fc4d0666508a9a97b6bd41aa2f0ffe9d2f2725af0782
packaging==23.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:994793af429502c4ea2ebf6bf664629d07c1a9fe974af92966e4b8d2df7edc61 \
    --hash=sha256:a392980d2b6cffa644431898be54b0045151319d1e7ec34f0cfed48767dd334f
passlib==1.7.4 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:aa6bca462b8d8bda89c70b382f0c298a20b5560af6cbfa2dce410c0a2fb669f1 \
    --hash=sha256:defd50f72b65c5402ab2c573830a6978e5f202ad0d984793c8dde2c4152ebe04
pathspec==0.11.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1d6ed233af05e679efb96b1851550ea95bbb64b7c490b0f5aa52996c11e92a20 \
    --hash=sha256:e0d8d0ac2f12da61956eb2306b69f9469b42f4deb0f3cb6ed47b9cce9996ced3
platformdirs==3.10.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:b45696dab2d7cc691a3226759c0d3b00c47c8b6e293d96f6436f733303f77f6d \
    --hash=sha256:d7c24979f292f916dc9cbf8648319032f551ea8c49a4c9bf2fb556a02070ec1d
pycparser==2.21 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9 \
    --hash=sha256:e644fdec12f7872f86c58ff790da456218b10f863970249516d60a5eaca77206
pydantic-core==2.6.3 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:002d0ea50e17ed982c2d65b480bd975fc41086a5a2f9c924ef8fc54419d1dea3 \
    --hash=sha256:02e1c385095efbd997311d85c6021d32369675c09bcbfff3b69d84e59dc103f6 \
    --hash=sha256:046af9cfb5384f3684eeb3f58a48698ddab8dd870b4b3f67f825353a14441418 \
    --hash=sha256:04fe5c0a43dec39aedba0ec9579001061d4653a9b53a1366b113aca4a3c05ca7 \
    --hash=sha256:07a1aec07333bf5adebd8264047d3dc518563d92aca6f2f5b36f505132399efc \
    --hash=sha256:1480fa4682e8202b560dcdc9eeec1005f62a15742b813c88cdc01d44e85308e5 \
    --hash=sha256:1508f37ba9e3ddc0189e6ff4e2228bd2d3c3a4641cbe8c07177162f76ed696c7 \
    --hash=sha256:171a4718860790f66d6c2eda1d95dd1edf64f864d2e9f9115840840cf5b5713f \
    --hash=sha256:19e20f8baedd7d987bd3f8005c146e6bcbda7cdeefc36fad50c66adb2dd2da48 \
    --hash=sha256:1a0ddaa723c48af27d19f27f1c73bdc615c73686d763388c8683fe34ae777bad \
    --hash=sha256:1aa712ba150d5105814e53cb141412217146fedc22621e9acff9236d77d2a5ef \
    --hash=sha256:1ac1750df1b4339b543531ce793b8fd5c16660a95d13aecaab26b44ce11775e9 \
    --hash=sha256:1c721bfc575d57305dd922e6a40a8fe3f762905851d694245807a351ad255c58 \
    --hash=sha256:1ce8c84051fa292a5dc54018a40e2a1926fd17980a9422c973e3ebea017aa8da \
    --hash=sha256:1fa1f6312fb84e8c281f32b39affe81984ccd484da6e9d65b3d18c202c666149 \
    --hash=sha256:22134a4453bd59b7d1e895c455fe277af9d9d9fbbcb9dc3f4a97b8693e7e2c9b \
    --hash=sha256:23470a23614c701b37252618e7851e595060a96a23016f9a084f3f92f5ed5881 \
    --hash=sha256:240a015102a0c0cc8114f1cba6444499a8a4d0333e178bc504a5c2196defd456 \
    --hash=sha256:252851b38bad3bfda47b104ffd077d4f9604a10cb06fe09d020016a25107bf98 \
    --hash=sha256:2a20c533cb80466c1d42a43a4521669ccad7cf2967830ac62c2c2f9cece63e7e \
    --hash=sha256:2dd50d6a1aef0426a1d0199190c6c43ec89812b1f409e7fe44cb0fbf6dfa733c \
    --hash=sha256:340e96c08de1069f3d022a85c2a8c63529fd88709468373b418f4cf2c949fb0e \
    --hash=sha256:3796a6152c545339d3b1652183e786df648ecdf7c4f9347e1d30e6750907f5bb \
    --hash=sha256:37a822f630712817b6ecc09ccc378192ef5ff12e2c9bae97eb5968a6cdf3b862 \
    --hash=sha256:3a750a83b2728299ca12e003d73d1264ad0440f60f4fc9cee54acc489249b728 \
    --hash=sha256:3c8945a105f1589ce8a693753b908815e0748f6279959a4530f6742e1994dcb6 \
    --hash=sha256:3ccc13afee44b9006a73d2046068d4df96dc5b333bf3509d9a06d1b42db6d8bf \
    --hash=sha256:3f90e5e3afb11268628c89f378f7a1ea3f2fe502a28af4192e30a6cdea1e7d5e \
    --hash=sha256:4292ca56751aebbe63a84bbfc3b5717abb09b14d4b4442cc43fd7c49a1529efd \
    --hash=sha256:430ddd965ffd068dd70ef4e4d74f2c489c3a313adc28e829dd7262cc0d2dd1e8 \
    --hash=sha256:439a0de139556745ae53f9cc9668c6c2053444af940d3ef3ecad95b079bc9987 \
    --hash=sha256:44b4f937b992394a2e81a5c5ce716f3dcc1237281e81b80c748b2da6dd5cf29a \
    --hash=sha256:48c1ed8b02ffea4d5c9c220eda27af02b8149fe58526359b3c07eb391cb353a2 \
    --hash=sha256:4ef724a059396751aef71e847178d66ad7fc3fc969a1a40c29f5aac1aa5f8784 \
    --hash=sha256:50555ba3cb58f9861b7a48c493636b996a617db1a72c18da4d7f16d7b1b9952b \
    --hash=sha256:522a9c4a4d1924facce7270c84b5134c5cabcb01513213662a2e89cf28c1d309 \
    --hash=sha256:5493a7027bfc6b108e17c3383959485087d5942e87eb62bbac69829eae9bc1f7 \
    --hash=sha256:56ea80269077003eaa59723bac1d8bacd2cd15ae30456f2890811efc1e3d4413 \
    --hash=sha256:5a2a3c9ef904dcdadb550eedf3291ec3f229431b0084666e2c2aa8ff99a103a2 \
    --hash=sha256:5cfde4fab34dd1e3a3f7f3db38182ab6c95e4ea91cf322242ee0be5c2f7e3d2f \
    --hash=sha256:5e4a2cf8c4543f37f5dc881de6c190de08096c53986381daebb56a355be5dfe6 \
    --hash=sha256:5e9c068f36b9f396399d43bfb6defd4cc99c36215f6ff33ac8b9c14ba15bdf6b \
    --hash=sha256:5ed7ceca6aba5331ece96c0e328cd52f0dcf942b8895a1ed2642de50800b79d3 \
    --hash=sha256:5fa159b902d22b283b680ef52b532b29554ea2a7fc39bf354064751369e9dbd7 \
    --hash=sha256:615a31b1629e12445c0e9fc8339b41aaa6cc60bd53bf802d5fe3d2c0cda2ae8d \
    --hash=sha256:621afe25cc2b3c4ba05fff53525156d5100eb35c6e5a7cf31d66cc9e1963e378 \
    --hash=sha256:6656a0ae383d8cd7cc94e91de4e526407b3726049ce8d7939049cbfa426518c8 \
    --hash=sha256:672174480a85386dd2e681cadd7d951471ad0bb028ed744c895f11f9d51b9ebe \
    --hash=sha256:692b4ff5c4e828a38716cfa92667661a39886e71136c97b7dac26edef18767f7 \
    --hash=sha256:6bcc1ad776fffe25ea5c187a028991c031a00ff92d012ca1cc4714087e575973 \
    --hash=sha256:6bf7d610ac8f0065a286002a23bcce241ea8248c71988bda538edcc90e0c39ad \
    --hash=sha256:75c0ebbebae71ed1e385f7dfd9b74c1cff09fed24a6df43d326dd7f12339ec34 \
    --hash=sha256:788be9844a6e5c4612b74512a76b2153f1877cd845410d756841f6c3420230eb \
    --hash=sha256:7dc2ce039c7290b4ef64334ec7e6ca6494de6eecc81e21cb4f73b9b39991408c \
    --hash=sha256:813aab5bfb19c98ae370952b6f7190f1e28e565909bfc219a0909db168783465 \
    --hash=sha256:8421cf496e746cf8d6b677502ed9a0d1e4e956586cd8b221e1312e0841c002d5 \
    --hash=sha256:84e87c16f582f5c753b7f39a71bd6647255512191be2d2dbf49458c4ef024588 \
    --hash=sha256:84f8bb34fe76c68c9d96b77c60cef093f5e660ef8e43a6cbfcd991017d375950 \
    --hash=sha256:85cc4d105747d2aa3c5cf3e37dac50141bff779545ba59a095f4a96b0a460e70 \
    --hash=sha256:883daa467865e5766931e07eb20f3e8152324f0adf52658f4d302242c12e2c32 \
    --hash=sha256:8b2b1bfed698fa410ab81982f681f5b1996d3d994ae8073286515ac4d165c2e7 \
    --hash=sha256:8ecbac050856eb6c3046dea655b39216597e373aa8e50e134c0e202f9c47efec \
    --hash=sha256:930bfe73e665ebce3f0da2c6d64455098aaa67e1a00323c74dc752627879fc67 \
    --hash=sha256:9616567800bdc83ce136e5847d41008a1d602213d024207b0ff6cab6753fe645 \
    --hash=sha256:9680dd23055dd874173a3a63a44e7f5a13885a4cfd7e84814be71be24fba83db \
    --hash=sha256:99faba727727b2e59129c59542284efebbddade4f0ae6a29c8b8d3e1f437beb7 \
    --hash=sha256:9a718d56c4d55efcfc63f680f207c9f19c8376e5a8a67773535e6f7e80e93170 \
    --hash=sha256:9b33bf9658cb29ac1a517c11e865112316d09687d767d7a0e4a63d5c640d1b17 \
    --hash=sha256:9e8b374ef41ad5c461efb7a140ce4730661aadf85958b5c6a3e9cf4e040ff4bb \
    --hash=sha256:9e9b65a55bbabda7fccd3500192a79f6e474d8d36e78d1685496aad5f9dbd92c \
    --hash=sha256:a0b7486d85293f7f0bbc39b34e1d8aa26210b450bbd3d245ec3d732864009819 \
    --hash=sha256:a53e3195f134bde03620d87a7e2b2f2046e0e5a8195e66d0f244d6d5b2f6d31b \
    --hash=sha256:a87c54e72aa2ef30189dc74427421e074ab4561cf2bf314589f6af5b37f45e6d \
    --hash=sha256:a892b5b1871b301ce20d40b037ffbe33d1407a39639c2b05356acfef5536d26a \
    --hash=sha256:a8acc9dedd304da161eb071cc7ff1326aa5b66aadec9622b2574ad3ffe225525 \
    --hash=sha256:aaafc776e5edc72b3cad1ccedb5fd869cc5c9a591f1213aa9eba31a781be9ac1 \
    --hash=sha256:acafc4368b289a9f291e204d2c4c75908557d4f36bd3ae937914d4529bf62a76 \
    --hash=sha256:b0a5d7edb76c1c57b95df719af703e796fc8e796447a1da939f97bfa8a918d60 \
    --hash=sha256:b25afe9d5c4f60dcbbe2b277a79be114e2e65a16598db8abee2a2dcde24f162b \
    --hash=sha256:b44c42edc07a50a081672e25dfe6022554b47f91e793066a7b601ca290f71e42 \
    --hash=sha256:b594b64e8568cf09ee5c9501ede37066b9fc41d83d58f55b9952e32141256acd \
    --hash=sha256:b962700962f6e7a6bd77e5f37320cabac24b4c0f76afeac05e9f93cf0c620014 \
    --hash=sha256:bb128c30cf1df0ab78166ded1ecf876620fb9aac84d2413e8ea1594b588c735d \
    --hash=sha256:bf9d42a71a4d7a7c1f14f629e5c30eac451a6fc81827d2beefd57d014c006c4a \
    --hash=sha256:c6595b0d8c8711e8e1dc389d52648b923b809f68ac1c6f0baa525c6440aa0daa \
    --hash=sha256:c8c6660089a25d45333cb9db56bb9e347241a6d7509838dbbd1931d0e19dbc7f \
    --hash=sha256:c9d469204abcca28926cbc28ce98f28e50e488767b084fb3fbdf21af11d3de26 \
    --hash=sha256:d38bbcef58220f9c81e42c255ef0bf99735d8f11edef69ab0b499da77105158a \
    --hash=sha256:d4eb77df2964b64ba190eee00b2312a1fd7a862af8918ec70fc2d6308f76ac64 \
    --hash=sha256:d63b7545d489422d417a0cae6f9898618669608750fc5e62156957e609e728a5 \
    --hash=sha256:d7050899026e708fb185e174c63ebc2c4ee7a0c17b0a96ebc50e1f76a231c057 \
    --hash=sha256:d79f1f2f7ebdb9b741296b69049ff44aedd95976bfee38eb4848820628a99b50 \
    --hash=sha256:d85463560c67fc65cd86153a4975d0b720b6d7725cf7ee0b2d291288433fc21b \
    --hash=sha256:d9140ded382a5b04a1c030b593ed9bf3088243a0a8b7fa9f071a5736498c5483 \
    --hash=sha256:d9b4916b21931b08096efed090327f8fe78e09ae8f5ad44e07f5c72a7eedb51b \
    --hash=sha256:df14f6332834444b4a37685810216cc8fe1fe91f447332cd56294c984ecbff1c \
    --hash=sha256:e49ce7dc9f925e1fb010fc3d555250139df61fa6e5a0a95ce356329602c11ea9 \
    --hash=sha256:e61eae9b31799c32c5f9b7be906be3380e699e74b2db26c227c50a5fc7988698 \
    --hash=sha256:ea053cefa008fda40f92aab937fb9f183cf8752e41dbc7bc68917884454c6362 \
    --hash=sha256:f06e21ad0b504658a3a9edd3d8530e8cea5723f6ea5d280e8db8efc625b47e49 \
    --hash=sha256:f14546403c2a1d11a130b537dda28f07eb6c1805a43dae4617448074fd49c282 \
    --hash=sha256:f1a5d8f18877474c80b7711d870db0eeef9442691fcdb00adabfc97e183ee0b0 \
    --hash=sha256:f2969e8f72c6236c51f91fbb79c33821d12a811e2a94b7aa59c65f8dbdfad34a \
    --hash=sha256:f468d520f47807d1eb5d27648393519655eadc578d5dd862d06873cce04c4d1b \
    --hash=sha256:f70dc00a91311a1aea124e5f64569ea44c011b58433981313202c46bccbec0e1 \
    --hash=sha256:f93255b3e4d64785554e544c1c76cd32f4a354fa79e2eeca5d16ac2e7fdd57aa
pydantic-settings==2.0.3 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:962dc3672495aad6ae96a4390fac7e593591e144625e5112d359f8f67fb75945 \
    --hash=sha256:ddd907b066622bd67603b75e2ff791875540dc485b7307c4fffc015719da8625
pydantic==2.3.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1607cc106602284cd4a00882986570472f193fde9cb1259bceeaedb26aa79a6d \
    --hash=sha256:45b5e446c6dfaad9444819a293b921a40e1db1aa61ea08aede0522529ce90e81
pyjwt==2.8.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:57e28d156e3d5c10088e0c68abb90bfac3df82b40a71bd0daa20c65ccd5c23de \
    --hash=sha256:59127c392cc44c2da5bb3192169a91f429924e17aff6534d70fdc02ab3e04320
pypika-tortoise==0.1.6 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:2d68bbb7e377673743cff42aa1059f3a80228d411fbcae591e4465e173109fd8 \
    --hash=sha256:d802868f479a708e3263724c7b5719a26ad79399b2a70cea065f4a4cadbebf36
python-dotenv==1.0.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:a8df96034aae6d2d50a4ebe8216326c61c3eb64836776504fcca410e5937a3ba \
    --hash=sha256:f5971a9226b701070a4bf2c38c89e5a3f0d64de8debda981d1db98583009122a
pytz==2023.3.post1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:7b4fddbeb94a1eba4b557da24f19fdf9db575192544270a9101d8509f9f43d7b \
    --hash=sha256:ce42d816b81b68506614c11e8937d3aa9e41007ceb50bfdcb0749b921bf646c7
ruff==0.0.281 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:0162b149a94f6007768820bcdf4ccb7e90a21655aac829ace49f4682d0565fdb \
    --hash=sha256:24d0defeb2c6a1b16a4230840d1138e08bc4ef2318496fa6ff7ddbf3a443626f \
    --hash=sha256:29a22b7a6433ce0b4e601897e8a5dd58a75c75c01afee9b8922ebbdd1fe51e51 \
    --hash=sha256:2ccb875a4000bcba6cc61cb9d3cd5969d6b0921b5234f0ef99ad75f74e8935ef \
    --hash=sha256:418fbddfd3dba4d7b11e4e016eacc40d321ff0b7d3637c7ba9ad3ee0474c9a35 \
    --hash=sha256:42a92a62fc841f7444821444553fd6e1e700bb55348f24e8ec39afdd4e3d0312 \
    --hash=sha256:54bab7128167057ee5987bbd9f925fbf105071068de9d8474ca7c38f684b8463 \
    --hash=sha256:6d34cae6ef6c6b6fd6d4f09271fbf635db49e6b788da1b2e1dea11a29f1c2a11 \
    --hash=sha256:70f921438bf09f04c0547cf64c137c87ef33cbec2b64be12b8caa87df261a016 \
    --hash=sha256:7b781f6a7ed35196e6565ed32f57d07b852b0dcd7158c6c7669c8b5d0f8cf97a \
    --hash=sha256:7f5b8ccaabad61e2d50494df820b7bafd94eac13f10d2d8b831994c1618801a9 \
    --hash=sha256:ae0b836c03a7010527bb56384a4e3718e0958e32bea64459879aacdcb65c4945 \
    --hash=sha256:bab2cdfa78754315cccc2b4d46ad6181aabb29e89747a3b135a4b85e11baa025 \
    --hash=sha256:c086bf3968d5cb2b4f31a586fc73bc42cb688c32f4c992ff161d4ce19f551cf2 \
    --hash=sha256:cbf279fd9c2ca674896656df2d82831010afd336a6703a060fe08d6f2358e47b \
    --hash=sha256:dd3c94260a148e955fb46f41d4bcecd857c75794e9f06ebfa7f9be65cfed9621 \
    --hash=sha256:f3495175e6d85a01d3da409a079461a5a3c15b70237cc82550ad8c1f091002c8
sniffio==1.3.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:e60305c5e5d314f5389259b7f22aaa33d8f7dee49763119234af3755c55b9101 \
    --hash=sha256:eecefdce1e5bbfb7ad2eeaabf7c1eeb404d7757c379bd1f7e5cce9d8bf425384
starlette==0.27.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:6a6b0d042acb8d469a01eba54e9cda6cbd24ac602c4cd016723117d6a7e73b75 \
    --hash=sha256:918416370e846586541235ccd38a474c08b80443ed31c578a418e2209b3eef91
tortoise-orm==0.19.3 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:9e368820c70a0866ef9c521d43aa5503485bd7a20a561edc0933b7b0f7036fbc \
    --hash=sha256:ca574bca5191f55608f9013314b1f5d1c6ffd4165a1fcc2f60f6c902f529b3b6
typing-extensions==4.7.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:440d5dd3af93b060174bf433bccd69b0babc3b15b1a8dca43789fd7f61514b36 \
    --hash=sha256:b75ddc264f0ba5615db7ba217daeb99701ad295353c45f9e95963337ceeeffb2
uvicorn==0.23.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1f9be6558f01239d4fdf22ef8126c39cb1ad0addf76c40e760549d2c2f43ab53 \
    --hash=sha256:4d3cc12d7727ba72b64d12d3cc7743124074c0a69f7b201512fc50c3e3f1569a
win32-setctime==1.1.0 ; python_version >= "3.11" and python_version < "4.0" and sys_platform == "win32" \
    --hash=sha256:15cf5750465118d6929ae4de4eb46e8edae9a5634350c01ba582df868e932cb2 \
    --hash=sha256:231db239e959c2fe7eb1d7dc129f11172354f98361c4fa2d6d2d7e278baa8aad

用户: tzy
时间: 2024-01-21T03:24:36.886Z
消息: 但是我在导出的时候出现下面的情况，怎么解决？
poetry export -f requirements.txt
/Users/tzy/Library/Python/3.9/lib/python/site-packages/urllib3/__init__.py:34: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020
  warnings.warn(
Warning: In a future version of Poetry, PyPI will be disabled automatically if at least one custom primary source is configured. In order to avoid a breaking change and make your pyproject.toml forward compatible, add PyPI explicitly via 'poetry source add pypi'. By the way, this has the advantage that you can set the priority of PyPI as with any other source.
Warning: poetry-plugin-export will not be installed by default in a future version of Poetry.
In order to avoid a breaking change and make your automation forward-compatible, please install poetry-plugin-export explicitly. See https://python-poetry.org/docs/plugins/#using-plugins for details on how to install a plugin.
To disable this warning run 'poetry config warnings.export false'.
--extra-index-url https://pypi.tuna.tsinghua.edu.cn/simple

aiosqlite==0.17.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:6c49dc6d3405929b1d08eeccc72306d3677503cc5e5e43771efc1e00232e8231 \
    --hash=sha256:f0e6acc24bc4864149267ac82fb46dfb3be4455f99fe21df82609cc6e6baee51
annotated-types==0.5.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:47cdc3490d9ac1506ce92c7aaa76c579dc3509ff11e098fc867e5130ab7be802 \
    --hash=sha256:58da39888f92c276ad970249761ebea80ba544b77acddaa1a4d6cf78287d45fd
anyio==4.0.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:cfdb2b588b9fc25ede96d8db56ed50848b0b649dca3dd1df0b11f683bb9e0b5f \
    --hash=sha256:f7ed51751b2c2add651e5747c891b47e26d2a21be5d32d9311dfe9692f3e5d7a
argon2-cffi-bindings==21.2.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:20ef543a89dee4db46a1a6e206cd015360e5a75822f76df533845c3cbaf72670 \
    --hash=sha256:2c3e3cc67fdb7d82c4718f19b4e7a87123caf8a93fde7e23cf66ac0337d3cb3f \
    --hash=sha256:3b9ef65804859d335dc6b31582cad2c5166f0c3e7975f324d9ffaa34ee7e6583 \
    --hash=sha256:3e385d1c39c520c08b53d63300c3ecc28622f076f4c2b0e6d7e796e9f6502194 \
    --hash=sha256:58ed19212051f49a523abb1dbe954337dc82d947fb6e5a0da60f7c8471a8476c \
    --hash=sha256:5e00316dabdaea0b2dd82d141cc66889ced0cdcbfa599e8b471cf22c620c329a \
    --hash=sha256:603ca0aba86b1349b147cab91ae970c63118a0f30444d4bc80355937c950c082 \
    --hash=sha256:6a22ad9800121b71099d0fb0a65323810a15f2e292f2ba450810a7316e128ee5 \
    --hash=sha256:8cd69c07dd875537a824deec19f978e0f2078fdda07fd5c42ac29668dda5f40f \
    --hash=sha256:93f9bf70084f97245ba10ee36575f0c3f1e7d7724d67d8e5b08e61787c320ed7 \
    --hash=sha256:9524464572e12979364b7d600abf96181d3541da11e23ddf565a32e70bd4dc0d \
    --hash=sha256:b2ef1c30440dbbcba7a5dc3e319408b59676e2e039e2ae11a8775ecf482b192f \
    --hash=sha256:b746dba803a79238e925d9046a63aa26bf86ab2a2fe74ce6b009a1c3f5c8f2ae \
    --hash=sha256:bb89ceffa6c791807d1305ceb77dbfacc5aa499891d2c55661c6459651fc39e3 \
    --hash=sha256:bd46088725ef7f58b5a1ef7ca06647ebaf0eb4baff7d1d0d177c6cc8744abd86 \
    --hash=sha256:ccb949252cb2ab3a08c02024acb77cfb179492d5701c7cbdbfd776124d4d2367 \
    --hash=sha256:d4966ef5848d820776f5f562a7d45fdd70c2f330c961d0d745b784034bd9f48d \
    --hash=sha256:e415e3f62c8d124ee16018e491a009937f8cf7ebf5eb430ffc5de21b900dad93 \
    --hash=sha256:ed2937d286e2ad0cc79a7087d3c272832865f779430e0cc2b4f3718d3159b0cb \
    --hash=sha256:f1152ac548bd5b8bcecfb0b0371f082037e47128653df2e8ba6e914d384f3c3e \
    --hash=sha256:f9f8b450ed0547e3d473fdc8612083fd08dd2120d6ac8f73828df9b7d45bb351
argon2-cffi==23.1.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:879c3e79a2729ce768ebb7d36d4609e3a78a4ca2ec3a9f12286ca057e3d0db08 \
    --hash=sha256:c670642b78ba29641818ab2e68bd4e6a78ba53b7eff7b4c3815ae16abf91c7ea
black==23.9.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:031e8c69f3d3b09e1aa471a926a1eeb0b9071f80b17689a655f7885ac9325a6f \
    --hash=sha256:13a2e4a93bb8ca74a749b6974925c27219bb3df4d42fc45e948a5d9feb5122b7 \
    --hash=sha256:13ef033794029b85dfea8032c9d3b92b42b526f1ff4bf13b2182ce4e917f5100 \
    --hash=sha256:14f04c990259576acd093871e7e9b14918eb28f1866f91968ff5524293f9c573 \
    --hash=sha256:24b6b3ff5c6d9ea08a8888f6977eae858e1f340d7260cf56d70a49823236b62d \
    --hash=sha256:403397c033adbc45c2bd41747da1f7fc7eaa44efbee256b53842470d4ac5a70f \
    --hash=sha256:50254ebfa56aa46a9fdd5d651f9637485068a1adf42270148cd101cdf56e0ad9 \
    --hash=sha256:538efb451cd50f43aba394e9ec7ad55a37598faae3348d723b59ea8e91616300 \
    --hash=sha256:638619a559280de0c2aa4d76f504891c9860bb8fa214267358f0a20f27c12948 \
    --hash=sha256:6a3b50e4b93f43b34a9d3ef00d9b6728b4a722c997c99ab09102fd5efdb88325 \
    --hash=sha256:6ccd59584cc834b6d127628713e4b6b968e5f79572da66284532525a042549f9 \
    --hash=sha256:75a2dc41b183d4872d3a500d2b9c9016e67ed95738a3624f4751a0cb4818fe71 \
    --hash=sha256:7d30ec46de88091e4316b17ae58bbbfc12b2de05e069030f6b747dfc649ad186 \
    --hash=sha256:8431445bf62d2a914b541da7ab3e2b4f3bc052d2ccbf157ebad18ea126efb91f \
    --hash=sha256:8fc1ddcf83f996247505db6b715294eba56ea9372e107fd54963c7553f2b6dfe \
    --hash=sha256:a732b82747235e0542c03bf352c126052c0fbc458d8a239a94701175b17d4855 \
    --hash=sha256:adc3e4442eef57f99b5590b245a328aad19c99552e0bdc7f0b04db6656debd80 \
    --hash=sha256:c46767e8df1b7beefb0899c4a95fb43058fa8500b6db144f4ff3ca38eb2f6393 \
    --hash=sha256:c619f063c2d68f19b2d7270f4cf3192cb81c9ec5bc5ba02df91471d0b88c4c5c \
    --hash=sha256:cf3a4d00e4cdb6734b64bf23cd4341421e8953615cba6b3670453737a72ec204 \
    --hash=sha256:cf99f3de8b3273a8317681d8194ea222f10e0133a24a7548c73ce44ea1679377 \
    --hash=sha256:d6bc09188020c9ac2555a498949401ab35bb6bf76d4e0f8ee251694664df6301
cffi==1.16.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:0c9ef6ff37e974b73c25eecc13952c55bceed9112be2d9d938ded8e856138bcc \
    --hash=sha256:131fd094d1065b19540c3d72594260f118b231090295d8c34e19a7bbcf2e860a \
    --hash=sha256:1b8ebc27c014c59692bb2664c7d13ce7a6e9a629be20e54e7271fa696ff2b417 \
    --hash=sha256:2c56b361916f390cd758a57f2e16233eb4f64bcbeee88a4881ea90fca14dc6ab \
    --hash=sha256:2d92b25dbf6cae33f65005baf472d2c245c050b1ce709cc4588cdcdd5495b520 \
    --hash=sha256:31d13b0f99e0836b7ff893d37af07366ebc90b678b6664c955b54561fc36ef36 \
    --hash=sha256:32c68ef735dbe5857c810328cb2481e24722a59a2003018885514d4c09af9743 \
    --hash=sha256:3686dffb02459559c74dd3d81748269ffb0eb027c39a6fc99502de37d501faa8 \
    --hash=sha256:582215a0e9adbe0e379761260553ba11c58943e4bbe9c36430c4ca6ac74b15ed \
    --hash=sha256:5b50bf3f55561dac5438f8e70bfcdfd74543fd60df5fa5f62d94e5867deca684 \
    --hash=sha256:5bf44d66cdf9e893637896c7faa22298baebcd18d1ddb6d2626a6e39793a1d56 \
    --hash=sha256:6602bc8dc6f3a9e02b6c22c4fc1e47aa50f8f8e6d3f78a5e16ac33ef5fefa324 \
    --hash=sha256:673739cb539f8cdaa07d92d02efa93c9ccf87e345b9a0b556e3ecc666718468d \
    --hash=sha256:68678abf380b42ce21a5f2abde8efee05c114c2fdb2e9eef2efdb0257fba1235 \
    --hash=sha256:68e7c44931cc171c54ccb702482e9fc723192e88d25a0e133edd7aff8fcd1f6e \
    --hash=sha256:6b3d6606d369fc1da4fd8c357d026317fbb9c9b75d36dc16e90e84c26854b088 \
    --hash=sha256:748dcd1e3d3d7cd5443ef03ce8685043294ad6bd7c02a38d1bd367cfd968e000 \
    --hash=sha256:7651c50c8c5ef7bdb41108b7b8c5a83013bfaa8a935590c5d74627c047a583c7 \
    --hash=sha256:7b78010e7b97fef4bee1e896df8a4bbb6712b7f05b7ef630f9d1da00f6444d2e \
    --hash=sha256:7e61e3e4fa664a8588aa25c883eab612a188c725755afff6289454d6362b9673 \
    --hash=sha256:80876338e19c951fdfed6198e70bc88f1c9758b94578d5a7c4c91a87af3cf31c \
    --hash=sha256:8895613bcc094d4a1b2dbe179d88d7fb4a15cee43c052e8885783fac397d91fe \
    --hash=sha256:88e2b3c14bdb32e440be531ade29d3c50a1a59cd4e51b1dd8b0865c54ea5d2e2 \
    --hash=sha256:8f8e709127c6c77446a8c0a8c8bf3c8ee706a06cd44b1e827c3e6a2ee6b8c098 \
    --hash=sha256:9cb4a35b3642fc5c005a6755a5d17c6c8b6bcb6981baf81cea8bfbc8903e8ba8 \
    --hash=sha256:9f90389693731ff1f659e55c7d1640e2ec43ff725cc61b04b2f9c6d8d017df6a \
    --hash=sha256:a09582f178759ee8128d9270cd1344154fd473bb77d94ce0aeb2a93ebf0feaf0 \
    --hash=sha256:a6a14b17d7e17fa0d207ac08642c8820f84f25ce17a442fd15e27ea18d67c59b \
    --hash=sha256:a72e8961a86d19bdb45851d8f1f08b041ea37d2bd8d4fd19903bc3083d80c896 \
    --hash=sha256:abd808f9c129ba2beda4cfc53bde801e5bcf9d6e0f22f095e45327c038bfe68e \
    --hash=sha256:ac0f5edd2360eea2f1daa9e26a41db02dd4b0451b48f7c318e217ee092a213e9 \
    --hash=sha256:b29ebffcf550f9da55bec9e02ad430c992a87e5f512cd63388abb76f1036d8d2 \
    --hash=sha256:b2ca4e77f9f47c55c194982e10f058db063937845bb2b7a86c84a6cfe0aefa8b \
    --hash=sha256:b7be2d771cdba2942e13215c4e340bfd76398e9227ad10402a8767ab1865d2e6 \
    --hash=sha256:b84834d0cf97e7d27dd5b7f3aca7b6e9263c56308ab9dc8aae9784abb774d404 \
    --hash=sha256:b86851a328eedc692acf81fb05444bdf1891747c25af7529e39ddafaf68a4f3f \
    --hash=sha256:bcb3ef43e58665bbda2fb198698fcae6776483e0c4a631aa5647806c25e02cc0 \
    --hash=sha256:c0f31130ebc2d37cdd8e44605fb5fa7ad59049298b3f745c74fa74c62fbfcfc4 \
    --hash=sha256:c6a164aa47843fb1b01e941d385aab7215563bb8816d80ff3a363a9f8448a8dc \
    --hash=sha256:d8a9d3ebe49f084ad71f9269834ceccbf398253c9fac910c4fd7053ff1386936 \
    --hash=sha256:db8e577c19c0fda0beb7e0d4e09e0ba74b1e4c092e0e40bfa12fe05b6f6d75ba \
    --hash=sha256:dc9b18bf40cc75f66f40a7379f6a9513244fe33c0e8aa72e2d56b0196a7ef872 \
    --hash=sha256:e09f3ff613345df5e8c3667da1d918f9149bd623cd9070c983c013792a9a62eb \
    --hash=sha256:e4108df7fe9b707191e55f33efbcb2d81928e10cea45527879a4749cbe472614 \
    --hash=sha256:e6024675e67af929088fda399b2094574609396b1decb609c55fa58b028a32a1 \
    --hash=sha256:e70f54f1796669ef691ca07d046cd81a29cb4deb1e5f942003f401c0c4a2695d \
    --hash=sha256:e715596e683d2ce000574bae5d07bd522c781a822866c20495e52520564f0969 \
    --hash=sha256:e760191dd42581e023a68b758769e2da259b5d52e3103c6060ddc02c9edb8d7b \
    --hash=sha256:ed86a35631f7bfbb28e108dd96773b9d5a6ce4811cf6ea468bb6a359b256b1e4 \
    --hash=sha256:ee07e47c12890ef248766a6e55bd38ebfb2bb8edd4142d56db91b21ea68b7627 \
    --hash=sha256:fa3a0128b152627161ce47201262d3140edb5a5c3da88d73a1b790a959126956 \
    --hash=sha256:fcc8eb6d5902bb1cf6dc4f187ee3ea80a1eba0a89aba40a5cb20a5087d961357
click==8.1.7 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28 \
    --hash=sha256:ca9853ad459e787e2192211578cc907e7594e294c7ccc834310722b41b9ca6de
colorama==0.4.6 ; python_version >= "3.11" and python_version < "4.0" and (sys_platform == "win32" or platform_system == "Windows") \
    --hash=sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44 \
    --hash=sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6
dnspython==2.4.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:57c6fbaaeaaf39c891292012060beb141791735dbb4004798328fc2c467402d8 \
    --hash=sha256:8dcfae8c7460a2f84b4072e26f1c9f4101ca20c071649cb7c34e8b6a93d58984
email-validator==2.0.0.post2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1ff6e86044200c56ae23595695c54e9614f4a9551e0e393614f764860b3d7900 \
    --hash=sha256:2466ba57cda361fb7309fd3d5a225723c788ca4bbad32a0ebd5373b99730285c
fastapi==0.100.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:522700d7a469e4a973d92321ab93312448fbe20fca9c8da97effc7e7bc56df23 \
    --hash=sha256:ec6dd52bfc4eff3063cfcd0713b43c87640fefb2687bbbe3d8a08d94049cdf32
h11==0.14.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:8f19fbbe99e72420ff35c00b27a34cb9937e902a8b810e2c88300c6f0a3b699d \
    --hash=sha256:e3fe4ac4b851c468cc8363d500db52c2ead036020723024a109d37346efaa761
idna==3.4 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:814f528e8dead7d329833b91c5faa87d60bf71824cd12a7530b5526063d02cb4 \
    --hash=sha256:90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2
iso8601==1.1.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:32811e7b81deee2063ea6d2e94f8819a86d1f3811e49d23623a41fa832bef03f \
    --hash=sha256:8400e90141bf792bce2634df533dc57e3bee19ea120a87bebcd3da89a58ad73f
isort==5.12.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:8bef7dde241278824a6d83f44a544709b065191b95b6e50894bdc722fcba0504 \
    --hash=sha256:f84c2818376e66cf843d497486ea8fed8700b340f308f076c6fb1229dff318b6
loguru==0.7.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:003d71e3d3ed35f0f8984898359d65b79e5b21943f78af86aa5491210429b8eb \
    --hash=sha256:e671a53522515f34fd406340ee968cb9ecafbc4b36c679da03c18fd8d0bd51ac
mypy-extensions==1.0.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d \
    --hash=sha256:75dbf8955dc00442a438fc4d0666508a9a97b6bd41aa2f0ffe9d2f2725af0782
packaging==23.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:994793af429502c4ea2ebf6bf664629d07c1a9fe974af92966e4b8d2df7edc61 \
    --hash=sha256:a392980d2b6cffa644431898be54b0045151319d1e7ec34f0cfed48767dd334f
passlib==1.7.4 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:aa6bca462b8d8bda89c70b382f0c298a20b5560af6cbfa2dce410c0a2fb669f1 \
    --hash=sha256:defd50f72b65c5402ab2c573830a6978e5f202ad0d984793c8dde2c4152ebe04
pathspec==0.11.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1d6ed233af05e679efb96b1851550ea95bbb64b7c490b0f5aa52996c11e92a20 \
    --hash=sha256:e0d8d0ac2f12da61956eb2306b69f9469b42f4deb0f3cb6ed47b9cce9996ced3
platformdirs==3.10.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:b45696dab2d7cc691a3226759c0d3b00c47c8b6e293d96f6436f733303f77f6d \
    --hash=sha256:d7c24979f292f916dc9cbf8648319032f551ea8c49a4c9bf2fb556a02070ec1d
pycparser==2.21 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9 \
    --hash=sha256:e644fdec12f7872f86c58ff790da456218b10f863970249516d60a5eaca77206
pydantic-core==2.6.3 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:002d0ea50e17ed982c2d65b480bd975fc41086a5a2f9c924ef8fc54419d1dea3 \
    --hash=sha256:02e1c385095efbd997311d85c6021d32369675c09bcbfff3b69d84e59dc103f6 \
    --hash=sha256:046af9cfb5384f3684eeb3f58a48698ddab8dd870b4b3f67f825353a14441418 \
    --hash=sha256:04fe5c0a43dec39aedba0ec9579001061d4653a9b53a1366b113aca4a3c05ca7 \
    --hash=sha256:07a1aec07333bf5adebd8264047d3dc518563d92aca6f2f5b36f505132399efc \
    --hash=sha256:1480fa4682e8202b560dcdc9eeec1005f62a15742b813c88cdc01d44e85308e5 \
    --hash=sha256:1508f37ba9e3ddc0189e6ff4e2228bd2d3c3a4641cbe8c07177162f76ed696c7 \
    --hash=sha256:171a4718860790f66d6c2eda1d95dd1edf64f864d2e9f9115840840cf5b5713f \
    --hash=sha256:19e20f8baedd7d987bd3f8005c146e6bcbda7cdeefc36fad50c66adb2dd2da48 \
    --hash=sha256:1a0ddaa723c48af27d19f27f1c73bdc615c73686d763388c8683fe34ae777bad \
    --hash=sha256:1aa712ba150d5105814e53cb141412217146fedc22621e9acff9236d77d2a5ef \
    --hash=sha256:1ac1750df1b4339b543531ce793b8fd5c16660a95d13aecaab26b44ce11775e9 \
    --hash=sha256:1c721bfc575d57305dd922e6a40a8fe3f762905851d694245807a351ad255c58 \
    --hash=sha256:1ce8c84051fa292a5dc54018a40e2a1926fd17980a9422c973e3ebea017aa8da \
    --hash=sha256:1fa1f6312fb84e8c281f32b39affe81984ccd484da6e9d65b3d18c202c666149 \
    --hash=sha256:22134a4453bd59b7d1e895c455fe277af9d9d9fbbcb9dc3f4a97b8693e7e2c9b \
    --hash=sha256:23470a23614c701b37252618e7851e595060a96a23016f9a084f3f92f5ed5881 \
    --hash=sha256:240a015102a0c0cc8114f1cba6444499a8a4d0333e178bc504a5c2196defd456 \
    --hash=sha256:252851b38bad3bfda47b104ffd077d4f9604a10cb06fe09d020016a25107bf98 \
    --hash=sha256:2a20c533cb80466c1d42a43a4521669ccad7cf2967830ac62c2c2f9cece63e7e \
    --hash=sha256:2dd50d6a1aef0426a1d0199190c6c43ec89812b1f409e7fe44cb0fbf6dfa733c \
    --hash=sha256:340e96c08de1069f3d022a85c2a8c63529fd88709468373b418f4cf2c949fb0e \
    --hash=sha256:3796a6152c545339d3b1652183e786df648ecdf7c4f9347e1d30e6750907f5bb \
    --hash=sha256:37a822f630712817b6ecc09ccc378192ef5ff12e2c9bae97eb5968a6cdf3b862 \
    --hash=sha256:3a750a83b2728299ca12e003d73d1264ad0440f60f4fc9cee54acc489249b728 \
    --hash=sha256:3c8945a105f1589ce8a693753b908815e0748f6279959a4530f6742e1994dcb6 \
    --hash=sha256:3ccc13afee44b9006a73d2046068d4df96dc5b333bf3509d9a06d1b42db6d8bf \
    --hash=sha256:3f90e5e3afb11268628c89f378f7a1ea3f2fe502a28af4192e30a6cdea1e7d5e \
    --hash=sha256:4292ca56751aebbe63a84bbfc3b5717abb09b14d4b4442cc43fd7c49a1529efd \
    --hash=sha256:430ddd965ffd068dd70ef4e4d74f2c489c3a313adc28e829dd7262cc0d2dd1e8 \
    --hash=sha256:439a0de139556745ae53f9cc9668c6c2053444af940d3ef3ecad95b079bc9987 \
    --hash=sha256:44b4f937b992394a2e81a5c5ce716f3dcc1237281e81b80c748b2da6dd5cf29a \
    --hash=sha256:48c1ed8b02ffea4d5c9c220eda27af02b8149fe58526359b3c07eb391cb353a2 \
    --hash=sha256:4ef724a059396751aef71e847178d66ad7fc3fc969a1a40c29f5aac1aa5f8784 \
    --hash=sha256:50555ba3cb58f9861b7a48c493636b996a617db1a72c18da4d7f16d7b1b9952b \
    --hash=sha256:522a9c4a4d1924facce7270c84b5134c5cabcb01513213662a2e89cf28c1d309 \
    --hash=sha256:5493a7027bfc6b108e17c3383959485087d5942e87eb62bbac69829eae9bc1f7 \
    --hash=sha256:56ea80269077003eaa59723bac1d8bacd2cd15ae30456f2890811efc1e3d4413 \
    --hash=sha256:5a2a3c9ef904dcdadb550eedf3291ec3f229431b0084666e2c2aa8ff99a103a2 \
    --hash=sha256:5cfde4fab34dd1e3a3f7f3db38182ab6c95e4ea91cf322242ee0be5c2f7e3d2f \
    --hash=sha256:5e4a2cf8c4543f37f5dc881de6c190de08096c53986381daebb56a355be5dfe6 \
    --hash=sha256:5e9c068f36b9f396399d43bfb6defd4cc99c36215f6ff33ac8b9c14ba15bdf6b \
    --hash=sha256:5ed7ceca6aba5331ece96c0e328cd52f0dcf942b8895a1ed2642de50800b79d3 \
    --hash=sha256:5fa159b902d22b283b680ef52b532b29554ea2a7fc39bf354064751369e9dbd7 \
    --hash=sha256:615a31b1629e12445c0e9fc8339b41aaa6cc60bd53bf802d5fe3d2c0cda2ae8d \
    --hash=sha256:621afe25cc2b3c4ba05fff53525156d5100eb35c6e5a7cf31d66cc9e1963e378 \
    --hash=sha256:6656a0ae383d8cd7cc94e91de4e526407b3726049ce8d7939049cbfa426518c8 \
    --hash=sha256:672174480a85386dd2e681cadd7d951471ad0bb028ed744c895f11f9d51b9ebe \
    --hash=sha256:692b4ff5c4e828a38716cfa92667661a39886e71136c97b7dac26edef18767f7 \
    --hash=sha256:6bcc1ad776fffe25ea5c187a028991c031a00ff92d012ca1cc4714087e575973 \
    --hash=sha256:6bf7d610ac8f0065a286002a23bcce241ea8248c71988bda538edcc90e0c39ad \
    --hash=sha256:75c0ebbebae71ed1e385f7dfd9b74c1cff09fed24a6df43d326dd7f12339ec34 \
    --hash=sha256:788be9844a6e5c4612b74512a76b2153f1877cd845410d756841f6c3420230eb \
    --hash=sha256:7dc2ce039c7290b4ef64334ec7e6ca6494de6eecc81e21cb4f73b9b39991408c \
    --hash=sha256:813aab5bfb19c98ae370952b6f7190f1e28e565909bfc219a0909db168783465 \
    --hash=sha256:8421cf496e746cf8d6b677502ed9a0d1e4e956586cd8b221e1312e0841c002d5 \
    --hash=sha256:84e87c16f582f5c753b7f39a71bd6647255512191be2d2dbf49458c4ef024588 \
    --hash=sha256:84f8bb34fe76c68c9d96b77c60cef093f5e660ef8e43a6cbfcd991017d375950 \
    --hash=sha256:85cc4d105747d2aa3c5cf3e37dac50141bff779545ba59a095f4a96b0a460e70 \
    --hash=sha256:883daa467865e5766931e07eb20f3e8152324f0adf52658f4d302242c12e2c32 \
    --hash=sha256:8b2b1bfed698fa410ab81982f681f5b1996d3d994ae8073286515ac4d165c2e7 \
    --hash=sha256:8ecbac050856eb6c3046dea655b39216597e373aa8e50e134c0e202f9c47efec \
    --hash=sha256:930bfe73e665ebce3f0da2c6d64455098aaa67e1a00323c74dc752627879fc67 \
    --hash=sha256:9616567800bdc83ce136e5847d41008a1d602213d024207b0ff6cab6753fe645 \
    --hash=sha256:9680dd23055dd874173a3a63a44e7f5a13885a4cfd7e84814be71be24fba83db \
    --hash=sha256:99faba727727b2e59129c59542284efebbddade4f0ae6a29c8b8d3e1f437beb7 \
    --hash=sha256:9a718d56c4d55efcfc63f680f207c9f19c8376e5a8a67773535e6f7e80e93170 \
    --hash=sha256:9b33bf9658cb29ac1a517c11e865112316d09687d767d7a0e4a63d5c640d1b17 \
    --hash=sha256:9e8b374ef41ad5c461efb7a140ce4730661aadf85958b5c6a3e9cf4e040ff4bb \
    --hash=sha256:9e9b65a55bbabda7fccd3500192a79f6e474d8d36e78d1685496aad5f9dbd92c \
    --hash=sha256:a0b7486d85293f7f0bbc39b34e1d8aa26210b450bbd3d245ec3d732864009819 \
    --hash=sha256:a53e3195f134bde03620d87a7e2b2f2046e0e5a8195e66d0f244d6d5b2f6d31b \
    --hash=sha256:a87c54e72aa2ef30189dc74427421e074ab4561cf2bf314589f6af5b37f45e6d \
    --hash=sha256:a892b5b1871b301ce20d40b037ffbe33d1407a39639c2b05356acfef5536d26a \
    --hash=sha256:a8acc9dedd304da161eb071cc7ff1326aa5b66aadec9622b2574ad3ffe225525 \
    --hash=sha256:aaafc776e5edc72b3cad1ccedb5fd869cc5c9a591f1213aa9eba31a781be9ac1 \
    --hash=sha256:acafc4368b289a9f291e204d2c4c75908557d4f36bd3ae937914d4529bf62a76 \
    --hash=sha256:b0a5d7edb76c1c57b95df719af703e796fc8e796447a1da939f97bfa8a918d60 \
    --hash=sha256:b25afe9d5c4f60dcbbe2b277a79be114e2e65a16598db8abee2a2dcde24f162b \
    --hash=sha256:b44c42edc07a50a081672e25dfe6022554b47f91e793066a7b601ca290f71e42 \
    --hash=sha256:b594b64e8568cf09ee5c9501ede37066b9fc41d83d58f55b9952e32141256acd \
    --hash=sha256:b962700962f6e7a6bd77e5f37320cabac24b4c0f76afeac05e9f93cf0c620014 \
    --hash=sha256:bb128c30cf1df0ab78166ded1ecf876620fb9aac84d2413e8ea1594b588c735d \
    --hash=sha256:bf9d42a71a4d7a7c1f14f629e5c30eac451a6fc81827d2beefd57d014c006c4a \
    --hash=sha256:c6595b0d8c8711e8e1dc389d52648b923b809f68ac1c6f0baa525c6440aa0daa \
    --hash=sha256:c8c6660089a25d45333cb9db56bb9e347241a6d7509838dbbd1931d0e19dbc7f \
    --hash=sha256:c9d469204abcca28926cbc28ce98f28e50e488767b084fb3fbdf21af11d3de26 \
    --hash=sha256:d38bbcef58220f9c81e42c255ef0bf99735d8f11edef69ab0b499da77105158a \
    --hash=sha256:d4eb77df2964b64ba190eee00b2312a1fd7a862af8918ec70fc2d6308f76ac64 \
    --hash=sha256:d63b7545d489422d417a0cae6f9898618669608750fc5e62156957e609e728a5 \
    --hash=sha256:d7050899026e708fb185e174c63ebc2c4ee7a0c17b0a96ebc50e1f76a231c057 \
    --hash=sha256:d79f1f2f7ebdb9b741296b69049ff44aedd95976bfee38eb4848820628a99b50 \
    --hash=sha256:d85463560c67fc65cd86153a4975d0b720b6d7725cf7ee0b2d291288433fc21b \
    --hash=sha256:d9140ded382a5b04a1c030b593ed9bf3088243a0a8b7fa9f071a5736498c5483 \
    --hash=sha256:d9b4916b21931b08096efed090327f8fe78e09ae8f5ad44e07f5c72a7eedb51b \
    --hash=sha256:df14f6332834444b4a37685810216cc8fe1fe91f447332cd56294c984ecbff1c \
    --hash=sha256:e49ce7dc9f925e1fb010fc3d555250139df61fa6e5a0a95ce356329602c11ea9 \
    --hash=sha256:e61eae9b31799c32c5f9b7be906be3380e699e74b2db26c227c50a5fc7988698 \
    --hash=sha256:ea053cefa008fda40f92aab937fb9f183cf8752e41dbc7bc68917884454c6362 \
    --hash=sha256:f06e21ad0b504658a3a9edd3d8530e8cea5723f6ea5d280e8db8efc625b47e49 \
    --hash=sha256:f14546403c2a1d11a130b537dda28f07eb6c1805a43dae4617448074fd49c282 \
    --hash=sha256:f1a5d8f18877474c80b7711d870db0eeef9442691fcdb00adabfc97e183ee0b0 \
    --hash=sha256:f2969e8f72c6236c51f91fbb79c33821d12a811e2a94b7aa59c65f8dbdfad34a \
    --hash=sha256:f468d520f47807d1eb5d27648393519655eadc578d5dd862d06873cce04c4d1b \
    --hash=sha256:f70dc00a91311a1aea124e5f64569ea44c011b58433981313202c46bccbec0e1 \
    --hash=sha256:f93255b3e4d64785554e544c1c76cd32f4a354fa79e2eeca5d16ac2e7fdd57aa
pydantic-settings==2.0.3 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:962dc3672495aad6ae96a4390fac7e593591e144625e5112d359f8f67fb75945 \
    --hash=sha256:ddd907b066622bd67603b75e2ff791875540dc485b7307c4fffc015719da8625
pydantic==2.3.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1607cc106602284cd4a00882986570472f193fde9cb1259bceeaedb26aa79a6d \
    --hash=sha256:45b5e446c6dfaad9444819a293b921a40e1db1aa61ea08aede0522529ce90e81
pyjwt==2.8.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:57e28d156e3d5c10088e0c68abb90bfac3df82b40a71bd0daa20c65ccd5c23de \
    --hash=sha256:59127c392cc44c2da5bb3192169a91f429924e17aff6534d70fdc02ab3e04320
pypika-tortoise==0.1.6 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:2d68bbb7e377673743cff42aa1059f3a80228d411fbcae591e4465e173109fd8 \
    --hash=sha256:d802868f479a708e3263724c7b5719a26ad79399b2a70cea065f4a4cadbebf36
python-dotenv==1.0.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:a8df96034aae6d2d50a4ebe8216326c61c3eb64836776504fcca410e5937a3ba \
    --hash=sha256:f5971a9226b701070a4bf2c38c89e5a3f0d64de8debda981d1db98583009122a
pytz==2023.3.post1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:7b4fddbeb94a1eba4b557da24f19fdf9db575192544270a9101d8509f9f43d7b \
    --hash=sha256:ce42d816b81b68506614c11e8937d3aa9e41007ceb50bfdcb0749b921bf646c7
ruff==0.0.281 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:0162b149a94f6007768820bcdf4ccb7e90a21655aac829ace49f4682d0565fdb \
    --hash=sha256:24d0defeb2c6a1b16a4230840d1138e08bc4ef2318496fa6ff7ddbf3a443626f \
    --hash=sha256:29a22b7a6433ce0b4e601897e8a5dd58a75c75c01afee9b8922ebbdd1fe51e51 \
    --hash=sha256:2ccb875a4000bcba6cc61cb9d3cd5969d6b0921b5234f0ef99ad75f74e8935ef \
    --hash=sha256:418fbddfd3dba4d7b11e4e016eacc40d321ff0b7d3637c7ba9ad3ee0474c9a35 \
    --hash=sha256:42a92a62fc841f7444821444553fd6e1e700bb55348f24e8ec39afdd4e3d0312 \
    --hash=sha256:54bab7128167057ee5987bbd9f925fbf105071068de9d8474ca7c38f684b8463 \
    --hash=sha256:6d34cae6ef6c6b6fd6d4f09271fbf635db49e6b788da1b2e1dea11a29f1c2a11 \
    --hash=sha256:70f921438bf09f04c0547cf64c137c87ef33cbec2b64be12b8caa87df261a016 \
    --hash=sha256:7b781f6a7ed35196e6565ed32f57d07b852b0dcd7158c6c7669c8b5d0f8cf97a \
    --hash=sha256:7f5b8ccaabad61e2d50494df820b7bafd94eac13f10d2d8b831994c1618801a9 \
    --hash=sha256:ae0b836c03a7010527bb56384a4e3718e0958e32bea64459879aacdcb65c4945 \
    --hash=sha256:bab2cdfa78754315cccc2b4d46ad6181aabb29e89747a3b135a4b85e11baa025 \
    --hash=sha256:c086bf3968d5cb2b4f31a586fc73bc42cb688c32f4c992ff161d4ce19f551cf2 \
    --hash=sha256:cbf279fd9c2ca674896656df2d82831010afd336a6703a060fe08d6f2358e47b \
    --hash=sha256:dd3c94260a148e955fb46f41d4bcecd857c75794e9f06ebfa7f9be65cfed9621 \
    --hash=sha256:f3495175e6d85a01d3da409a079461a5a3c15b70237cc82550ad8c1f091002c8
sniffio==1.3.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:e60305c5e5d314f5389259b7f22aaa33d8f7dee49763119234af3755c55b9101 \
    --hash=sha256:eecefdce1e5bbfb7ad2eeaabf7c1eeb404d7757c379bd1f7e5cce9d8bf425384
starlette==0.27.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:6a6b0d042acb8d469a01eba54e9cda6cbd24ac602c4cd016723117d6a7e73b75 \
    --hash=sha256:918416370e846586541235ccd38a474c08b80443ed31c578a418e2209b3eef91
tortoise-orm==0.19.3 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:9e368820c70a0866ef9c521d43aa5503485bd7a20a561edc0933b7b0f7036fbc \
    --hash=sha256:ca574bca5191f55608f9013314b1f5d1c6ffd4165a1fcc2f60f6c902f529b3b6
typing-extensions==4.7.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:440d5dd3af93b060174bf433bccd69b0babc3b15b1a8dca43789fd7f61514b36 \
    --hash=sha256:b75ddc264f0ba5615db7ba217daeb99701ad295353c45f9e95963337ceeeffb2
uvicorn==0.23.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1f9be6558f01239d4fdf22ef8126c39cb1ad0addf76c40e760549d2c2f43ab53 \
    --hash=sha256:4d3cc12d7727ba72b64d12d3cc7743124074c0a69f7b201512fc50c3e3f1569a
win32-setctime==1.1.0 ; python_version >= "3.11" and python_version < "4.0" and sys_platform == "win32" \
    --hash=sha256:15cf5750465118d6929ae4de4eb46e8edae9a5634350c01ba582df868e932cb2 \
    --hash=sha256:231db239e959c2fe7eb1d7dc129f11172354f98361c4fa2d6d2d7e278baa8aad

用户: tzy
时间: 2024-01-21T03:24:50.427Z
消息: 但是我在导出的时候出现下面的情况，怎么解决？
poetry export -f requirements.txt
/Users/tzy/Library/Python/3.9/lib/python/site-packages/urllib3/__init__.py:34: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020
  warnings.warn(
Warning: In a future version of Poetry, PyPI will be disabled automatically if at least one custom primary source is configured. In order to avoid a breaking change and make your pyproject.toml forward compatible, add PyPI explicitly via 'poetry source add pypi'. By the way, this has the advantage that you can set the priority of PyPI as with any other source.
Warning: poetry-plugin-export will not be installed by default in a future version of Poetry.
In order to avoid a breaking change and make your automation forward-compatible, please install poetry-plugin-export explicitly. See https://python-poetry.org/docs/plugins/#using-plugins for details on how to install a plugin.
To disable this warning run 'poetry config warnings.export false'.
--extra-index-url https://pypi.tuna.tsinghua.edu.cn/simple

aiosqlite==0.17.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:6c49dc6d3405929b1d08eeccc72306d3677503cc5e5e43771efc1e00232e8231 \
    --hash=sha256:f0e6acc24bc4864149267ac82fb46dfb3be4455f99fe21df82609cc6e6baee51
annotated-types==0.5.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:47cdc3490d9ac1506ce92c7aaa76c579dc3509ff11e098fc867e5130ab7be802 \
    --hash=sha256:58da39888f92c276ad970249761ebea80ba544b77acddaa1a4d6cf78287d45fd
anyio==4.0.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:cfdb2b588b9fc25ede96d8db56ed50848b0b649dca3dd1df0b11f683bb9e0b5f \
    --hash=sha256:f7ed51751b2c2add651e5747c891b47e26d2a21be5d32d9311dfe9692f3e5d7a
argon2-cffi-bindings==21.2.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:20ef543a89dee4db46a1a6e206cd015360e5a75822f76df533845c3cbaf72670 \
    --hash=sha256:2c3e3cc67fdb7d82c4718f19b4e7a87123caf8a93fde7e23cf66ac0337d3cb3f \
    --hash=sha256:3b9ef65804859d335dc6b31582cad2c5166f0c3e7975f324d9ffaa34ee7e6583 \
    --hash=sha256:3e385d1c39c520c08b53d63300c3ecc28622f076f4c2b0e6d7e796e9f6502194 \
    --hash=sha256:58ed19212051f49a523abb1dbe954337dc82d947fb6e5a0da60f7c8471a8476c \
    --hash=sha256:5e00316dabdaea0b2dd82d141cc66889ced0cdcbfa599e8b471cf22c620c329a \
    --hash=sha256:603ca0aba86b1349b147cab91ae970c63118a0f30444d4bc80355937c950c082 \
    --hash=sha256:6a22ad9800121b71099d0fb0a65323810a15f2e292f2ba450810a7316e128ee5 \
    --hash=sha256:8cd69c07dd875537a824deec19f978e0f2078fdda07fd5c42ac29668dda5f40f \
    --hash=sha256:93f9bf70084f97245ba10ee36575f0c3f1e7d7724d67d8e5b08e61787c320ed7 \
    --hash=sha256:9524464572e12979364b7d600abf96181d3541da11e23ddf565a32e70bd4dc0d \
    --hash=sha256:b2ef1c30440dbbcba7a5dc3e319408b59676e2e039e2ae11a8775ecf482b192f \
    --hash=sha256:b746dba803a79238e925d9046a63aa26bf86ab2a2fe74ce6b009a1c3f5c8f2ae \
    --hash=sha256:bb89ceffa6c791807d1305ceb77dbfacc5aa499891d2c55661c6459651fc39e3 \
    --hash=sha256:bd46088725ef7f58b5a1ef7ca06647ebaf0eb4baff7d1d0d177c6cc8744abd86 \
    --hash=sha256:ccb949252cb2ab3a08c02024acb77cfb179492d5701c7cbdbfd776124d4d2367 \
    --hash=sha256:d4966ef5848d820776f5f562a7d45fdd70c2f330c961d0d745b784034bd9f48d \
    --hash=sha256:e415e3f62c8d124ee16018e491a009937f8cf7ebf5eb430ffc5de21b900dad93 \
    --hash=sha256:ed2937d286e2ad0cc79a7087d3c272832865f779430e0cc2b4f3718d3159b0cb \
    --hash=sha256:f1152ac548bd5b8bcecfb0b0371f082037e47128653df2e8ba6e914d384f3c3e \
    --hash=sha256:f9f8b450ed0547e3d473fdc8612083fd08dd2120d6ac8f73828df9b7d45bb351
argon2-cffi==23.1.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:879c3e79a2729ce768ebb7d36d4609e3a78a4ca2ec3a9f12286ca057e3d0db08 \
    --hash=sha256:c670642b78ba29641818ab2e68bd4e6a78ba53b7eff7b4c3815ae16abf91c7ea
black==23.9.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:031e8c69f3d3b09e1aa471a926a1eeb0b9071f80b17689a655f7885ac9325a6f \
    --hash=sha256:13a2e4a93bb8ca74a749b6974925c27219bb3df4d42fc45e948a5d9feb5122b7 \
    --hash=sha256:13ef033794029b85dfea8032c9d3b92b42b526f1ff4bf13b2182ce4e917f5100 \
    --hash=sha256:14f04c990259576acd093871e7e9b14918eb28f1866f91968ff5524293f9c573 \
    --hash=sha256:24b6b3ff5c6d9ea08a8888f6977eae858e1f340d7260cf56d70a49823236b62d \
    --hash=sha256:403397c033adbc45c2bd41747da1f7fc7eaa44efbee256b53842470d4ac5a70f \
    --hash=sha256:50254ebfa56aa46a9fdd5d651f9637485068a1adf42270148cd101cdf56e0ad9 \
    --hash=sha256:538efb451cd50f43aba394e9ec7ad55a37598faae3348d723b59ea8e91616300 \
    --hash=sha256:638619a559280de0c2aa4d76f504891c9860bb8fa214267358f0a20f27c12948 \
    --hash=sha256:6a3b50e4b93f43b34a9d3ef00d9b6728b4a722c997c99ab09102fd5efdb88325 \
    --hash=sha256:6ccd59584cc834b6d127628713e4b6b968e5f79572da66284532525a042549f9 \
    --hash=sha256:75a2dc41b183d4872d3a500d2b9c9016e67ed95738a3624f4751a0cb4818fe71 \
    --hash=sha256:7d30ec46de88091e4316b17ae58bbbfc12b2de05e069030f6b747dfc649ad186 \
    --hash=sha256:8431445bf62d2a914b541da7ab3e2b4f3bc052d2ccbf157ebad18ea126efb91f \
    --hash=sha256:8fc1ddcf83f996247505db6b715294eba56ea9372e107fd54963c7553f2b6dfe \
    --hash=sha256:a732b82747235e0542c03bf352c126052c0fbc458d8a239a94701175b17d4855 \
    --hash=sha256:adc3e4442eef57f99b5590b245a328aad19c99552e0bdc7f0b04db6656debd80 \
    --hash=sha256:c46767e8df1b7beefb0899c4a95fb43058fa8500b6db144f4ff3ca38eb2f6393 \
    --hash=sha256:c619f063c2d68f19b2d7270f4cf3192cb81c9ec5bc5ba02df91471d0b88c4c5c \
    --hash=sha256:cf3a4d00e4cdb6734b64bf23cd4341421e8953615cba6b3670453737a72ec204 \
    --hash=sha256:cf99f3de8b3273a8317681d8194ea222f10e0133a24a7548c73ce44ea1679377 \
    --hash=sha256:d6bc09188020c9ac2555a498949401ab35bb6bf76d4e0f8ee251694664df6301
cffi==1.16.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:0c9ef6ff37e974b73c25eecc13952c55bceed9112be2d9d938ded8e856138bcc \
    --hash=sha256:131fd094d1065b19540c3d72594260f118b231090295d8c34e19a7bbcf2e860a \
    --hash=sha256:1b8ebc27c014c59692bb2664c7d13ce7a6e9a629be20e54e7271fa696ff2b417 \
    --hash=sha256:2c56b361916f390cd758a57f2e16233eb4f64bcbeee88a4881ea90fca14dc6ab \
    --hash=sha256:2d92b25dbf6cae33f65005baf472d2c245c050b1ce709cc4588cdcdd5495b520 \
    --hash=sha256:31d13b0f99e0836b7ff893d37af07366ebc90b678b6664c955b54561fc36ef36 \
    --hash=sha256:32c68ef735dbe5857c810328cb2481e24722a59a2003018885514d4c09af9743 \
    --hash=sha256:3686dffb02459559c74dd3d81748269ffb0eb027c39a6fc99502de37d501faa8 \
    --hash=sha256:582215a0e9adbe0e379761260553ba11c58943e4bbe9c36430c4ca6ac74b15ed \
    --hash=sha256:5b50bf3f55561dac5438f8e70bfcdfd74543fd60df5fa5f62d94e5867deca684 \
    --hash=sha256:5bf44d66cdf9e893637896c7faa22298baebcd18d1ddb6d2626a6e39793a1d56 \
    --hash=sha256:6602bc8dc6f3a9e02b6c22c4fc1e47aa50f8f8e6d3f78a5e16ac33ef5fefa324 \
    --hash=sha256:673739cb539f8cdaa07d92d02efa93c9ccf87e345b9a0b556e3ecc666718468d \
    --hash=sha256:68678abf380b42ce21a5f2abde8efee05c114c2fdb2e9eef2efdb0257fba1235 \
    --hash=sha256:68e7c44931cc171c54ccb702482e9fc723192e88d25a0e133edd7aff8fcd1f6e \
    --hash=sha256:6b3d6606d369fc1da4fd8c357d026317fbb9c9b75d36dc16e90e84c26854b088 \
    --hash=sha256:748dcd1e3d3d7cd5443ef03ce8685043294ad6bd7c02a38d1bd367cfd968e000 \
    --hash=sha256:7651c50c8c5ef7bdb41108b7b8c5a83013bfaa8a935590c5d74627c047a583c7 \
    --hash=sha256:7b78010e7b97fef4bee1e896df8a4bbb6712b7f05b7ef630f9d1da00f6444d2e \
    --hash=sha256:7e61e3e4fa664a8588aa25c883eab612a188c725755afff6289454d6362b9673 \
    --hash=sha256:80876338e19c951fdfed6198e70bc88f1c9758b94578d5a7c4c91a87af3cf31c \
    --hash=sha256:8895613bcc094d4a1b2dbe179d88d7fb4a15cee43c052e8885783fac397d91fe \
    --hash=sha256:88e2b3c14bdb32e440be531ade29d3c50a1a59cd4e51b1dd8b0865c54ea5d2e2 \
    --hash=sha256:8f8e709127c6c77446a8c0a8c8bf3c8ee706a06cd44b1e827c3e6a2ee6b8c098 \
    --hash=sha256:9cb4a35b3642fc5c005a6755a5d17c6c8b6bcb6981baf81cea8bfbc8903e8ba8 \
    --hash=sha256:9f90389693731ff1f659e55c7d1640e2ec43ff725cc61b04b2f9c6d8d017df6a \
    --hash=sha256:a09582f178759ee8128d9270cd1344154fd473bb77d94ce0aeb2a93ebf0feaf0 \
    --hash=sha256:a6a14b17d7e17fa0d207ac08642c8820f84f25ce17a442fd15e27ea18d67c59b \
    --hash=sha256:a72e8961a86d19bdb45851d8f1f08b041ea37d2bd8d4fd19903bc3083d80c896 \
    --hash=sha256:abd808f9c129ba2beda4cfc53bde801e5bcf9d6e0f22f095e45327c038bfe68e \
    --hash=sha256:ac0f5edd2360eea2f1daa9e26a41db02dd4b0451b48f7c318e217ee092a213e9 \
    --hash=sha256:b29ebffcf550f9da55bec9e02ad430c992a87e5f512cd63388abb76f1036d8d2 \
    --hash=sha256:b2ca4e77f9f47c55c194982e10f058db063937845bb2b7a86c84a6cfe0aefa8b \
    --hash=sha256:b7be2d771cdba2942e13215c4e340bfd76398e9227ad10402a8767ab1865d2e6 \
    --hash=sha256:b84834d0cf97e7d27dd5b7f3aca7b6e9263c56308ab9dc8aae9784abb774d404 \
    --hash=sha256:b86851a328eedc692acf81fb05444bdf1891747c25af7529e39ddafaf68a4f3f \
    --hash=sha256:bcb3ef43e58665bbda2fb198698fcae6776483e0c4a631aa5647806c25e02cc0 \
    --hash=sha256:c0f31130ebc2d37cdd8e44605fb5fa7ad59049298b3f745c74fa74c62fbfcfc4 \
    --hash=sha256:c6a164aa47843fb1b01e941d385aab7215563bb8816d80ff3a363a9f8448a8dc \
    --hash=sha256:d8a9d3ebe49f084ad71f9269834ceccbf398253c9fac910c4fd7053ff1386936 \
    --hash=sha256:db8e577c19c0fda0beb7e0d4e09e0ba74b1e4c092e0e40bfa12fe05b6f6d75ba \
    --hash=sha256:dc9b18bf40cc75f66f40a7379f6a9513244fe33c0e8aa72e2d56b0196a7ef872 \
    --hash=sha256:e09f3ff613345df5e8c3667da1d918f9149bd623cd9070c983c013792a9a62eb \
    --hash=sha256:e4108df7fe9b707191e55f33efbcb2d81928e10cea45527879a4749cbe472614 \
    --hash=sha256:e6024675e67af929088fda399b2094574609396b1decb609c55fa58b028a32a1 \
    --hash=sha256:e70f54f1796669ef691ca07d046cd81a29cb4deb1e5f942003f401c0c4a2695d \
    --hash=sha256:e715596e683d2ce000574bae5d07bd522c781a822866c20495e52520564f0969 \
    --hash=sha256:e760191dd42581e023a68b758769e2da259b5d52e3103c6060ddc02c9edb8d7b \
    --hash=sha256:ed86a35631f7bfbb28e108dd96773b9d5a6ce4811cf6ea468bb6a359b256b1e4 \
    --hash=sha256:ee07e47c12890ef248766a6e55bd38ebfb2bb8edd4142d56db91b21ea68b7627 \
    --hash=sha256:fa3a0128b152627161ce47201262d3140edb5a5c3da88d73a1b790a959126956 \
    --hash=sha256:fcc8eb6d5902bb1cf6dc4f187ee3ea80a1eba0a89aba40a5cb20a5087d961357
click==8.1.7 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28 \
    --hash=sha256:ca9853ad459e787e2192211578cc907e7594e294c7ccc834310722b41b9ca6de
colorama==0.4.6 ; python_version >= "3.11" and python_version < "4.0" and (sys_platform == "win32" or platform_system == "Windows") \
    --hash=sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44 \
    --hash=sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6
dnspython==2.4.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:57c6fbaaeaaf39c891292012060beb141791735dbb4004798328fc2c467402d8 \
    --hash=sha256:8dcfae8c7460a2f84b4072e26f1c9f4101ca20c071649cb7c34e8b6a93d58984
email-validator==2.0.0.post2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1ff6e86044200c56ae23595695c54e9614f4a9551e0e393614f764860b3d7900 \
    --hash=sha256:2466ba57cda361fb7309fd3d5a225723c788ca4bbad32a0ebd5373b99730285c
fastapi==0.100.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:522700d7a469e4a973d92321ab93312448fbe20fca9c8da97effc7e7bc56df23 \
    --hash=sha256:ec6dd52bfc4eff3063cfcd0713b43c87640fefb2687bbbe3d8a08d94049cdf32
h11==0.14.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:8f19fbbe99e72420ff35c00b27a34cb9937e902a8b810e2c88300c6f0a3b699d \
    --hash=sha256:e3fe4ac4b851c468cc8363d500db52c2ead036020723024a109d37346efaa761
idna==3.4 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:814f528e8dead7d329833b91c5faa87d60bf71824cd12a7530b5526063d02cb4 \
    --hash=sha256:90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2
iso8601==1.1.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:32811e7b81deee2063ea6d2e94f8819a86d1f3811e49d23623a41fa832bef03f \
    --hash=sha256:8400e90141bf792bce2634df533dc57e3bee19ea120a87bebcd3da89a58ad73f
isort==5.12.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:8bef7dde241278824a6d83f44a544709b065191b95b6e50894bdc722fcba0504 \
    --hash=sha256:f84c2818376e66cf843d497486ea8fed8700b340f308f076c6fb1229dff318b6
loguru==0.7.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:003d71e3d3ed35f0f8984898359d65b79e5b21943f78af86aa5491210429b8eb \
    --hash=sha256:e671a53522515f34fd406340ee968cb9ecafbc4b36c679da03c18fd8d0bd51ac
mypy-extensions==1.0.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d \
    --hash=sha256:75dbf8955dc00442a438fc4d0666508a9a97b6bd41aa2f0ffe9d2f2725af0782
packaging==23.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:994793af429502c4ea2ebf6bf664629d07c1a9fe974af92966e4b8d2df7edc61 \
    --hash=sha256:a392980d2b6cffa644431898be54b0045151319d1e7ec34f0cfed48767dd334f
passlib==1.7.4 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:aa6bca462b8d8bda89c70b382f0c298a20b5560af6cbfa2dce410c0a2fb669f1 \
    --hash=sha256:defd50f72b65c5402ab2c573830a6978e5f202ad0d984793c8dde2c4152ebe04
pathspec==0.11.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1d6ed233af05e679efb96b1851550ea95bbb64b7c490b0f5aa52996c11e92a20 \
    --hash=sha256:e0d8d0ac2f12da61956eb2306b69f9469b42f4deb0f3cb6ed47b9cce9996ced3
platformdirs==3.10.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:b45696dab2d7cc691a3226759c0d3b00c47c8b6e293d96f6436f733303f77f6d \
    --hash=sha256:d7c24979f292f916dc9cbf8648319032f551ea8c49a4c9bf2fb556a02070ec1d
pycparser==2.21 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9 \
    --hash=sha256:e644fdec12f7872f86c58ff790da456218b10f863970249516d60a5eaca77206
pydantic-core==2.6.3 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:002d0ea50e17ed982c2d65b480bd975fc41086a5a2f9c924ef8fc54419d1dea3 \
    --hash=sha256:02e1c385095efbd997311d85c6021d32369675c09bcbfff3b69d84e59dc103f6 \
    --hash=sha256:046af9cfb5384f3684eeb3f58a48698ddab8dd870b4b3f67f825353a14441418 \
    --hash=sha256:04fe5c0a43dec39aedba0ec9579001061d4653a9b53a1366b113aca4a3c05ca7 \
    --hash=sha256:07a1aec07333bf5adebd8264047d3dc518563d92aca6f2f5b36f505132399efc \
    --hash=sha256:1480fa4682e8202b560dcdc9eeec1005f62a15742b813c88cdc01d44e85308e5 \
    --hash=sha256:1508f37ba9e3ddc0189e6ff4e2228bd2d3c3a4641cbe8c07177162f76ed696c7 \
    --hash=sha256:171a4718860790f66d6c2eda1d95dd1edf64f864d2e9f9115840840cf5b5713f \
    --hash=sha256:19e20f8baedd7d987bd3f8005c146e6bcbda7cdeefc36fad50c66adb2dd2da48 \
    --hash=sha256:1a0ddaa723c48af27d19f27f1c73bdc615c73686d763388c8683fe34ae777bad \
    --hash=sha256:1aa712ba150d5105814e53cb141412217146fedc22621e9acff9236d77d2a5ef \
    --hash=sha256:1ac1750df1b4339b543531ce793b8fd5c16660a95d13aecaab26b44ce11775e9 \
    --hash=sha256:1c721bfc575d57305dd922e6a40a8fe3f762905851d694245807a351ad255c58 \
    --hash=sha256:1ce8c84051fa292a5dc54018a40e2a1926fd17980a9422c973e3ebea017aa8da \
    --hash=sha256:1fa1f6312fb84e8c281f32b39affe81984ccd484da6e9d65b3d18c202c666149 \
    --hash=sha256:22134a4453bd59b7d1e895c455fe277af9d9d9fbbcb9dc3f4a97b8693e7e2c9b \
    --hash=sha256:23470a23614c701b37252618e7851e595060a96a23016f9a084f3f92f5ed5881 \
    --hash=sha256:240a015102a0c0cc8114f1cba6444499a8a4d0333e178bc504a5c2196defd456 \
    --hash=sha256:252851b38bad3bfda47b104ffd077d4f9604a10cb06fe09d020016a25107bf98 \
    --hash=sha256:2a20c533cb80466c1d42a43a4521669ccad7cf2967830ac62c2c2f9cece63e7e \
    --hash=sha256:2dd50d6a1aef0426a1d0199190c6c43ec89812b1f409e7fe44cb0fbf6dfa733c \
    --hash=sha256:340e96c08de1069f3d022a85c2a8c63529fd88709468373b418f4cf2c949fb0e \
    --hash=sha256:3796a6152c545339d3b1652183e786df648ecdf7c4f9347e1d30e6750907f5bb \
    --hash=sha256:37a822f630712817b6ecc09ccc378192ef5ff12e2c9bae97eb5968a6cdf3b862 \
    --hash=sha256:3a750a83b2728299ca12e003d73d1264ad0440f60f4fc9cee54acc489249b728 \
    --hash=sha256:3c8945a105f1589ce8a693753b908815e0748f6279959a4530f6742e1994dcb6 \
    --hash=sha256:3ccc13afee44b9006a73d2046068d4df96dc5b333bf3509d9a06d1b42db6d8bf \
    --hash=sha256:3f90e5e3afb11268628c89f378f7a1ea3f2fe502a28af4192e30a6cdea1e7d5e \
    --hash=sha256:4292ca56751aebbe63a84bbfc3b5717abb09b14d4b4442cc43fd7c49a1529efd \
    --hash=sha256:430ddd965ffd068dd70ef4e4d74f2c489c3a313adc28e829dd7262cc0d2dd1e8 \
    --hash=sha256:439a0de139556745ae53f9cc9668c6c2053444af940d3ef3ecad95b079bc9987 \
    --hash=sha256:44b4f937b992394a2e81a5c5ce716f3dcc1237281e81b80c748b2da6dd5cf29a \
    --hash=sha256:48c1ed8b02ffea4d5c9c220eda27af02b8149fe58526359b3c07eb391cb353a2 \
    --hash=sha256:4ef724a059396751aef71e847178d66ad7fc3fc969a1a40c29f5aac1aa5f8784 \
    --hash=sha256:50555ba3cb58f9861b7a48c493636b996a617db1a72c18da4d7f16d7b1b9952b \
    --hash=sha256:522a9c4a4d1924facce7270c84b5134c5cabcb01513213662a2e89cf28c1d309 \
    --hash=sha256:5493a7027bfc6b108e17c3383959485087d5942e87eb62bbac69829eae9bc1f7 \
    --hash=sha256:56ea80269077003eaa59723bac1d8bacd2cd15ae30456f2890811efc1e3d4413 \
    --hash=sha256:5a2a3c9ef904dcdadb550eedf3291ec3f229431b0084666e2c2aa8ff99a103a2 \
    --hash=sha256:5cfde4fab34dd1e3a3f7f3db38182ab6c95e4ea91cf322242ee0be5c2f7e3d2f \
    --hash=sha256:5e4a2cf8c4543f37f5dc881de6c190de08096c53986381daebb56a355be5dfe6 \
    --hash=sha256:5e9c068f36b9f396399d43bfb6defd4cc99c36215f6ff33ac8b9c14ba15bdf6b \
    --hash=sha256:5ed7ceca6aba5331ece96c0e328cd52f0dcf942b8895a1ed2642de50800b79d3 \
    --hash=sha256:5fa159b902d22b283b680ef52b532b29554ea2a7fc39bf354064751369e9dbd7 \
    --hash=sha256:615a31b1629e12445c0e9fc8339b41aaa6cc60bd53bf802d5fe3d2c0cda2ae8d \
    --hash=sha256:621afe25cc2b3c4ba05fff53525156d5100eb35c6e5a7cf31d66cc9e1963e378 \
    --hash=sha256:6656a0ae383d8cd7cc94e91de4e526407b3726049ce8d7939049cbfa426518c8 \
    --hash=sha256:672174480a85386dd2e681cadd7d951471ad0bb028ed744c895f11f9d51b9ebe \
    --hash=sha256:692b4ff5c4e828a38716cfa92667661a39886e71136c97b7dac26edef18767f7 \
    --hash=sha256:6bcc1ad776fffe25ea5c187a028991c031a00ff92d012ca1cc4714087e575973 \
    --hash=sha256:6bf7d610ac8f0065a286002a23bcce241ea8248c71988bda538edcc90e0c39ad \
    --hash=sha256:75c0ebbebae71ed1e385f7dfd9b74c1cff09fed24a6df43d326dd7f12339ec34 \
    --hash=sha256:788be9844a6e5c4612b74512a76b2153f1877cd845410d756841f6c3420230eb \
    --hash=sha256:7dc2ce039c7290b4ef64334ec7e6ca6494de6eecc81e21cb4f73b9b39991408c \
    --hash=sha256:813aab5bfb19c98ae370952b6f7190f1e28e565909bfc219a0909db168783465 \
    --hash=sha256:8421cf496e746cf8d6b677502ed9a0d1e4e956586cd8b221e1312e0841c002d5 \
    --hash=sha256:84e87c16f582f5c753b7f39a71bd6647255512191be2d2dbf49458c4ef024588 \
    --hash=sha256:84f8bb34fe76c68c9d96b77c60cef093f5e660ef8e43a6cbfcd991017d375950 \
    --hash=sha256:85cc4d105747d2aa3c5cf3e37dac50141bff779545ba59a095f4a96b0a460e70 \
    --hash=sha256:883daa467865e5766931e07eb20f3e8152324f0adf52658f4d302242c12e2c32 \
    --hash=sha256:8b2b1bfed698fa410ab81982f681f5b1996d3d994ae8073286515ac4d165c2e7 \
    --hash=sha256:8ecbac050856eb6c3046dea655b39216597e373aa8e50e134c0e202f9c47efec \
    --hash=sha256:930bfe73e665ebce3f0da2c6d64455098aaa67e1a00323c74dc752627879fc67 \
    --hash=sha256:9616567800bdc83ce136e5847d41008a1d602213d024207b0ff6cab6753fe645 \
    --hash=sha256:9680dd23055dd874173a3a63a44e7f5a13885a4cfd7e84814be71be24fba83db \
    --hash=sha256:99faba727727b2e59129c59542284efebbddade4f0ae6a29c8b8d3e1f437beb7 \
    --hash=sha256:9a718d56c4d55efcfc63f680f207c9f19c8376e5a8a67773535e6f7e80e93170 \
    --hash=sha256:9b33bf9658cb29ac1a517c11e865112316d09687d767d7a0e4a63d5c640d1b17 \
    --hash=sha256:9e8b374ef41ad5c461efb7a140ce4730661aadf85958b5c6a3e9cf4e040ff4bb \
    --hash=sha256:9e9b65a55bbabda7fccd3500192a79f6e474d8d36e78d1685496aad5f9dbd92c \
    --hash=sha256:a0b7486d85293f7f0bbc39b34e1d8aa26210b450bbd3d245ec3d732864009819 \
    --hash=sha256:a53e3195f134bde03620d87a7e2b2f2046e0e5a8195e66d0f244d6d5b2f6d31b \
    --hash=sha256:a87c54e72aa2ef30189dc74427421e074ab4561cf2bf314589f6af5b37f45e6d \
    --hash=sha256:a892b5b1871b301ce20d40b037ffbe33d1407a39639c2b05356acfef5536d26a \
    --hash=sha256:a8acc9dedd304da161eb071cc7ff1326aa5b66aadec9622b2574ad3ffe225525 \
    --hash=sha256:aaafc776e5edc72b3cad1ccedb5fd869cc5c9a591f1213aa9eba31a781be9ac1 \
    --hash=sha256:acafc4368b289a9f291e204d2c4c75908557d4f36bd3ae937914d4529bf62a76 \
    --hash=sha256:b0a5d7edb76c1c57b95df719af703e796fc8e796447a1da939f97bfa8a918d60 \
    --hash=sha256:b25afe9d5c4f60dcbbe2b277a79be114e2e65a16598db8abee2a2dcde24f162b \
    --hash=sha256:b44c42edc07a50a081672e25dfe6022554b47f91e793066a7b601ca290f71e42 \
    --hash=sha256:b594b64e8568cf09ee5c9501ede37066b9fc41d83d58f55b9952e32141256acd \
    --hash=sha256:b962700962f6e7a6bd77e5f37320cabac24b4c0f76afeac05e9f93cf0c620014 \
    --hash=sha256:bb128c30cf1df0ab78166ded1ecf876620fb9aac84d2413e8ea1594b588c735d \
    --hash=sha256:bf9d42a71a4d7a7c1f14f629e5c30eac451a6fc81827d2beefd57d014c006c4a \
    --hash=sha256:c6595b0d8c8711e8e1dc389d52648b923b809f68ac1c6f0baa525c6440aa0daa \
    --hash=sha256:c8c6660089a25d45333cb9db56bb9e347241a6d7509838dbbd1931d0e19dbc7f \
    --hash=sha256:c9d469204abcca28926cbc28ce98f28e50e488767b084fb3fbdf21af11d3de26 \
    --hash=sha256:d38bbcef58220f9c81e42c255ef0bf99735d8f11edef69ab0b499da77105158a \
    --hash=sha256:d4eb77df2964b64ba190eee00b2312a1fd7a862af8918ec70fc2d6308f76ac64 \
    --hash=sha256:d63b7545d489422d417a0cae6f9898618669608750fc5e62156957e609e728a5 \
    --hash=sha256:d7050899026e708fb185e174c63ebc2c4ee7a0c17b0a96ebc50e1f76a231c057 \
    --hash=sha256:d79f1f2f7ebdb9b741296b69049ff44aedd95976bfee38eb4848820628a99b50 \
    --hash=sha256:d85463560c67fc65cd86153a4975d0b720b6d7725cf7ee0b2d291288433fc21b \
    --hash=sha256:d9140ded382a5b04a1c030b593ed9bf3088243a0a8b7fa9f071a5736498c5483 \
    --hash=sha256:d9b4916b21931b08096efed090327f8fe78e09ae8f5ad44e07f5c72a7eedb51b \
    --hash=sha256:df14f6332834444b4a37685810216cc8fe1fe91f447332cd56294c984ecbff1c \
    --hash=sha256:e49ce7dc9f925e1fb010fc3d555250139df61fa6e5a0a95ce356329602c11ea9 \
    --hash=sha256:e61eae9b31799c32c5f9b7be906be3380e699e74b2db26c227c50a5fc7988698 \
    --hash=sha256:ea053cefa008fda40f92aab937fb9f183cf8752e41dbc7bc68917884454c6362 \
    --hash=sha256:f06e21ad0b504658a3a9edd3d8530e8cea5723f6ea5d280e8db8efc625b47e49 \
    --hash=sha256:f14546403c2a1d11a130b537dda28f07eb6c1805a43dae4617448074fd49c282 \
    --hash=sha256:f1a5d8f18877474c80b7711d870db0eeef9442691fcdb00adabfc97e183ee0b0 \
    --hash=sha256:f2969e8f72c6236c51f91fbb79c33821d12a811e2a94b7aa59c65f8dbdfad34a \
    --hash=sha256:f468d520f47807d1eb5d27648393519655eadc578d5dd862d06873cce04c4d1b \
    --hash=sha256:f70dc00a91311a1aea124e5f64569ea44c011b58433981313202c46bccbec0e1 \
    --hash=sha256:f93255b3e4d64785554e544c1c76cd32f4a354fa79e2eeca5d16ac2e7fdd57aa
pydantic-settings==2.0.3 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:962dc3672495aad6ae96a4390fac7e593591e144625e5112d359f8f67fb75945 \
    --hash=sha256:ddd907b066622bd67603b75e2ff791875540dc485b7307c4fffc015719da8625
pydantic==2.3.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1607cc106602284cd4a00882986570472f193fde9cb1259bceeaedb26aa79a6d \
    --hash=sha256:45b5e446c6dfaad9444819a293b921a40e1db1aa61ea08aede0522529ce90e81
pyjwt==2.8.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:57e28d156e3d5c10088e0c68abb90bfac3df82b40a71bd0daa20c65ccd5c23de \
    --hash=sha256:59127c392cc44c2da5bb3192169a91f429924e17aff6534d70fdc02ab3e04320
pypika-tortoise==0.1.6 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:2d68bbb7e377673743cff42aa1059f3a80228d411fbcae591e4465e173109fd8 \
    --hash=sha256:d802868f479a708e3263724c7b5719a26ad79399b2a70cea065f4a4cadbebf36
python-dotenv==1.0.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:a8df96034aae6d2d50a4ebe8216326c61c3eb64836776504fcca410e5937a3ba \
    --hash=sha256:f5971a9226b701070a4bf2c38c89e5a3f0d64de8debda981d1db98583009122a
pytz==2023.3.post1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:7b4fddbeb94a1eba4b557da24f19fdf9db575192544270a9101d8509f9f43d7b \
    --hash=sha256:ce42d816b81b68506614c11e8937d3aa9e41007ceb50bfdcb0749b921bf646c7
ruff==0.0.281 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:0162b149a94f6007768820bcdf4ccb7e90a21655aac829ace49f4682d0565fdb \
    --hash=sha256:24d0defeb2c6a1b16a4230840d1138e08bc4ef2318496fa6ff7ddbf3a443626f \
    --hash=sha256:29a22b7a6433ce0b4e601897e8a5dd58a75c75c01afee9b8922ebbdd1fe51e51 \
    --hash=sha256:2ccb875a4000bcba6cc61cb9d3cd5969d6b0921b5234f0ef99ad75f74e8935ef \
    --hash=sha256:418fbddfd3dba4d7b11e4e016eacc40d321ff0b7d3637c7ba9ad3ee0474c9a35 \
    --hash=sha256:42a92a62fc841f7444821444553fd6e1e700bb55348f24e8ec39afdd4e3d0312 \
    --hash=sha256:54bab7128167057ee5987bbd9f925fbf105071068de9d8474ca7c38f684b8463 \
    --hash=sha256:6d34cae6ef6c6b6fd6d4f09271fbf635db49e6b788da1b2e1dea11a29f1c2a11 \
    --hash=sha256:70f921438bf09f04c0547cf64c137c87ef33cbec2b64be12b8caa87df261a016 \
    --hash=sha256:7b781f6a7ed35196e6565ed32f57d07b852b0dcd7158c6c7669c8b5d0f8cf97a \
    --hash=sha256:7f5b8ccaabad61e2d50494df820b7bafd94eac13f10d2d8b831994c1618801a9 \
    --hash=sha256:ae0b836c03a7010527bb56384a4e3718e0958e32bea64459879aacdcb65c4945 \
    --hash=sha256:bab2cdfa78754315cccc2b4d46ad6181aabb29e89747a3b135a4b85e11baa025 \
    --hash=sha256:c086bf3968d5cb2b4f31a586fc73bc42cb688c32f4c992ff161d4ce19f551cf2 \
    --hash=sha256:cbf279fd9c2ca674896656df2d82831010afd336a6703a060fe08d6f2358e47b \
    --hash=sha256:dd3c94260a148e955fb46f41d4bcecd857c75794e9f06ebfa7f9be65cfed9621 \
    --hash=sha256:f3495175e6d85a01d3da409a079461a5a3c15b70237cc82550ad8c1f091002c8
sniffio==1.3.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:e60305c5e5d314f5389259b7f22aaa33d8f7dee49763119234af3755c55b9101 \
    --hash=sha256:eecefdce1e5bbfb7ad2eeaabf7c1eeb404d7757c379bd1f7e5cce9d8bf425384
starlette==0.27.0 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:6a6b0d042acb8d469a01eba54e9cda6cbd24ac602c4cd016723117d6a7e73b75 \
    --hash=sha256:918416370e846586541235ccd38a474c08b80443ed31c578a418e2209b3eef91
tortoise-orm==0.19.3 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:9e368820c70a0866ef9c521d43aa5503485bd7a20a561edc0933b7b0f7036fbc \
    --hash=sha256:ca574bca5191f55608f9013314b1f5d1c6ffd4165a1fcc2f60f6c902f529b3b6
typing-extensions==4.7.1 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:440d5dd3af93b060174bf433bccd69b0babc3b15b1a8dca43789fd7f61514b36 \
    --hash=sha256:b75ddc264f0ba5615db7ba217daeb99701ad295353c45f9e95963337ceeeffb2
uvicorn==0.23.2 ; python_version >= "3.11" and python_version < "4.0" \
    --hash=sha256:1f9be6558f01239d4fdf22ef8126c39cb1ad0addf76c40e760549d2c2f43ab53 \
    --hash=sha256:4d3cc12d7727ba72b64d12d3cc7743124074c0a69f7b201512fc50c3e3f1569a
win32-setctime==1.1.0 ; python_version >= "3.11" and python_version < "4.0" and sys_platform == "win32" \
    --hash=sha256:15cf5750465118d6929ae4de4eb46e8edae9a5634350c01ba582df868e932cb2 \
    --hash=sha256:231db239e959c2fe7eb1d7dc129f11172354f98361c4fa2d6d2d7e278baa8aad

用户: tzy
时间: 2024-01-21T03:25:07.947Z
消息: 我在导出的时候出现下面的情况，怎么解决？
poetry export -f requirements.txt
/Users/tzy/Library/Python/3.9/lib/python/site-packages/urllib3/init.py:34: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020
warnings.warn(
Warning: In a future version of Poetry, PyPI will be disabled automatically if at least one custom primary source is configured. In order to avoid a breaking change and make your pyproject.toml forward compatible, add PyPI explicitly via 'poetry source add pypi'. By the way, this has the advantage that you can set the priority of PyPI as with any other source.
Warning: poetry-plugin-export will not be installed by default in a future version of Poetry.
In order to avoid a breaking change and make your automation forward-compatible, please install poetry-plugin-export explicitly. See https://python-poetry.org/docs/plugins/#using-plugins for details on how to install a plugin.
To disable this warning run 'poetry config warnings.export false'.
--extra-index-url https://pypi.tuna.tsinghua.edu.cn/simple

aiosqlite==0.17.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:6c49dc6d3405929b1d08eeccc72306d3677503cc5e5e43771efc1e00232e8231 

--hash=sha256:f0e6acc24bc4864149267ac82fb46dfb3be4455f99fe21df82609cc6e6baee51
annotated-types==0.5.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:47cdc3490d9ac1506ce92c7aaa76c579dc3509ff11e098fc867e5130ab7be802 

--hash=sha256:58da39888f92c276ad970249761ebea80ba544b77acddaa1a4d6cf78287d45fd
anyio==4.0.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:cfdb2b588b9fc25ede96d8db56ed50848b0b649dca3dd1df0b11f683bb9e0b5f 

--hash=sha256:f7ed51751b2c2add651e5747c891b47e26d2a21be5d32d9311dfe9692f3e5d7a
argon2-cffi-bindings==21.2.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:20ef543a89dee4db46a1a6e206cd015360e5a75822f76df533845c3cbaf72670 

--hash=sha256:2c3e3cc67fdb7d82c4718f19b4e7a87123caf8a93fde7e23cf66ac0337d3cb3f 

--hash=sha256:3b9ef65804859d335dc6b31582cad2c5166f0c3e7975f324d9ffaa34ee7e6583 

--hash=sha256:3e385d1c39c520c08b53d63300c3ecc28622f076f4c2b0e6d7e796e9f6502194 

--hash=sha256:58ed19212051f49a523abb1dbe954337dc82d947fb6e5a0da60f7c8471a8476c 

--hash=sha256:5e00316dabdaea0b2dd82d141cc66889ced0cdcbfa599e8b471cf22c620c329a 

--hash=sha256:603ca0aba86b1349b147cab91ae970c63118a0f30444d4bc80355937c950c082 

--hash=sha256:6a22ad9800121b71099d0fb0a65323810a15f2e292f2ba450810a7316e128ee5 

--hash=sha256:8cd69c07dd875537a824deec19f978e0f2078fdda07fd5c42ac29668dda5f40f 

--hash=sha256:93f9bf70084f97245ba10ee36575f0c3f1e7d7724d67d8e5b08e61787c320ed7 

--hash=sha256:9524464572e12979364b7d600abf96181d3541da11e23ddf565a32e70bd4dc0d 

--hash=sha256:b2ef1c30440dbbcba7a5dc3e319408b59676e2e039e2ae11a8775ecf482b192f 

--hash=sha256:b746dba803a79238e925d9046a63aa26bf86ab2a2fe74ce6b009a1c3f5c8f2ae 

--hash=sha256:bb89ceffa6c791807d1305ceb77dbfacc5aa499891d2c55661c6459651fc39e3 

--hash=sha256:bd46088725ef7f58b5a1ef7ca06647ebaf0eb4baff7d1d0d177c6cc8744abd86 

--hash=sha256:ccb949252cb2ab3a08c02024acb77cfb179492d5701c7cbdbfd776124d4d2367 

--hash=sha256:d4966ef5848d820776f5f562a7d45fdd70c2f330c961d0d745b784034bd9f48d 

--hash=sha256:e415e3f62c8d124ee16018e491a009937f8cf7ebf5eb430ffc5de21b900dad93 

--hash=sha256:ed2937d286e2ad0cc79a7087d3c272832865f779430e0cc2b4f3718d3159b0cb 

--hash=sha256:f1152ac548bd5b8bcecfb0b0371f082037e47128653df2e8ba6e914d384f3c3e 

--hash=sha256:f9f8b450ed0547e3d473fdc8612083fd08dd2120d6ac8f73828df9b7d45bb351
argon2-cffi==23.1.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:879c3e79a2729ce768ebb7d36d4609e3a78a4ca2ec3a9f12286ca057e3d0db08 

--hash=sha256:c670642b78ba29641818ab2e68bd4e6a78ba53b7eff7b4c3815ae16abf91c7ea
black==23.9.1 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:031e8c69f3d3b09e1aa471a926a1eeb0b9071f80b17689a655f7885ac9325a6f 

--hash=sha256:13a2e4a93bb8ca74a749b6974925c27219bb3df4d42fc45e948a5d9feb5122b7 

--hash=sha256:13ef033794029b85dfea8032c9d3b92b42b526f1ff4bf13b2182ce4e917f5100 

--hash=sha256:14f04c990259576acd093871e7e9b14918eb28f1866f91968ff5524293f9c573 

--hash=sha256:24b6b3ff5c6d9ea08a8888f6977eae858e1f340d7260cf56d70a49823236b62d 

--hash=sha256:403397c033adbc45c2bd41747da1f7fc7eaa44efbee256b53842470d4ac5a70f 

--hash=sha256:50254ebfa56aa46a9fdd5d651f9637485068a1adf42270148cd101cdf56e0ad9 

--hash=sha256:538efb451cd50f43aba394e9ec7ad55a37598faae3348d723b59ea8e91616300 

--hash=sha256:638619a559280de0c2aa4d76f504891c9860bb8fa214267358f0a20f27c12948 

--hash=sha256:6a3b50e4b93f43b34a9d3ef00d9b6728b4a722c997c99ab09102fd5efdb88325 

--hash=sha256:6ccd59584cc834b6d127628713e4b6b968e5f79572da66284532525a042549f9 

--hash=sha256:75a2dc41b183d4872d3a500d2b9c9016e67ed95738a3624f4751a0cb4818fe71 

--hash=sha256:7d30ec46de88091e4316b17ae58bbbfc12b2de05e069030f6b747dfc649ad186 

--hash=sha256:8431445bf62d2a914b541da7ab3e2b4f3bc052d2ccbf157ebad18ea126efb91f 

--hash=sha256:8fc1ddcf83f996247505db6b715294eba56ea9372e107fd54963c7553f2b6dfe 

--hash=sha256:a732b82747235e0542c03bf352c126052c0fbc458d8a239a94701175b17d4855 

--hash=sha256:adc3e4442eef57f99b5590b245a328aad19c99552e0bdc7f0b04db6656debd80 

--hash=sha256:c46767e8df1b7beefb0899c4a95fb43058fa8500b6db144f4ff3ca38eb2f6393 

--hash=sha256:c619f063c2d68f19b2d7270f4cf3192cb81c9ec5bc5ba02df91471d0b88c4c5c 

--hash=sha256:cf3a4d00e4cdb6734b64bf23cd4341421e8953615cba6b3670453737a72ec204 

--hash=sha256:cf99f3de8b3273a8317681d8194ea222f10e0133a24a7548c73ce44ea1679377 

--hash=sha256:d6bc09188020c9ac2555a498949401ab35bb6bf76d4e0f8ee251694664df6301
cffi==1.16.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:0c9ef6ff37e974b73c25eecc13952c55bceed9112be2d9d938ded8e856138bcc 

--hash=sha256:131fd094d1065b19540c3d72594260f118b231090295d8c34e19a7bbcf2e860a 

--hash=sha256:1b8ebc27c014c59692bb2664c7d13ce7a6e9a629be20e54e7271fa696ff2b417 

--hash=sha256:2c56b361916f390cd758a57f2e16233eb4f64bcbeee88a4881ea90fca14dc6ab 

--hash=sha256:2d92b25dbf6cae33f65005baf472d2c245c050b1ce709cc4588cdcdd5495b520 

--hash=sha256:31d13b0f99e0836b7ff893d37af07366ebc90b678b6664c955b54561fc36ef36 

--hash=sha256:32c68ef735dbe5857c810328cb2481e24722a59a2003018885514d4c09af9743 

--hash=sha256:3686dffb02459559c74dd3d81748269ffb0eb027c39a6fc99502de37d501faa8 

--hash=sha256:582215a0e9adbe0e379761260553ba11c58943e4bbe9c36430c4ca6ac74b15ed 

--hash=sha256:5b50bf3f55561dac5438f8e70bfcdfd74543fd60df5fa5f62d94e5867deca684 

--hash=sha256:5bf44d66cdf9e893637896c7faa22298baebcd18d1ddb6d2626a6e39793a1d56 

--hash=sha256:6602bc8dc6f3a9e02b6c22c4fc1e47aa50f8f8e6d3f78a5e16ac33ef5fefa324 

--hash=sha256:673739cb539f8cdaa07d92d02efa93c9ccf87e345b9a0b556e3ecc666718468d 

--hash=sha256:68678abf380b42ce21a5f2abde8efee05c114c2fdb2e9eef2efdb0257fba1235 

--hash=sha256:68e7c44931cc171c54ccb702482e9fc723192e88d25a0e133edd7aff8fcd1f6e 

--hash=sha256:6b3d6606d369fc1da4fd8c357d026317fbb9c9b75d36dc16e90e84c26854b088 

--hash=sha256:748dcd1e3d3d7cd5443ef03ce8685043294ad6bd7c02a38d1bd367cfd968e000 

--hash=sha256:7651c50c8c5ef7bdb41108b7b8c5a83013bfaa8a935590c5d74627c047a583c7 

--hash=sha256:7b78010e7b97fef4bee1e896df8a4bbb6712b7f05b7ef630f9d1da00f6444d2e 

--hash=sha256:7e61e3e4fa664a8588aa25c883eab612a188c725755afff6289454d6362b9673 

--hash=sha256:80876338e19c951fdfed6198e70bc88f1c9758b94578d5a7c4c91a87af3cf31c 

--hash=sha256:8895613bcc094d4a1b2dbe179d88d7fb4a15cee43c052e8885783fac397d91fe 

--hash=sha256:88e2b3c14bdb32e440be531ade29d3c50a1a59cd4e51b1dd8b0865c54ea5d2e2 

--hash=sha256:8f8e709127c6c77446a8c0a8c8bf3c8ee706a06cd44b1e827c3e6a2ee6b8c098 

--hash=sha256:9cb4a35b3642fc5c005a6755a5d17c6c8b6bcb6981baf81cea8bfbc8903e8ba8 

--hash=sha256:9f90389693731ff1f659e55c7d1640e2ec43ff725cc61b04b2f9c6d8d017df6a 

--hash=sha256:a09582f178759ee8128d9270cd1344154fd473bb77d94ce0aeb2a93ebf0feaf0 

--hash=sha256:a6a14b17d7e17fa0d207ac08642c8820f84f25ce17a442fd15e27ea18d67c59b 

--hash=sha256:a72e8961a86d19bdb45851d8f1f08b041ea37d2bd8d4fd19903bc3083d80c896 

--hash=sha256:abd808f9c129ba2beda4cfc53bde801e5bcf9d6e0f22f095e45327c038bfe68e 

--hash=sha256:ac0f5edd2360eea2f1daa9e26a41db02dd4b0451b48f7c318e217ee092a213e9 

--hash=sha256:b29ebffcf550f9da55bec9e02ad430c992a87e5f512cd63388abb76f1036d8d2 

--hash=sha256:b2ca4e77f9f47c55c194982e10f058db063937845bb2b7a86c84a6cfe0aefa8b 

--hash=sha256:b7be2d771cdba2942e13215c4e340bfd76398e9227ad10402a8767ab1865d2e6 

--hash=sha256:b84834d0cf97e7d27dd5b7f3aca7b6e9263c56308ab9dc8aae9784abb774d404 

--hash=sha256:b86851a328eedc692acf81fb05444bdf1891747c25af7529e39ddafaf68a4f3f 

--hash=sha256:bcb3ef43e58665bbda2fb198698fcae6776483e0c4a631aa5647806c25e02cc0 

--hash=sha256:c0f31130ebc2d37cdd8e44605fb5fa7ad59049298b3f745c74fa74c62fbfcfc4 

--hash=sha256:c6a164aa47843fb1b01e941d385aab7215563bb8816d80ff3a363a9f8448a8dc 

--hash=sha256:d8a9d3ebe49f084ad71f9269834ceccbf398253c9fac910c4fd7053ff1386936 

--hash=sha256:db8e577c19c0fda0beb7e0d4e09e0ba74b1e4c092e0e40bfa12fe05b6f6d75ba 

--hash=sha256:dc9b18bf40cc75f66f40a7379f6a9513244fe33c0e8aa72e2d56b0196a7ef872 

--hash=sha256:e09f3ff613345df5e8c3667da1d918f9149bd623cd9070c983c013792a9a62eb 

--hash=sha256:e4108df7fe9b707191e55f33efbcb2d81928e10cea45527879a4749cbe472614 

--hash=sha256:e6024675e67af929088fda399b2094574609396b1decb609c55fa58b028a32a1 

--hash=sha256:e70f54f1796669ef691ca07d046cd81a29cb4deb1e5f942003f401c0c4a2695d 

--hash=sha256:e715596e683d2ce000574bae5d07bd522c781a822866c20495e52520564f0969 

--hash=sha256:e760191dd42581e023a68b758769e2da259b5d52e3103c6060ddc02c9edb8d7b 

--hash=sha256:ed86a35631f7bfbb28e108dd96773b9d5a6ce4811cf6ea468bb6a359b256b1e4 

--hash=sha256:ee07e47c12890ef248766a6e55bd38ebfb2bb8edd4142d56db91b21ea68b7627 

--hash=sha256:fa3a0128b152627161ce47201262d3140edb5a5c3da88d73a1b790a959126956 

--hash=sha256:fcc8eb6d5902bb1cf6dc4f187ee3ea80a1eba0a89aba40a5cb20a5087d961357
click==8.1.7 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28 

--hash=sha256:ca9853ad459e787e2192211578cc907e7594e294c7ccc834310722b41b9ca6de
colorama==0.4.6 ; python_version >= "3.11" and python_version < "4.0" and (sys_platform == "win32" or platform_system == "Windows") 

--hash=sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44 

--hash=sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6
dnspython==2.4.2 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:57c6fbaaeaaf39c891292012060beb141791735dbb4004798328fc2c467402d8 

--hash=sha256:8dcfae8c7460a2f84b4072e26f1c9f4101ca20c071649cb7c34e8b6a93d58984
email-validator==2.0.0.post2 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:1ff6e86044200c56ae23595695c54e9614f4a9551e0e393614f764860b3d7900 

--hash=sha256:2466ba57cda361fb7309fd3d5a225723c788ca4bbad32a0ebd5373b99730285c
fastapi==0.100.1 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:522700d7a469e4a973d92321ab93312448fbe20fca9c8da97effc7e7bc56df23 

--hash=sha256:ec6dd52bfc4eff3063cfcd0713b43c87640fefb2687bbbe3d8a08d94049cdf32
h11==0.14.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:8f19fbbe99e72420ff35c00b27a34cb9937e902a8b810e2c88300c6f0a3b699d 

--hash=sha256:e3fe4ac4b851c468cc8363d500db52c2ead036020723024a109d37346efaa761
idna==3.4 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:814f528e8dead7d329833b91c5faa87d60bf71824cd12a7530b5526063d02cb4 

--hash=sha256:90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2
iso8601==1.1.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:32811e7b81deee2063ea6d2e94f8819a86d1f3811e49d23623a41fa832bef03f 

--hash=sha256:8400e90141bf792bce2634df533dc57e3bee19ea120a87bebcd3da89a58ad73f
isort==5.12.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:8bef7dde241278824a6d83f44a544709b065191b95b6e50894bdc722fcba0504 

--hash=sha256:f84c2818376e66cf843d497486ea8fed8700b340f308f076c6fb1229dff318b6
loguru==0.7.2 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:003d71e3d3ed35f0f8984898359d65b79e5b21943f78af86aa5491210429b8eb 

--hash=sha256:e671a53522515f34fd406340ee968cb9ecafbc4b36c679da03c18fd8d0bd51ac
mypy-extensions==1.0.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d 

--hash=sha256:75dbf8955dc00442a438fc4d0666508a9a97b6bd41aa2f0ffe9d2f2725af0782
packaging==23.1 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:994793af429502c4ea2ebf6bf664629d07c1a9fe974af92966e4b8d2df7edc61 

--hash=sha256:a392980d2b6cffa644431898be54b0045151319d1e7ec34f0cfed48767dd334f
passlib==1.7.4 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:aa6bca462b8d8bda89c70b382f0c298a20b5560af6cbfa2dce410c0a2fb669f1 

--hash=sha256:defd50f72b65c5402ab2c573830a6978e5f202ad0d984793c8dde2c4152ebe04
pathspec==0.11.2 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:1d6ed233af05e679efb96b1851550ea95bbb64b7c490b0f5aa52996c11e92a20 

--hash=sha256:e0d8d0ac2f12da61956eb2306b69f9469b42f4deb0f3cb6ed47b9cce9996ced3
platformdirs==3.10.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:b45696dab2d7cc691a3226759c0d3b00c47c8b6e293d96f6436f733303f77f6d 

--hash=sha256:d7c24979f292f916dc9cbf8648319032f551ea8c49a4c9bf2fb556a02070ec1d
pycparser==2.21 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9 

--hash=sha256:e644fdec12f7872f86c58ff790da456218b10f863970249516d60a5eaca77206
pydantic-core==2.6.3 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:002d0ea50e17ed982c2d65b480bd975fc41086a5a2f9c924ef8fc54419d1dea3 

--hash=sha256:02e1c385095efbd997311d85c6021d32369675c09bcbfff3b69d84e59dc103f6 

--hash=sha256:046af9cfb5384f3684eeb3f58a48698ddab8dd870b4b3f67f825353a14441418 

--hash=sha256:04fe5c0a43dec39aedba0ec9579001061d4653a9b53a1366b113aca4a3c05ca7 

--hash=sha256:07a1aec07333bf5adebd8264047d3dc518563d92aca6f2f5b36f505132399efc 

--hash=sha256:1480fa4682e8202b560dcdc9eeec1005f62a15742b813c88cdc01d44e85308e5 

--hash=sha256:1508f37ba9e3ddc0189e6ff4e2228bd2d3c3a4641cbe8c07177162f76ed696c7 

--hash=sha256:171a4718860790f66d6c2eda1d95dd1edf64f864d2e9f9115840840cf5b5713f 

--hash=sha256:19e20f8baedd7d987bd3f8005c146e6bcbda7cdeefc36fad50c66adb2dd2da48 

--hash=sha256:1a0ddaa723c48af27d19f27f1c73bdc615c73686d763388c8683fe34ae777bad 

--hash=sha256:1aa712ba150d5105814e53cb141412217146fedc22621e9acff9236d77d2a5ef 

--hash=sha256:1ac1750df1b4339b543531ce793b8fd5c16660a95d13aecaab26b44ce11775e9 

--hash=sha256:1c721bfc575d57305dd922e6a40a8fe3f762905851d694245807a351ad255c58 

--hash=sha256:1ce8c84051fa292a5dc54018a40e2a1926fd17980a9422c973e3ebea017aa8da 

--hash=sha256:1fa1f6312fb84e8c281f32b39affe81984ccd484da6e9d65b3d18c202c666149 

--hash=sha256:22134a4453bd59b7d1e895c455fe277af9d9d9fbbcb9dc3f4a97b8693e7e2c9b 

--hash=sha256:23470a23614c701b37252618e7851e595060a96a23016f9a084f3f92f5ed5881 

--hash=sha256:240a015102a0c0cc8114f1cba6444499a8a4d0333e178bc504a5c2196defd456 

--hash=sha256:252851b38bad3bfda47b104ffd077d4f9604a10cb06fe09d020016a25107bf98 

--hash=sha256:2a20c533cb80466c1d42a43a4521669ccad7cf2967830ac62c2c2f9cece63e7e 

--hash=sha256:2dd50d6a1aef0426a1d0199190c6c43ec89812b1f409e7fe44cb0fbf6dfa733c 

--hash=sha256:340e96c08de1069f3d022a85c2a8c63529fd88709468373b418f4cf2c949fb0e 

--hash=sha256:3796a6152c545339d3b1652183e786df648ecdf7c4f9347e1d30e6750907f5bb 

--hash=sha256:37a822f630712817b6ecc09ccc378192ef5ff12e2c9bae97eb5968a6cdf3b862 

--hash=sha256:3a750a83b2728299ca12e003d73d1264ad0440f60f4fc9cee54acc489249b728 

--hash=sha256:3c8945a105f1589ce8a693753b908815e0748f6279959a4530f6742e1994dcb6 

--hash=sha256:3ccc13afee44b9006a73d2046068d4df96dc5b333bf3509d9a06d1b42db6d8bf 

--hash=sha256:3f90e5e3afb11268628c89f378f7a1ea3f2fe502a28af4192e30a6cdea1e7d5e 

--hash=sha256:4292ca56751aebbe63a84bbfc3b5717abb09b14d4b4442cc43fd7c49a1529efd 

--hash=sha256:430ddd965ffd068dd70ef4e4d74f2c489c3a313adc28e829dd7262cc0d2dd1e8 

--hash=sha256:439a0de139556745ae53f9cc9668c6c2053444af940d3ef3ecad95b079bc9987 

--hash=sha256:44b4f937b992394a2e81a5c5ce716f3dcc1237281e81b80c748b2da6dd5cf29a 

--hash=sha256:48c1ed8b02ffea4d5c9c220eda27af02b8149fe58526359b3c07eb391cb353a2 

--hash=sha256:4ef724a059396751aef71e847178d66ad7fc3fc969a1a40c29f5aac1aa5f8784 

--hash=sha256:50555ba3cb58f9861b7a48c493636b996a617db1a72c18da4d7f16d7b1b9952b 

--hash=sha256:522a9c4a4d1924facce7270c84b5134c5cabcb01513213662a2e89cf28c1d309 

--hash=sha256:5493a7027bfc6b108e17c3383959485087d5942e87eb62bbac69829eae9bc1f7 

--hash=sha256:56ea80269077003eaa59723bac1d8bacd2cd15ae30456f2890811efc1e3d4413 

--hash=sha256:5a2a3c9ef904dcdadb550eedf3291ec3f229431b0084666e2c2aa8ff99a103a2 

--hash=sha256:5cfde4fab34dd1e3a3f7f3db38182ab6c95e4ea91cf322242ee0be5c2f7e3d2f 

--hash=sha256:5e4a2cf8c4543f37f5dc881de6c190de08096c53986381daebb56a355be5dfe6 

--hash=sha256:5e9c068f36b9f396399d43bfb6defd4cc99c36215f6ff33ac8b9c14ba15bdf6b 

--hash=sha256:5ed7ceca6aba5331ece96c0e328cd52f0dcf942b8895a1ed2642de50800b79d3 

--hash=sha256:5fa159b902d22b283b680ef52b532b29554ea2a7fc39bf354064751369e9dbd7 

--hash=sha256:615a31b1629e12445c0e9fc8339b41aaa6cc60bd53bf802d5fe3d2c0cda2ae8d 

--hash=sha256:621afe25cc2b3c4ba05fff53525156d5100eb35c6e5a7cf31d66cc9e1963e378 

--hash=sha256:6656a0ae383d8cd7cc94e91de4e526407b3726049ce8d7939049cbfa426518c8 

--hash=sha256:672174480a85386dd2e681cadd7d951471ad0bb028ed744c895f11f9d51b9ebe 

--hash=sha256:692b4ff5c4e828a38716cfa92667661a39886e71136c97b7dac26edef18767f7 

--hash=sha256:6bcc1ad776fffe25ea5c187a028991c031a00ff92d012ca1cc4714087e575973 

--hash=sha256:6bf7d610ac8f0065a286002a23bcce241ea8248c71988bda538edcc90e0c39ad 

--hash=sha256:75c0ebbebae71ed1e385f7dfd9b74c1cff09fed24a6df43d326dd7f12339ec34 

--hash=sha256:788be9844a6e5c4612b74512a76b2153f1877cd845410d756841f6c3420230eb 

--hash=sha256:7dc2ce039c7290b4ef64334ec7e6ca6494de6eecc81e21cb4f73b9b39991408c 

--hash=sha256:813aab5bfb19c98ae370952b6f7190f1e28e565909bfc219a0909db168783465 

--hash=sha256:8421cf496e746cf8d6b677502ed9a0d1e4e956586cd8b221e1312e0841c002d5 

--hash=sha256:84e87c16f582f5c753b7f39a71bd6647255512191be2d2dbf49458c4ef024588 

--hash=sha256:84f8bb34fe76c68c9d96b77c60cef093f5e660ef8e43a6cbfcd991017d375950 

--hash=sha256:85cc4d105747d2aa3c5cf3e37dac50141bff779545ba59a095f4a96b0a460e70 

--hash=sha256:883daa467865e5766931e07eb20f3e8152324f0adf52658f4d302242c12e2c32 

--hash=sha256:8b2b1bfed698fa410ab81982f681f5b1996d3d994ae8073286515ac4d165c2e7 

--hash=sha256:8ecbac050856eb6c3046dea655b39216597e373aa8e50e134c0e202f9c47efec 

--hash=sha256:930bfe73e665ebce3f0da2c6d64455098aaa67e1a00323c74dc752627879fc67 

--hash=sha256:9616567800bdc83ce136e5847d41008a1d602213d024207b0ff6cab6753fe645 

--hash=sha256:9680dd23055dd874173a3a63a44e7f5a13885a4cfd7e84814be71be24fba83db 

--hash=sha256:99faba727727b2e59129c59542284efebbddade4f0ae6a29c8b8d3e1f437beb7 

--hash=sha256:9a718d56c4d55efcfc63f680f207c9f19c8376e5a8a67773535e6f7e80e93170 

--hash=sha256:9b33bf9658cb29ac1a517c11e865112316d09687d767d7a0e4a63d5c640d1b17 

--hash=sha256:9e8b374ef41ad5c461efb7a140ce4730661aadf85958b5c6a3e9cf4e040ff4bb 

--hash=sha256:9e9b65a55bbabda7fccd3500192a79f6e474d8d36e78d1685496aad5f9dbd92c 

--hash=sha256:a0b7486d85293f7f0bbc39b34e1d8aa26210b450bbd3d245ec3d732864009819 

--hash=sha256:a53e3195f134bde03620d87a7e2b2f2046e0e5a8195e66d0f244d6d5b2f6d31b 

--hash=sha256:a87c54e72aa2ef30189dc74427421e074ab4561cf2bf314589f6af5b37f45e6d 

--hash=sha256:a892b5b1871b301ce20d40b037ffbe33d1407a39639c2b05356acfef5536d26a 

--hash=sha256:a8acc9dedd304da161eb071cc7ff1326aa5b66aadec9622b2574ad3ffe225525 

--hash=sha256:aaafc776e5edc72b3cad1ccedb5fd869cc5c9a591f1213aa9eba31a781be9ac1 

--hash=sha256:acafc4368b289a9f291e204d2c4c75908557d4f36bd3ae937914d4529bf62a76 

--hash=sha256:b0a5d7edb76c1c57b95df719af703e796fc8e796447a1da939f97bfa8a918d60 

--hash=sha256:b25afe9d5c4f60dcbbe2b277a79be114e2e65a16598db8abee2a2dcde24f162b 

--hash=sha256:b44c42edc07a50a081672e25dfe6022554b47f91e793066a7b601ca290f71e42 

--hash=sha256:b594b64e8568cf09ee5c9501ede37066b9fc41d83d58f55b9952e32141256acd 

--hash=sha256:b962700962f6e7a6bd77e5f37320cabac24b4c0f76afeac05e9f93cf0c620014 

--hash=sha256:bb128c30cf1df0ab78166ded1ecf876620fb9aac84d2413e8ea1594b588c735d 

--hash=sha256:bf9d42a71a4d7a7c1f14f629e5c30eac451a6fc81827d2beefd57d014c006c4a 

--hash=sha256:c6595b0d8c8711e8e1dc389d52648b923b809f68ac1c6f0baa525c6440aa0daa 

--hash=sha256:c8c6660089a25d45333cb9db56bb9e347241a6d7509838dbbd1931d0e19dbc7f 

--hash=sha256:c9d469204abcca28926cbc28ce98f28e50e488767b084fb3fbdf21af11d3de26 

--hash=sha256:d38bbcef58220f9c81e42c255ef0bf99735d8f11edef69ab0b499da77105158a 

--hash=sha256:d4eb77df2964b64ba190eee00b2312a1fd7a862af8918ec70fc2d6308f76ac64 

--hash=sha256:d63b7545d489422d417a0cae6f9898618669608750fc5e62156957e609e728a5 

--hash=sha256:d7050899026e708fb185e174c63ebc2c4ee7a0c17b0a96ebc50e1f76a231c057 

--hash=sha256:d79f1f2f7ebdb9b741296b69049ff44aedd95976bfee38eb4848820628a99b50 

--hash=sha256:d85463560c67fc65cd86153a4975d0b720b6d7725cf7ee0b2d291288433fc21b 

--hash=sha256:d9140ded382a5b04a1c030b593ed9bf3088243a0a8b7fa9f071a5736498c5483 

--hash=sha256:d9b4916b21931b08096efed090327f8fe78e09ae8f5ad44e07f5c72a7eedb51b 

--hash=sha256:df14f6332834444b4a37685810216cc8fe1fe91f447332cd56294c984ecbff1c 

--hash=sha256:e49ce7dc9f925e1fb010fc3d555250139df61fa6e5a0a95ce356329602c11ea9 

--hash=sha256:e61eae9b31799c32c5f9b7be906be3380e699e74b2db26c227c50a5fc7988698 

--hash=sha256:ea053cefa008fda40f92aab937fb9f183cf8752e41dbc7bc68917884454c6362 

--hash=sha256:f06e21ad0b504658a3a9edd3d8530e8cea5723f6ea5d280e8db8efc625b47e49 

--hash=sha256:f14546403c2a1d11a130b537dda28f07eb6c1805a43dae4617448074fd49c282 

--hash=sha256:f1a5d8f18877474c80b7711d870db0eeef9442691fcdb00adabfc97e183ee0b0 

--hash=sha256:f2969e8f72c6236c51f91fbb79c33821d12a811e2a94b7aa59c65f8dbdfad34a 

--hash=sha256:f468d520f47807d1eb5d27648393519655eadc578d5dd862d06873cce04c4d1b 

--hash=sha256:f70dc00a91311a1aea124e5f64569ea44c011b58433981313202c46bccbec0e1 

--hash=sha256:f93255b3e4d64785554e544c1c76cd32f4a354fa79e2eeca5d16ac2e7fdd57aa
pydantic-settings==2.0.3 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:962dc3672495aad6ae96a4390fac7e593591e144625e5112d359f8f67fb75945 

--hash=sha256:ddd907b066622bd67603b75e2ff791875540dc485b7307c4fffc015719da8625
pydantic==2.3.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:1607cc106602284cd4a00882986570472f193fde9cb1259bceeaedb26aa79a6d 

--hash=sha256:45b5e446c6dfaad9444819a293b921a40e1db1aa61ea08aede0522529ce90e81
pyjwt==2.8.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:57e28d156e3d5c10088e0c68abb90bfac3df82b40a71bd0daa20c65ccd5c23de 

--hash=sha256:59127c392cc44c2da5bb3192169a91f429924e17aff6534d70fdc02ab3e04320
pypika-tortoise==0.1.6 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:2d68bbb7e377673743cff42aa1059f3a80228d411fbcae591e4465e173109fd8 

--hash=sha256:d802868f479a708e3263724c7b5719a26ad79399b2a70cea065f4a4cadbebf36
python-dotenv==1.0.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:a8df96034aae6d2d50a4ebe8216326c61c3eb64836776504fcca410e5937a3ba 

--hash=sha256:f5971a9226b701070a4bf2c38c89e5a3f0d64de8debda981d1db98583009122a
pytz==2023.3.post1 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:7b4fddbeb94a1eba4b557da24f19fdf9db575192544270a9101d8509f9f43d7b 

--hash=sha256:ce42d816b81b68506614c11e8937d3aa9e41007ceb50bfdcb0749b921bf646c7
ruff==0.0.281 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:0162b149a94f6007768820bcdf4ccb7e90a21655aac829ace49f4682d0565fdb 

--hash=sha256:24d0defeb2c6a1b16a4230840d1138e08bc4ef2318496fa6ff7ddbf3a443626f 

--hash=sha256:29a22b7a6433ce0b4e601897e8a5dd58a75c75c01afee9b8922ebbdd1fe51e51 

--hash=sha256:2ccb875a4000bcba6cc61cb9d3cd5969d6b0921b5234f0ef99ad75f74e8935ef 

--hash=sha256:418fbddfd3dba4d7b11e4e016eacc40d321ff0b7d3637c7ba9ad3ee0474c9a35 

--hash=sha256:42a92a62fc841f7444821444553fd6e1e700bb55348f24e8ec39afdd4e3d0312 

--hash=sha256:54bab7128167057ee5987bbd9f925fbf105071068de9d8474ca7c38f684b8463 

--hash=sha256:6d34cae6ef6c6b6fd6d4f09271fbf635db49e6b788da1b2e1dea11a29f1c2a11 

--hash=sha256:70f921438bf09f04c0547cf64c137c87ef33cbec2b64be12b8caa87df261a016 

--hash=sha256:7b781f6a7ed35196e6565ed32f57d07b852b0dcd7158c6c7669c8b5d0f8cf97a 

--hash=sha256:7f5b8ccaabad61e2d50494df820b7bafd94eac13f10d2d8b831994c1618801a9 

--hash=sha256:ae0b836c03a7010527bb56384a4e3718e0958e32bea64459879aacdcb65c4945 

--hash=sha256:bab2cdfa78754315cccc2b4d46ad6181aabb29e89747a3b135a4b85e11baa025 

--hash=sha256:c086bf3968d5cb2b4f31a586fc73bc42cb688c32f4c992ff161d4ce19f551cf2 

--hash=sha256:cbf279fd9c2ca674896656df2d82831010afd336a6703a060fe08d6f2358e47b 

--hash=sha256:dd3c94260a148e955fb46f41d4bcecd857c75794e9f06ebfa7f9be65cfed9621 

--hash=sha256:f3495175e6d85a01d3da409a079461a5a3c15b70237cc82550ad8c1f091002c8
sniffio==1.3.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:e60305c5e5d314f5389259b7f22aaa33d8f7dee49763119234af3755c55b9101 

--hash=sha256:eecefdce1e5bbfb7ad2eeaabf7c1eeb404d7757c379bd1f7e5cce9d8bf425384
starlette==0.27.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:6a6b0d042acb8d469a01eba54e9cda6cbd24ac602c4cd016723117d6a7e73b75 

--hash=sha256:918416370e846586541235ccd38a474c08b80443ed31c578a418e2209b3eef91
tortoise-orm==0.19.3 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:9e368820c70a0866ef9c521d43aa5503485bd7a20a561edc0933b7b0f7036fbc 

--hash=sha256:ca574bca5191f55608f9013314b1f5d1c6ffd4165a1fcc2f60f6c902f529b3b6
typing-extensions==4.7.1 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:440d5dd3af93b060174bf433bccd69b0babc3b15b1a8dca43789fd7f61514b36 

--hash=sha256:b75ddc264f0ba5615db7ba217daeb99701ad295353c45f9e95963337ceeeffb2
uvicorn==0.23.2 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:1f9be6558f01239d4fdf22ef8126c39cb1ad0addf76c40e760549d2c2f43ab53 

--hash=sha256:4d3cc12d7727ba72b64d12d3cc7743124074c0a69f7b201512fc50c3e3f1569a
win32-setctime==1.1.0 ; python_version >= "3.11" and python_version < "4.0" and sys_platform == "win32" 

--hash=sha256:15cf5750465118d6929ae4de4eb46e8edae9a5634350c01ba582df868e932cb2 

--hash=sha256:231db239e959c2fe7eb1d7dc129f11172354f98361c4fa2d6d2d7e278baa8aad

用户: tzy
时间: 2024-01-21T03:25:15.080Z
消息: 我在导出的时候出现下面的情况，怎么解决？
poetry export -f requirements.txt
/Users/tzy/Library/Python/3.9/lib/python/site-packages/urllib3/init.py:34: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020
warnings.warn(
Warning: In a future version of Poetry, PyPI will be disabled automatically if at least one custom primary source is configured. In order to avoid a breaking change and make your pyproject.toml forward compatible, add PyPI explicitly via 'poetry source add pypi'. By the way, this has the advantage that you can set the priority of PyPI as with any other source.
Warning: poetry-plugin-export will not be installed by default in a future version of Poetry.
In order to avoid a breaking change and make your automation forward-compatible, please install poetry-plugin-export explicitly. See https://python-poetry.org/docs/plugins/#using-plugins for details on how to install a plugin.
To disable this warning run 'poetry config warnings.export false'.
--extra-index-url https://pypi.tuna.tsinghua.edu.cn/simple

aiosqlite==0.17.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:6c49dc6d3405929b1d08eeccc72306d3677503cc5e5e43771efc1e00232e8231 

--hash=sha256:f0e6acc24bc4864149267ac82fb46dfb3be4455f99fe21df82609cc6e6baee51
annotated-types==0.5.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:47cdc3490d9ac1506ce92c7aaa76c579dc3509ff11e098fc867e5130ab7be802 

--hash=sha256:58da39888f92c276ad970249761ebea80ba544b77acddaa1a4d6cf78287d45fd
anyio==4.0.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:cfdb2b588b9fc25ede96d8db56ed50848b0b649dca3dd1df0b11f683bb9e0b5f 

--hash=sha256:f7ed51751b2c2add651e5747c891b47e26d2a21be5d32d9311dfe9692f3e5d7a
argon2-cffi-bindings==21.2.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:20ef543a89dee4db46a1a6e206cd015360e5a75822f76df533845c3cbaf72670 

--hash=sha256:2c3e3cc67fdb7d82c4718f19b4e7a87123caf8a93fde7e23cf66ac0337d3cb3f 

--hash=sha256:3b9ef65804859d335dc6b31582cad2c5166f0c3e7975f324d9ffaa34ee7e6583 

--hash=sha256:3e385d1c39c520c08b53d63300c3ecc28622f076f4c2b0e6d7e796e9f6502194 

--hash=sha256:58ed19212051f49a523abb1dbe954337dc82d947fb6e5a0da60f7c8471a8476c 

--hash=sha256:5e00316dabdaea0b2dd82d141cc66889ced0cdcbfa599e8b471cf22c620c329a 

--hash=sha256:603ca0aba86b1349b147cab91ae970c63118a0f30444d4bc80355937c950c082 

--hash=sha256:6a22ad9800121b71099d0fb0a65323810a15f2e292f2ba450810a7316e128ee5 

--hash=sha256:8cd69c07dd875537a824deec19f978e0f2078fdda07fd5c42ac29668dda5f40f 

--hash=sha256:93f9bf70084f97245ba10ee36575f0c3f1e7d7724d67d8e5b08e61787c320ed7 

--hash=sha256:9524464572e12979364b7d600abf96181d3541da11e23ddf565a32e70bd4dc0d 

--hash=sha256:b2ef1c30440dbbcba7a5dc3e319408b59676e2e039e2ae11a8775ecf482b192f 

--hash=sha256:b746dba803a79238e925d9046a63aa26bf86ab2a2fe74ce6b009a1c3f5c8f2ae 

--hash=sha256:bb89ceffa6c791807d1305ceb77dbfacc5aa499891d2c55661c6459651fc39e3 

--hash=sha256:bd46088725ef7f58b5a1ef7ca06647ebaf0eb4baff7d1d0d177c6cc8744abd86 

--hash=sha256:ccb949252cb2ab3a08c02024acb77cfb179492d5701c7cbdbfd776124d4d2367 

--hash=sha256:d4966ef5848d820776f5f562a7d45fdd70c2f330c961d0d745b784034bd9f48d 

--hash=sha256:e415e3f62c8d124ee16018e491a009937f8cf7ebf5eb430ffc5de21b900dad93 

--hash=sha256:ed2937d286e2ad0cc79a7087d3c272832865f779430e0cc2b4f3718d3159b0cb 

--hash=sha256:f1152ac548bd5b8bcecfb0b0371f082037e47128653df2e8ba6e914d384f3c3e 

--hash=sha256:f9f8b450ed0547e3d473fdc8612083fd08dd2120d6ac8f73828df9b7d45bb351
argon2-cffi==23.1.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:879c3e79a2729ce768ebb7d36d4609e3a78a4ca2ec3a9f12286ca057e3d0db08 

--hash=sha256:c670642b78ba29641818ab2e68bd4e6a78ba53b7eff7b4c3815ae16abf91c7ea
black==23.9.1 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:031e8c69f3d3b09e1aa471a926a1eeb0b9071f80b17689a655f7885ac9325a6f 

--hash=sha256:13a2e4a93bb8ca74a749b6974925c27219bb3df4d42fc45e948a5d9feb5122b7 

--hash=sha256:13ef033794029b85dfea8032c9d3b92b42b526f1ff4bf13b2182ce4e917f5100 

--hash=sha256:14f04c990259576acd093871e7e9b14918eb28f1866f91968ff5524293f9c573 

--hash=sha256:24b6b3ff5c6d9ea08a8888f6977eae858e1f340d7260cf56d70a49823236b62d 

--hash=sha256:403397c033adbc45c2bd41747da1f7fc7eaa44efbee256b53842470d4ac5a70f 

--hash=sha256:50254ebfa56aa46a9fdd5d651f9637485068a1adf42270148cd101cdf56e0ad9 

--hash=sha256:538efb451cd50f43aba394e9ec7ad55a37598faae3348d723b59ea8e91616300 

--hash=sha256:638619a559280de0c2aa4d76f504891c9860bb8fa214267358f0a20f27c12948 

--hash=sha256:6a3b50e4b93f43b34a9d3ef00d9b6728b4a722c997c99ab09102fd5efdb88325 

--hash=sha256:6ccd59584cc834b6d127628713e4b6b968e5f79572da66284532525a042549f9 

--hash=sha256:75a2dc41b183d4872d3a500d2b9c9016e67ed95738a3624f4751a0cb4818fe71 

--hash=sha256:7d30ec46de88091e4316b17ae58bbbfc12b2de05e069030f6b747dfc649ad186 

--hash=sha256:8431445bf62d2a914b541da7ab3e2b4f3bc052d2ccbf157ebad18ea126efb91f 

--hash=sha256:8fc1ddcf83f996247505db6b715294eba56ea9372e107fd54963c7553f2b6dfe 

--hash=sha256:a732b82747235e0542c03bf352c126052c0fbc458d8a239a94701175b17d4855 

--hash=sha256:adc3e4442eef57f99b5590b245a328aad19c99552e0bdc7f0b04db6656debd80 

--hash=sha256:c46767e8df1b7beefb0899c4a95fb43058fa8500b6db144f4ff3ca38eb2f6393 

--hash=sha256:c619f063c2d68f19b2d7270f4cf3192cb81c9ec5bc5ba02df91471d0b88c4c5c 

--hash=sha256:cf3a4d00e4cdb6734b64bf23cd4341421e8953615cba6b3670453737a72ec204 

--hash=sha256:cf99f3de8b3273a8317681d8194ea222f10e0133a24a7548c73ce44ea1679377 

--hash=sha256:d6bc09188020c9ac2555a498949401ab35bb6bf76d4e0f8ee251694664df6301
cffi==1.16.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:0c9ef6ff37e974b73c25eecc13952c55bceed9112be2d9d938ded8e856138bcc 

--hash=sha256:131fd094d1065b19540c3d72594260f118b231090295d8c34e19a7bbcf2e860a 

--hash=sha256:1b8ebc27c014c59692bb2664c7d13ce7a6e9a629be20e54e7271fa696ff2b417 

--hash=sha256:2c56b361916f390cd758a57f2e16233eb4f64bcbeee88a4881ea90fca14dc6ab 

--hash=sha256:2d92b25dbf6cae33f65005baf472d2c245c050b1ce709cc4588cdcdd5495b520 

--hash=sha256:31d13b0f99e0836b7ff893d37af07366ebc90b678b6664c955b54561fc36ef36 

--hash=sha256:32c68ef735dbe5857c810328cb2481e24722a59a2003018885514d4c09af9743 

--hash=sha256:3686dffb02459559c74dd3d81748269ffb0eb027c39a6fc99502de37d501faa8 

--hash=sha256:582215a0e9adbe0e379761260553ba11c58943e4bbe9c36430c4ca6ac74b15ed 

--hash=sha256:5b50bf3f55561dac5438f8e70bfcdfd74543fd60df5fa5f62d94e5867deca684 

--hash=sha256:5bf44d66cdf9e893637896c7faa22298baebcd18d1ddb6d2626a6e39793a1d56 

--hash=sha256:6602bc8dc6f3a9e02b6c22c4fc1e47aa50f8f8e6d3f78a5e16ac33ef5fefa324 

--hash=sha256:673739cb539f8cdaa07d92d02efa93c9ccf87e345b9a0b556e3ecc666718468d 

--hash=sha256:68678abf380b42ce21a5f2abde8efee05c114c2fdb2e9eef2efdb0257fba1235 

--hash=sha256:68e7c44931cc171c54ccb702482e9fc723192e88d25a0e133edd7aff8fcd1f6e 

--hash=sha256:6b3d6606d369fc1da4fd8c357d026317fbb9c9b75d36dc16e90e84c26854b088 

--hash=sha256:748dcd1e3d3d7cd5443ef03ce8685043294ad6bd7c02a38d1bd367cfd968e000 

--hash=sha256:7651c50c8c5ef7bdb41108b7b8c5a83013bfaa8a935590c5d74627c047a583c7 

--hash=sha256:7b78010e7b97fef4bee1e896df8a4bbb6712b7f05b7ef630f9d1da00f6444d2e 

--hash=sha256:7e61e3e4fa664a8588aa25c883eab612a188c725755afff6289454d6362b9673 

--hash=sha256:80876338e19c951fdfed6198e70bc88f1c9758b94578d5a7c4c91a87af3cf31c 

--hash=sha256:8895613bcc094d4a1b2dbe179d88d7fb4a15cee43c052e8885783fac397d91fe 

--hash=sha256:88e2b3c14bdb32e440be531ade29d3c50a1a59cd4e51b1dd8b0865c54ea5d2e2 

--hash=sha256:8f8e709127c6c77446a8c0a8c8bf3c8ee706a06cd44b1e827c3e6a2ee6b8c098 

--hash=sha256:9cb4a35b3642fc5c005a6755a5d17c6c8b6bcb6981baf81cea8bfbc8903e8ba8 

--hash=sha256:9f90389693731ff1f659e55c7d1640e2ec43ff725cc61b04b2f9c6d8d017df6a 

--hash=sha256:a09582f178759ee8128d9270cd1344154fd473bb77d94ce0aeb2a93ebf0feaf0 

--hash=sha256:a6a14b17d7e17fa0d207ac08642c8820f84f25ce17a442fd15e27ea18d67c59b 

--hash=sha256:a72e8961a86d19bdb45851d8f1f08b041ea37d2bd8d4fd19903bc3083d80c896 

--hash=sha256:abd808f9c129ba2beda4cfc53bde801e5bcf9d6e0f22f095e45327c038bfe68e 

--hash=sha256:ac0f5edd2360eea2f1daa9e26a41db02dd4b0451b48f7c318e217ee092a213e9 

--hash=sha256:b29ebffcf550f9da55bec9e02ad430c992a87e5f512cd63388abb76f1036d8d2 

--hash=sha256:b2ca4e77f9f47c55c194982e10f058db063937845bb2b7a86c84a6cfe0aefa8b 

--hash=sha256:b7be2d771cdba2942e13215c4e340bfd76398e9227ad10402a8767ab1865d2e6 

--hash=sha256:b84834d0cf97e7d27dd5b7f3aca7b6e9263c56308ab9dc8aae9784abb774d404 

--hash=sha256:b86851a328eedc692acf81fb05444bdf1891747c25af7529e39ddafaf68a4f3f 

--hash=sha256:bcb3ef43e58665bbda2fb198698fcae6776483e0c4a631aa5647806c25e02cc0 

--hash=sha256:c0f31130ebc2d37cdd8e44605fb5fa7ad59049298b3f745c74fa74c62fbfcfc4 

--hash=sha256:c6a164aa47843fb1b01e941d385aab7215563bb8816d80ff3a363a9f8448a8dc 

--hash=sha256:d8a9d3ebe49f084ad71f9269834ceccbf398253c9fac910c4fd7053ff1386936 

--hash=sha256:db8e577c19c0fda0beb7e0d4e09e0ba74b1e4c092e0e40bfa12fe05b6f6d75ba 

--hash=sha256:dc9b18bf40cc75f66f40a7379f6a9513244fe33c0e8aa72e2d56b0196a7ef872 

--hash=sha256:e09f3ff613345df5e8c3667da1d918f9149bd623cd9070c983c013792a9a62eb 

--hash=sha256:e4108df7fe9b707191e55f33efbcb2d81928e10cea45527879a4749cbe472614 

--hash=sha256:e6024675e67af929088fda399b2094574609396b1decb609c55fa58b028a32a1 

--hash=sha256:e70f54f1796669ef691ca07d046cd81a29cb4deb1e5f942003f401c0c4a2695d 

--hash=sha256:e715596e683d2ce000574bae5d07bd522c781a822866c20495e52520564f0969 

--hash=sha256:e760191dd42581e023a68b758769e2da259b5d52e3103c6060ddc02c9edb8d7b 

--hash=sha256:ed86a35631f7bfbb28e108dd96773b9d5a6ce4811cf6ea468bb6a359b256b1e4 

--hash=sha256:ee07e47c12890ef248766a6e55bd38ebfb2bb8edd4142d56db91b21ea68b7627 

--hash=sha256:fa3a0128b152627161ce47201262d3140edb5a5c3da88d73a1b790a959126956 

--hash=sha256:fcc8eb6d5902bb1cf6dc4f187ee3ea80a1eba0a89aba40a5cb20a5087d961357
click==8.1.7 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:ae74fb96c20a0277a1d615f1e4d73c8414f5a98db8b799a7931d1582f3390c28 

--hash=sha256:ca9853ad459e787e2192211578cc907e7594e294c7ccc834310722b41b9ca6de
colorama==0.4.6 ; python_version >= "3.11" and python_version < "4.0" and (sys_platform == "win32" or platform_system == "Windows") 

--hash=sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44 

--hash=sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6
dnspython==2.4.2 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:57c6fbaaeaaf39c891292012060beb141791735dbb4004798328fc2c467402d8 

--hash=sha256:8dcfae8c7460a2f84b4072e26f1c9f4101ca20c071649cb7c34e8b6a93d58984
email-validator==2.0.0.post2 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:1ff6e86044200c56ae23595695c54e9614f4a9551e0e393614f764860b3d7900 

--hash=sha256:2466ba57cda361fb7309fd3d5a225723c788ca4bbad32a0ebd5373b99730285c
fastapi==0.100.1 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:522700d7a469e4a973d92321ab93312448fbe20fca9c8da97effc7e7bc56df23 

--hash=sha256:ec6dd52bfc4eff3063cfcd0713b43c87640fefb2687bbbe3d8a08d94049cdf32
h11==0.14.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:8f19fbbe99e72420ff35c00b27a34cb9937e902a8b810e2c88300c6f0a3b699d 

--hash=sha256:e3fe4ac4b851c468cc8363d500db52c2ead036020723024a109d37346efaa761
idna==3.4 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:814f528e8dead7d329833b91c5faa87d60bf71824cd12a7530b5526063d02cb4 

--hash=sha256:90b77e79eaa3eba6de819a0c442c0b4ceefc341a7a2ab77d7562bf49f425c5c2
iso8601==1.1.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:32811e7b81deee2063ea6d2e94f8819a86d1f3811e49d23623a41fa832bef03f 

--hash=sha256:8400e90141bf792bce2634df533dc57e3bee19ea120a87bebcd3da89a58ad73f
isort==5.12.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:8bef7dde241278824a6d83f44a544709b065191b95b6e50894bdc722fcba0504 

--hash=sha256:f84c2818376e66cf843d497486ea8fed8700b340f308f076c6fb1229dff318b6
loguru==0.7.2 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:003d71e3d3ed35f0f8984898359d65b79e5b21943f78af86aa5491210429b8eb 

--hash=sha256:e671a53522515f34fd406340ee968cb9ecafbc4b36c679da03c18fd8d0bd51ac
mypy-extensions==1.0.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d 

--hash=sha256:75dbf8955dc00442a438fc4d0666508a9a97b6bd41aa2f0ffe9d2f2725af0782
packaging==23.1 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:994793af429502c4ea2ebf6bf664629d07c1a9fe974af92966e4b8d2df7edc61 

--hash=sha256:a392980d2b6cffa644431898be54b0045151319d1e7ec34f0cfed48767dd334f
passlib==1.7.4 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:aa6bca462b8d8bda89c70b382f0c298a20b5560af6cbfa2dce410c0a2fb669f1 

--hash=sha256:defd50f72b65c5402ab2c573830a6978e5f202ad0d984793c8dde2c4152ebe04
pathspec==0.11.2 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:1d6ed233af05e679efb96b1851550ea95bbb64b7c490b0f5aa52996c11e92a20 

--hash=sha256:e0d8d0ac2f12da61956eb2306b69f9469b42f4deb0f3cb6ed47b9cce9996ced3
platformdirs==3.10.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:b45696dab2d7cc691a3226759c0d3b00c47c8b6e293d96f6436f733303f77f6d 

--hash=sha256:d7c24979f292f916dc9cbf8648319032f551ea8c49a4c9bf2fb556a02070ec1d
pycparser==2.21 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9 

--hash=sha256:e644fdec12f7872f86c58ff790da456218b10f863970249516d60a5eaca77206
pydantic-core==2.6.3 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:002d0ea50e17ed982c2d65b480bd975fc41086a5a2f9c924ef8fc54419d1dea3 

--hash=sha256:02e1c385095efbd997311d85c6021d32369675c09bcbfff3b69d84e59dc103f6 

--hash=sha256:046af9cfb5384f3684eeb3f58a48698ddab8dd870b4b3f67f825353a14441418 

--hash=sha256:04fe5c0a43dec39aedba0ec9579001061d4653a9b53a1366b113aca4a3c05ca7 

--hash=sha256:07a1aec07333bf5adebd8264047d3dc518563d92aca6f2f5b36f505132399efc 

--hash=sha256:1480fa4682e8202b560dcdc9eeec1005f62a15742b813c88cdc01d44e85308e5 

--hash=sha256:1508f37ba9e3ddc0189e6ff4e2228bd2d3c3a4641cbe8c07177162f76ed696c7 

--hash=sha256:171a4718860790f66d6c2eda1d95dd1edf64f864d2e9f9115840840cf5b5713f 

--hash=sha256:19e20f8baedd7d987bd3f8005c146e6bcbda7cdeefc36fad50c66adb2dd2da48 

--hash=sha256:1a0ddaa723c48af27d19f27f1c73bdc615c73686d763388c8683fe34ae777bad 

--hash=sha256:1aa712ba150d5105814e53cb141412217146fedc22621e9acff9236d77d2a5ef 

--hash=sha256:1ac1750df1b4339b543531ce793b8fd5c16660a95d13aecaab26b44ce11775e9 

--hash=sha256:1c721bfc575d57305dd922e6a40a8fe3f762905851d694245807a351ad255c58 

--hash=sha256:1ce8c84051fa292a5dc54018a40e2a1926fd17980a9422c973e3ebea017aa8da 

--hash=sha256:1fa1f6312fb84e8c281f32b39affe81984ccd484da6e9d65b3d18c202c666149 

--hash=sha256:22134a4453bd59b7d1e895c455fe277af9d9d9fbbcb9dc3f4a97b8693e7e2c9b 

--hash=sha256:23470a23614c701b37252618e7851e595060a96a23016f9a084f3f92f5ed5881 

--hash=sha256:240a015102a0c0cc8114f1cba6444499a8a4d0333e178bc504a5c2196defd456 

--hash=sha256:252851b38bad3bfda47b104ffd077d4f9604a10cb06fe09d020016a25107bf98 

--hash=sha256:2a20c533cb80466c1d42a43a4521669ccad7cf2967830ac62c2c2f9cece63e7e 

--hash=sha256:2dd50d6a1aef0426a1d0199190c6c43ec89812b1f409e7fe44cb0fbf6dfa733c 

--hash=sha256:340e96c08de1069f3d022a85c2a8c63529fd88709468373b418f4cf2c949fb0e 

--hash=sha256:3796a6152c545339d3b1652183e786df648ecdf7c4f9347e1d30e6750907f5bb 

--hash=sha256:37a822f630712817b6ecc09ccc378192ef5ff12e2c9bae97eb5968a6cdf3b862 

--hash=sha256:3a750a83b2728299ca12e003d73d1264ad0440f60f4fc9cee54acc489249b728 

--hash=sha256:3c8945a105f1589ce8a693753b908815e0748f6279959a4530f6742e1994dcb6 

--hash=sha256:3ccc13afee44b9006a73d2046068d4df96dc5b333bf3509d9a06d1b42db6d8bf 

--hash=sha256:3f90e5e3afb11268628c89f378f7a1ea3f2fe502a28af4192e30a6cdea1e7d5e 

--hash=sha256:4292ca56751aebbe63a84bbfc3b5717abb09b14d4b4442cc43fd7c49a1529efd 

--hash=sha256:430ddd965ffd068dd70ef4e4d74f2c489c3a313adc28e829dd7262cc0d2dd1e8 

--hash=sha256:439a0de139556745ae53f9cc9668c6c2053444af940d3ef3ecad95b079bc9987 

--hash=sha256:44b4f937b992394a2e81a5c5ce716f3dcc1237281e81b80c748b2da6dd5cf29a 

--hash=sha256:48c1ed8b02ffea4d5c9c220eda27af02b8149fe58526359b3c07eb391cb353a2 

--hash=sha256:4ef724a059396751aef71e847178d66ad7fc3fc969a1a40c29f5aac1aa5f8784 

--hash=sha256:50555ba3cb58f9861b7a48c493636b996a617db1a72c18da4d7f16d7b1b9952b 

--hash=sha256:522a9c4a4d1924facce7270c84b5134c5cabcb01513213662a2e89cf28c1d309 

--hash=sha256:5493a7027bfc6b108e17c3383959485087d5942e87eb62bbac69829eae9bc1f7 

--hash=sha256:56ea80269077003eaa59723bac1d8bacd2cd15ae30456f2890811efc1e3d4413 

--hash=sha256:5a2a3c9ef904dcdadb550eedf3291ec3f229431b0084666e2c2aa8ff99a103a2 

--hash=sha256:5cfde4fab34dd1e3a3f7f3db38182ab6c95e4ea91cf322242ee0be5c2f7e3d2f 

--hash=sha256:5e4a2cf8c4543f37f5dc881de6c190de08096c53986381daebb56a355be5dfe6 

--hash=sha256:5e9c068f36b9f396399d43bfb6defd4cc99c36215f6ff33ac8b9c14ba15bdf6b 

--hash=sha256:5ed7ceca6aba5331ece96c0e328cd52f0dcf942b8895a1ed2642de50800b79d3 

--hash=sha256:5fa159b902d22b283b680ef52b532b29554ea2a7fc39bf354064751369e9dbd7 

--hash=sha256:615a31b1629e12445c0e9fc8339b41aaa6cc60bd53bf802d5fe3d2c0cda2ae8d 

--hash=sha256:621afe25cc2b3c4ba05fff53525156d5100eb35c6e5a7cf31d66cc9e1963e378 

--hash=sha256:6656a0ae383d8cd7cc94e91de4e526407b3726049ce8d7939049cbfa426518c8 

--hash=sha256:672174480a85386dd2e681cadd7d951471ad0bb028ed744c895f11f9d51b9ebe 

--hash=sha256:692b4ff5c4e828a38716cfa92667661a39886e71136c97b7dac26edef18767f7 

--hash=sha256:6bcc1ad776fffe25ea5c187a028991c031a00ff92d012ca1cc4714087e575973 

--hash=sha256:6bf7d610ac8f0065a286002a23bcce241ea8248c71988bda538edcc90e0c39ad 

--hash=sha256:75c0ebbebae71ed1e385f7dfd9b74c1cff09fed24a6df43d326dd7f12339ec34 

--hash=sha256:788be9844a6e5c4612b74512a76b2153f1877cd845410d756841f6c3420230eb 

--hash=sha256:7dc2ce039c7290b4ef64334ec7e6ca6494de6eecc81e21cb4f73b9b39991408c 

--hash=sha256:813aab5bfb19c98ae370952b6f7190f1e28e565909bfc219a0909db168783465 

--hash=sha256:8421cf496e746cf8d6b677502ed9a0d1e4e956586cd8b221e1312e0841c002d5 

--hash=sha256:84e87c16f582f5c753b7f39a71bd6647255512191be2d2dbf49458c4ef024588 

--hash=sha256:84f8bb34fe76c68c9d96b77c60cef093f5e660ef8e43a6cbfcd991017d375950 

--hash=sha256:85cc4d105747d2aa3c5cf3e37dac50141bff779545ba59a095f4a96b0a460e70 

--hash=sha256:883daa467865e5766931e07eb20f3e8152324f0adf52658f4d302242c12e2c32 

--hash=sha256:8b2b1bfed698fa410ab81982f681f5b1996d3d994ae8073286515ac4d165c2e7 

--hash=sha256:8ecbac050856eb6c3046dea655b39216597e373aa8e50e134c0e202f9c47efec 

--hash=sha256:930bfe73e665ebce3f0da2c6d64455098aaa67e1a00323c74dc752627879fc67 

--hash=sha256:9616567800bdc83ce136e5847d41008a1d602213d024207b0ff6cab6753fe645 

--hash=sha256:9680dd23055dd874173a3a63a44e7f5a13885a4cfd7e84814be71be24fba83db 

--hash=sha256:99faba727727b2e59129c59542284efebbddade4f0ae6a29c8b8d3e1f437beb7 

--hash=sha256:9a718d56c4d55efcfc63f680f207c9f19c8376e5a8a67773535e6f7e80e93170 

--hash=sha256:9b33bf9658cb29ac1a517c11e865112316d09687d767d7a0e4a63d5c640d1b17 

--hash=sha256:9e8b374ef41ad5c461efb7a140ce4730661aadf85958b5c6a3e9cf4e040ff4bb 

--hash=sha256:9e9b65a55bbabda7fccd3500192a79f6e474d8d36e78d1685496aad5f9dbd92c 

--hash=sha256:a0b7486d85293f7f0bbc39b34e1d8aa26210b450bbd3d245ec3d732864009819 

--hash=sha256:a53e3195f134bde03620d87a7e2b2f2046e0e5a8195e66d0f244d6d5b2f6d31b 

--hash=sha256:a87c54e72aa2ef30189dc74427421e074ab4561cf2bf314589f6af5b37f45e6d 

--hash=sha256:a892b5b1871b301ce20d40b037ffbe33d1407a39639c2b05356acfef5536d26a 

--hash=sha256:a8acc9dedd304da161eb071cc7ff1326aa5b66aadec9622b2574ad3ffe225525 

--hash=sha256:aaafc776e5edc72b3cad1ccedb5fd869cc5c9a591f1213aa9eba31a781be9ac1 

--hash=sha256:acafc4368b289a9f291e204d2c4c75908557d4f36bd3ae937914d4529bf62a76 

--hash=sha256:b0a5d7edb76c1c57b95df719af703e796fc8e796447a1da939f97bfa8a918d60 

--hash=sha256:b25afe9d5c4f60dcbbe2b277a79be114e2e65a16598db8abee2a2dcde24f162b 

--hash=sha256:b44c42edc07a50a081672e25dfe6022554b47f91e793066a7b601ca290f71e42 

--hash=sha256:b594b64e8568cf09ee5c9501ede37066b9fc41d83d58f55b9952e32141256acd 

--hash=sha256:b962700962f6e7a6bd77e5f37320cabac24b4c0f76afeac05e9f93cf0c620014 

--hash=sha256:bb128c30cf1df0ab78166ded1ecf876620fb9aac84d2413e8ea1594b588c735d 

--hash=sha256:bf9d42a71a4d7a7c1f14f629e5c30eac451a6fc81827d2beefd57d014c006c4a 

--hash=sha256:c6595b0d8c8711e8e1dc389d52648b923b809f68ac1c6f0baa525c6440aa0daa 

--hash=sha256:c8c6660089a25d45333cb9db56bb9e347241a6d7509838dbbd1931d0e19dbc7f 

--hash=sha256:c9d469204abcca28926cbc28ce98f28e50e488767b084fb3fbdf21af11d3de26 

--hash=sha256:d38bbcef58220f9c81e42c255ef0bf99735d8f11edef69ab0b499da77105158a 

--hash=sha256:d4eb77df2964b64ba190eee00b2312a1fd7a862af8918ec70fc2d6308f76ac64 

--hash=sha256:d63b7545d489422d417a0cae6f9898618669608750fc5e62156957e609e728a5 

--hash=sha256:d7050899026e708fb185e174c63ebc2c4ee7a0c17b0a96ebc50e1f76a231c057 

--hash=sha256:d79f1f2f7ebdb9b741296b69049ff44aedd95976bfee38eb4848820628a99b50 

--hash=sha256:d85463560c67fc65cd86153a4975d0b720b6d7725cf7ee0b2d291288433fc21b 

--hash=sha256:d9140ded382a5b04a1c030b593ed9bf3088243a0a8b7fa9f071a5736498c5483 

--hash=sha256:d9b4916b21931b08096efed090327f8fe78e09ae8f5ad44e07f5c72a7eedb51b 

--hash=sha256:df14f6332834444b4a37685810216cc8fe1fe91f447332cd56294c984ecbff1c 

--hash=sha256:e49ce7dc9f925e1fb010fc3d555250139df61fa6e5a0a95ce356329602c11ea9 

--hash=sha256:e61eae9b31799c32c5f9b7be906be3380e699e74b2db26c227c50a5fc7988698 

--hash=sha256:ea053cefa008fda40f92aab937fb9f183cf8752e41dbc7bc68917884454c6362 

--hash=sha256:f06e21ad0b504658a3a9edd3d8530e8cea5723f6ea5d280e8db8efc625b47e49 

--hash=sha256:f14546403c2a1d11a130b537dda28f07eb6c1805a43dae4617448074fd49c282 

--hash=sha256:f1a5d8f18877474c80b7711d870db0eeef9442691fcdb00adabfc97e183ee0b0 

--hash=sha256:f2969e8f72c6236c51f91fbb79c33821d12a811e2a94b7aa59c65f8dbdfad34a 

--hash=sha256:f468d520f47807d1eb5d27648393519655eadc578d5dd862d06873cce04c4d1b 

--hash=sha256:f70dc00a91311a1aea124e5f64569ea44c011b58433981313202c46bccbec0e1 

--hash=sha256:f93255b3e4d64785554e544c1c76cd32f4a354fa79e2eeca5d16ac2e7fdd57aa
pydantic-settings==2.0.3 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:962dc3672495aad6ae96a4390fac7e593591e144625e5112d359f8f67fb75945 

--hash=sha256:ddd907b066622bd67603b75e2ff791875540dc485b7307c4fffc015719da8625
pydantic==2.3.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:1607cc106602284cd4a00882986570472f193fde9cb1259bceeaedb26aa79a6d 

--hash=sha256:45b5e446c6dfaad9444819a293b921a40e1db1aa61ea08aede0522529ce90e81
pyjwt==2.8.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:57e28d156e3d5c10088e0c68abb90bfac3df82b40a71bd0daa20c65ccd5c23de 

--hash=sha256:59127c392cc44c2da5bb3192169a91f429924e17aff6534d70fdc02ab3e04320
pypika-tortoise==0.1.6 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:2d68bbb7e377673743cff42aa1059f3a80228d411fbcae591e4465e173109fd8 

--hash=sha256:d802868f479a708e3263724c7b5719a26ad79399b2a70cea065f4a4cadbebf36
python-dotenv==1.0.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:a8df96034aae6d2d50a4ebe8216326c61c3eb64836776504fcca410e5937a3ba 

--hash=sha256:f5971a9226b701070a4bf2c38c89e5a3f0d64de8debda981d1db98583009122a
pytz==2023.3.post1 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:7b4fddbeb94a1eba4b557da24f19fdf9db575192544270a9101d8509f9f43d7b 

--hash=sha256:ce42d816b81b68506614c11e8937d3aa9e41007ceb50bfdcb0749b921bf646c7
ruff==0.0.281 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:0162b149a94f6007768820bcdf4ccb7e90a21655aac829ace49f4682d0565fdb 

--hash=sha256:24d0defeb2c6a1b16a4230840d1138e08bc4ef2318496fa6ff7ddbf3a443626f 

--hash=sha256:29a22b7a6433ce0b4e601897e8a5dd58a75c75c01afee9b8922ebbdd1fe51e51 

--hash=sha256:2ccb875a4000bcba6cc61cb9d3cd5969d6b0921b5234f0ef99ad75f74e8935ef 

--hash=sha256:418fbddfd3dba4d7b11e4e016eacc40d321ff0b7d3637c7ba9ad3ee0474c9a35 

--hash=sha256:42a92a62fc841f7444821444553fd6e1e700bb55348f24e8ec39afdd4e3d0312 

--hash=sha256:54bab7128167057ee5987bbd9f925fbf105071068de9d8474ca7c38f684b8463 

--hash=sha256:6d34cae6ef6c6b6fd6d4f09271fbf635db49e6b788da1b2e1dea11a29f1c2a11 

--hash=sha256:70f921438bf09f04c0547cf64c137c87ef33cbec2b64be12b8caa87df261a016 

--hash=sha256:7b781f6a7ed35196e6565ed32f57d07b852b0dcd7158c6c7669c8b5d0f8cf97a 

--hash=sha256:7f5b8ccaabad61e2d50494df820b7bafd94eac13f10d2d8b831994c1618801a9 

--hash=sha256:ae0b836c03a7010527bb56384a4e3718e0958e32bea64459879aacdcb65c4945 

--hash=sha256:bab2cdfa78754315cccc2b4d46ad6181aabb29e89747a3b135a4b85e11baa025 

--hash=sha256:c086bf3968d5cb2b4f31a586fc73bc42cb688c32f4c992ff161d4ce19f551cf2 

--hash=sha256:cbf279fd9c2ca674896656df2d82831010afd336a6703a060fe08d6f2358e47b 

--hash=sha256:dd3c94260a148e955fb46f41d4bcecd857c75794e9f06ebfa7f9be65cfed9621 

--hash=sha256:f3495175e6d85a01d3da409a079461a5a3c15b70237cc82550ad8c1f091002c8
sniffio==1.3.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:e60305c5e5d314f5389259b7f22aaa33d8f7dee49763119234af3755c55b9101 

--hash=sha256:eecefdce1e5bbfb7ad2eeaabf7c1eeb404d7757c379bd1f7e5cce9d8bf425384
starlette==0.27.0 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:6a6b0d042acb8d469a01eba54e9cda6cbd24ac602c4cd016723117d6a7e73b75 

--hash=sha256:918416370e846586541235ccd38a474c08b80443ed31c578a418e2209b3eef91
tortoise-orm==0.19.3 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:9e368820c70a0866ef9c521d43aa5503485bd7a20a561edc0933b7b0f7036fbc 

--hash=sha256:ca574bca5191f55608f9013314b1f5d1c6ffd4165a1fcc2f60f6c902f529b3b6
typing-extensions==4.7.1 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:440d5dd3af93b060174bf433bccd69b0babc3b15b1a8dca43789fd7f61514b36 

--hash=sha256:b75ddc264f0ba5615db7ba217daeb99701ad295353c45f9e95963337ceeeffb2
uvicorn==0.23.2 ; python_version >= "3.11" and python_version < "4.0" 

--hash=sha256:1f9be6558f01239d4fdf22ef8126c39cb1ad0addf76c40e760549d2c2f43ab53 

--hash=sha256:4d3cc12d7727ba72b64d12d3cc7743124074c0a69f7b201512fc50c3e3f1569a
win32-setctime==1.1.0 ; python_version >= "3.11" and python_version < "4.0" and sys_platform == "win32" 

--hash=sha256:15cf5750465118d6929ae4de4eb46e8edae9a5634350c01ba582df868e932cb2 

--hash=sha256:231db239e959c2fe7eb1d7dc129f11172354f98361c4fa2d6d2d7e278baa8aad

用户: tzy
时间: 2024-01-21T03:25:46.005Z
消息: 我在导出的时候出现下面的情况，怎么解决？
poetry export -f requirements.txt
/Users/tzy/Library/Python/3.9/lib/python/site-packages/urllib3/init.py:34: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020
warnings.warn(
Warning: In a future version of Poetry, PyPI will be disabled automatically if at least one custom primary source is configured. In order to avoid a breaking change and make your pyproject.toml forward compatible, add PyPI explicitly via 'poetry source add pypi'. By the way, this has the advantage that you can set the priority of PyPI as with any other source.
Warning: poetry-plugin-export will not be installed by default in a future version of Poetry.
In order to avoid a breaking change and make your automation forward-compatible, please install poetry-plugin-export explicitly. See https://python-poetry.org/docs/plugins/#using-plugins for details on how to install a plugin.
To disable this warning run 'poetry config warnings.export false'.
--extra-index-url https://pypi.tuna.tsinghua.edu.cn/simple

aiosqlite==0.17.0 ; python_version >= "3.11" and python_version < "4.0"

--hash=sha256:6c49dc6d3405929b1d08eeccc72306d3677503cc5e5e43771efc1e00232e8231

--hash=sha256:f0e6acc24bc4864149267ac82fb46dfb3be4455f99fe21df82609cc6e6baee51
annotated-types==0.5.0 ; python_version >= "3.11" and python_version < "4.0"

用户: tzy
时间: 2024-01-21T05:21:48.191Z
消息: 这个工程https://github.com/mizhexiaoxiao/vue-fastapi-admin?tab=readme-ov-file的api目录下是后端代码，请告诉我它是如何连接数据库的

用户: tzy
时间: 2024-01-21T05:22:11.883Z
消息: 这个工程https://github.com/mizhexiaoxiao/vue-fastapi-admin?tab=readme-ov-file，它的api目录下是后端代码，请告诉我它是如何连接数据库的


用户: tzy
时间: 2024-01-21T05:22:32.226Z
消息: tortoise包是干什么的

用户: tzy
时间: 2024-01-21T05:22:55.890Z
消息: python如何通过tortoise包连接数据库，并操作数据库？

用户: tzy
时间: 2024-01-21T05:25:16.763Z
消息: 这两句是什么意思：    id = fields.IntField(pk=True)
    username = fields.CharField(max_length=50)

用户: tzy
时间: 2024-01-21T05:38:39.907Z
消息: 下面的代码，是如何连接数据库的？from datetime import datetime

from tortoise import fields, models

from app.settings import settings


class BaseModel(models.Model):
    id = fields.BigIntField(pk=True, index=True)

    async def to_dict(self, m2m: bool = False, exclude_fields: list[str] | None = None):
        if exclude_fields is None:
            exclude_fields = []

        d = {}
        for field in self._meta.db_fields:
            if field not in exclude_fields:
                value = getattr(self, field)
                if isinstance(value, datetime):
                    value = value.strftime(settings.DATETIME_FORMAT)
                d[field] = value
        if m2m:
            for field in self._meta.m2m_fields:
                if field not in exclude_fields:
                    values = [value for value in await getattr(self, field).all().values()]
                    for value in values:
                        value.update(
                            (k, v.strftime(settings.DATETIME_FORMAT))
                            for k, v in value.items()
                            if isinstance(v, datetime)
                        )
                    d[field] = values
        return d

    class Meta:
        abstract = True


class UUIDModel:
    uuid = fields.UUIDField(unique=True, pk=False)


class TimestampMixin:
    created_at = fields.DatetimeField(auto_now_add=True)
    updated_at = fields.DatetimeField(auto_now=True)


用户: tzy
时间: 2024-01-21T05:41:35.184Z
消息: 详细告诉我，它是如何连接数据库的？

用户: tzy
时间: 2024-01-21T05:42:04.851Z
消息: 贴出代码，详细说明给我！

用户: tzy
时间: 2024-01-21T05:50:21.393Z
消息: 下面代码的$t是什么意思？

用户: tzy
时间: 2024-01-21T05:50:41.042Z
消息: 下面代码的$t是什么意思？<script setup>
import { ref } from 'vue'
import { NButton, NForm, NFormItem, NInput, NTabPane, NTabs, NImage } from 'naive-ui'
import { useI18n } from 'vue-i18n'
import CommonPage from '@/components/page/CommonPage.vue'
import { useUserStore } from '@/store'
import api from '@/api'
import { is } from '~/src/utils'

const { t } = useI18n()
const userStore = useUserStore()
const isLoading = ref(false)

// 用户信息的表单
const infoFormRef = ref(null)
const infoForm = ref({
  avatar: userStore.avatar,
  username: userStore.name,
  email: userStore.email,
})
async function updateProfile() {
  isLoading.value = true
  infoFormRef.value?.validate(async (err) => {
    if (err) return
    await api
      .updateUser({ ...infoForm.value, id: userStore.userId })
      .then(() => {
        userStore.setUserInfo(infoForm.value)
        isLoading.value = false
        $message.success(t('common.text.update_success'))
      })
      .catch(() => {
        isLoading.value = false
      })
  })
}
const infoFormRules = {
  username: [
    {
      required: true,
      message: t('views.profile.message_username_required'),
      trigger: ['input', 'blur', 'change'],
    },
  ],
}

// 修改密码的表单
const passwordFormRef = ref(null)
const passwordForm = ref({
  old_password: '',
  new_password: '',
  confirm_password: '',
})

async function updatePassword() {
  isLoading.value = true
  passwordFormRef.value?.validate(async (err) => {
    if (!err) {
      const data = { ...passwordForm.value, id: userStore.userId }
      await api
        .updatePassword(data)
        .then((res) => {
          $message.success(res.msg)
          passwordForm.value = {
            old_password: '',
            new_password: '',
            confirm_password: '',
          }
          isLoading.value = false
        })
        .catch(() => {
          isLoading.value = false
        })
    }
  })
}
const passwordFormRules = {
  old_password: [
    {
      required: true,
      message: t('views.profile.message_old_password_required'),
      trigger: ['input', 'blur', 'change'],
    },
  ],
  new_password: [
    {
      required: true,
      message: t('views.profile.message_new_password_required'),
      trigger: ['input', 'blur', 'change'],
    },
  ],
  confirm_password: [
    {
      required: true,
      message: t('views.profile.message_password_confirmation_required'),
      trigger: ['input', 'blur'],
    },
    {
      validator: validatePasswordStartWith,
      message: t('views.profile.message_password_confirmation_diff'),
      trigger: 'input',
    },
    {
      validator: validatePasswordSame,
      message: t('views.profile.message_password_confirmation_diff'),
      trigger: ['blur', 'password-input'],
    },
  ],
}
function validatePasswordStartWith(rule, value) {
  return (
    !!passwordForm.value.new_password &&
    passwordForm.value.new_password.startsWith(value) &&
    passwordForm.value.new_password.length >= value.length
  )
}
function validatePasswordSame(rule, value) {
  return value === passwordForm.value.new_password
}
</script>

<template>
  <CommonPage :show-header="false">
    <NTabs type="line" animated>
      <NTabPane name="website" :tab="$t('views.profile.label_modify_information')">
        <div class="m-30 flex items-center">
          <NForm
            ref="infoFormRef"
            label-placement="left"
            label-align="left"
            label-width="100"
            :model="infoForm"
            :rules="infoFormRules"
            class="w-400"
          >
            <NFormItem :label="$t('views.profile.label_avatar')" path="avatar">
              <NImage width="100" :src="infoForm.avatar"></NImage>
            </NFormItem>
            <NFormItem :label="$t('views.profile.label_username')" path="username">
              <NInput
                v-model:value="infoForm.username"
                type="text"
                :placeholder="$t('views.profile.placeholder_username')"
              />
            </NFormItem>
            <NFormItem :label="$t('views.profile.label_email')" path="email">
              <NInput
                v-model:value="infoForm.email"
                type="text"
                :placeholder="$t('views.profile.placeholder_email')"
              />
            </NFormItem>
            <NButton type="primary" :loading="isLoading" @click="updateProfile">
              {{ $t('common.buttons.update') }}
            </NButton>
          </NForm>
        </div>
      </NTabPane>
      <NTabPane name="contact" :tab="$t('views.profile.label_change_password')">
        <NForm
          ref="passwordFormRef"
          label-placement="left"
          label-align="left"
          :model="passwordForm"
          label-width="200"
          :rules="passwordFormRules"
          class="m-30 w-500"
        >
          <NFormItem :label="$t('views.profile.label_old_password')" path="old_password">
            <NInput
              v-model:value="passwordForm.old_password"
              type="password"
              show-password-on="mousedown"
              :placeholder="$t('views.profile.placeholder_old_password')"
            />
          </NFormItem>
          <NFormItem :label="$t('views.profile.label_new_password')" path="new_password">
            <NInput
              v-model:value="passwordForm.new_password"
              :disabled="!passwordForm.old_password"
              type="password"
              show-password-on="mousedown"
              :placeholder="$t('views.profile.placeholder_new_password')"
            />
          </NFormItem>
          <NFormItem :label="$t('views.profile.label_confirm_password')" path="confirm_password">
            <NInput
              v-model:value="passwordForm.confirm_password"
              :disabled="!passwordForm.new_password"
              type="password"
              show-password-on="mousedown"
              :placeholder="$t('views.profile.placeholder_confirm_password')"
            />
          </NFormItem>
          <NButton type="primary" :loading="isLoading" @click="updatePassword">
            {{ $t('common.buttons.update') }}
          </NButton>
        </NForm>
      </NTabPane>
    </NTabs>
  </CommonPage>
</template>


用户: tzy
时间: 2024-01-21T05:50:55.212Z
消息: 下面代码的$t是什么意思？<script setup>
import { ref } from 'vue'
import { NButton, NForm, NFormItem, NInput, NTabPane, NTabs, NImage } from 'naive-ui'
import { useI18n } from 'vue-i18n'
import CommonPage from '@/components/page/CommonPage.vue'
import { useUserStore } from '@/store'
import api from '@/api'
import { is } from '~/src/utils'

const { t } = useI18n()
const userStore = useUserStore()
const isLoading = ref(false)

// 用户信息的表单
const infoFormRef = ref(null)
const infoForm = ref({
avatar: userStore.avatar,
username: userStore.name,
email: userStore.email,
})
async function updateProfile() {
isLoading.value = true
infoFormRef.value?.validate(async (err) => {
if (err) return
await api
.updateUser({ ...infoForm.value, id: userStore.userId })
.then(() => {
userStore.setUserInfo(infoForm.value)
isLoading.value = false
$message.success(t('common.text.update_success'))
})
.catch(() => {
isLoading.value = false
})
})
}
const infoFormRules = {
username: [
{
required: true,
message: t('views.profile.message_username_required'),
trigger: ['input', 'blur', 'change'],
},
],
}

// 修改密码的表单
const passwordFormRef = ref(null)
const passwordForm = ref({
old_password: '',
new_password: '',
confirm_password: '',
})

async function updatePassword() {
isLoading.value = true
passwordFormRef.value?.validate(async (err) => {
if (!err) {
const data = { ...passwordForm.value, id: userStore.userId }
await api
.updatePassword(data)
.then((res) => {
$message.success(res.msg)
passwordForm.value = {
old_password: '',
new_password: '',
confirm_password: '',
}
isLoading.value = false
})
.catch(() => {
isLoading.value = false
})
}
})
}
const passwordFormRules = {
old_password: [
{
required: true,
message: t('views.profile.message_old_password_required'),
trigger: ['input', 'blur', 'change'],
},
],
new_password: [
{
required: true,
message: t('views.profile.message_new_password_required'),
trigger: ['input', 'blur', 'change'],
},
],
confirm_password: [
{
required: true,
message: t('views.profile.message_password_confirmation_required'),
trigger: ['input', 'blur'],
},
{
validator: validatePasswordStartWith,
message: t('views.profile.message_password_confirmation_diff'),
trigger: 'input',
},
{
validator: validatePasswordSame,
message: t('views.profile.message_password_confirmation_diff'),
trigger: ['blur', 'password-input'],
},
],
}
function validatePasswordStartWith(rule, value) {
return (
!!passwordForm.value.new_password &&
passwordForm.value.new_password.startsWith(value) &&
passwordForm.value.new_password.length >= value.length
)
}
function validatePasswordSame(rule, value) {
return value === passwordForm.value.new_password
}
</script>

<template>
<CommonPage :show-header="false">
<NTabs type="line" animated>
<NTabPane name="website" :tab="
�
(
′
�
�
�
�
�
.
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
′
)
"
>
<
�
�
�
�
�
�
�
�
=
"
�
−
30
�
�
�
�
�
�
�
�
�
−
�
�
�
�
�
�
"
>
<
�
�
�
�
�
�
�
�
=
"
�
�
�
�
�
�
�
�
�
�
�
"
�
�
�
�
�
−
�
�
�
�
�
�
�
�
�
=
"
�
�
�
�
"
�
�
�
�
�
−
�
�
�
�
�
=
"
�
�
�
�
"
�
�
�
�
�
−
�
�
�
�
ℎ
=
"
100
"
:
�
�
�
�
�
=
"
�
�
�
�
�
�
�
�
"
:
�
�
�
�
�
=
"
�
�
�
�
�
�
�
�
�
�
�
�
�
"
�
�
�
�
�
=
"
�
−
400
"
>
<
�
�
�
�
�
�
�
�
�
:
�
�
�
�
�
=
"
t( 
′
 views.profile.label 
m
​
 odify 
i
​
 nformation 
′
 )"><divclass="m−30flexitems−center"><NFormref="infoFormRef"label−placement="left"label−align="left"label−width="100":model="infoForm":rules="infoFormRules"class="w−400"><NFormItem:label="t('views.profile.label_avatar')" path="avatar">
<NImage width="100" :src="infoForm.avatar"></NImage>
</NFormItem>
<NFormItem :label="
�
(
′
�
�
�
�
�
.
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
�
�
�
�
�
′
)
"
�
�
�
ℎ
=
"
�
�
�
�
�
�
�
�
"
>
<
�
�
�
�
�
�
�
−
�
�
�
�
�
:
�
�
�
�
�
=
"
�
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
"
�
�
�
�
=
"
�
�
�
�
"
:
�
�
�
�
�
ℎ
�
�
�
�
�
=
"
t( 
′
 views.profile.label 
u
​
 sername 
′
 )"path="username"><NInputv−model:value="infoForm.username"type="text":placeholder="t('views.profile.placeholder_username')"
/>
</NFormItem>
<NFormItem :label="
�
(
′
�
�
�
�
�
.
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
�
�
′
)
"
�
�
�
ℎ
=
"
�
�
�
�
�
"
>
<
�
�
�
�
�
�
�
−
�
�
�
�
�
:
�
�
�
�
�
=
"
�
�
�
�
�
�
�
�
.
�
�
�
�
�
"
�
�
�
�
=
"
�
�
�
�
"
:
�
�
�
�
�
ℎ
�
�
�
�
�
=
"
t( 
′
 views.profile.label 
e
​
 mail 
′
 )"path="email"><NInputv−model:value="infoForm.email"type="text":placeholder="t('views.profile.placeholder_email')"
/>
</NFormItem>
<NButton type="primary" :loading="isLoading" @click="updateProfile">
{{ t('common.buttons.update') }}
            </NButton>
          </NForm>
        </div>
      </NTabPane>
      <NTabPane name="contact" :tab="t('views.profile.label_change_password')">
<NForm
ref="passwordFormRef"
label-placement="left"
label-align="left"
:model="passwordForm"
label-width="200"
:rules="passwordFormRules"
class="m-30 w-500"
>
<NFormItem :label="
�
(
′
�
�
�
�
�
.
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
′
)
"
�
�
�
ℎ
=
"
�
�
�
�
�
�
�
�
�
�
�
"
>
<
�
�
�
�
�
�
�
−
�
�
�
�
�
:
�
�
�
�
�
=
"
�
�
�
�
�
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
�
�
�
"
�
�
�
�
=
"
�
�
�
�
�
�
�
�
"
�
ℎ
�
�
−
�
�
�
�
�
�
�
�
−
�
�
=
"
�
�
�
�
�
�
�
�
�
"
:
�
�
�
�
�
ℎ
�
�
�
�
�
=
"
t( 
′
 views.profile.label 
o
​
 ld 
p
​
 assword 
′
 )"path="old 
p
​
 assword"><NInputv−model:value="passwordForm.old 
p
​
 assword"type="password"show−password−on="mousedown":placeholder="t('views.profile.placeholder_old_password')"
/>
</NFormItem>
<NFormItem :label="
�
(
′
�
�
�
�
�
.
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
′
)
"
�
�
�
ℎ
=
"
�
�
�
�
�
�
�
�
�
�
�
"
>
<
�
�
�
�
�
�
�
−
�
�
�
�
�
:
�
�
�
�
�
=
"
�
�
�
�
�
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
�
�
�
"
:
�
�
�
�
�
�
�
�
=
"
!
�
�
�
�
�
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
�
�
�
"
�
�
�
�
=
"
�
�
�
�
�
�
�
�
"
�
ℎ
�
�
−
�
�
�
�
�
�
�
�
−
�
�
=
"
�
�
�
�
�
�
�
�
�
"
:
�
�
�
�
�
ℎ
�
�
�
�
�
=
"
t( 
′
 views.profile.label 
n
​
 ew 
p
​
 assword 
′
 )"path="new 
p
​
 assword"><NInputv−model:value="passwordForm.new 
p
​
 assword":disabled="!passwordForm.old 
p
​
 assword"type="password"show−password−on="mousedown":placeholder="t('views.profile.placeholder_new_password')"
/>
</NFormItem>
<NFormItem :label="
�
(
′
�
�
�
�
�
.
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
′
)
"
�
�
�
ℎ
=
"
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
"
>
<
�
�
�
�
�
�
�
−
�
�
�
�
�
:
�
�
�
�
�
=
"
�
�
�
�
�
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
�
�
�
�
�
�
�
"
:
�
�
�
�
�
�
�
�
=
"
!
�
�
�
�
�
�
�
�
�
�
�
�
.
�
�
�
�
�
�
�
�
�
�
�
"
�
�
�
�
=
"
�
�
�
�
�
�
�
�
"
�
ℎ
�
�
−
�
�
�
�
�
�
�
�
−
�
�
=
"
�
�
�
�
�
�
�
�
�
"
:
�
�
�
�
�
ℎ
�
�
�
�
�
=
"
t( 
′
 views.profile.label 
c
​
 onfirm 
p
​
 assword 
′
 )"path="confirm 
p
​
 assword"><NInputv−model:value="passwordForm.confirm 
p
​
 assword":disabled="!passwordForm.new 
p
​
 assword"type="password"show−password−on="mousedown":placeholder="t('views.profile.placeholder_confirm_password')"
/>
</NFormItem>
<NButton type="primary" :loading="isLoading" @click="updatePassword">
{{ $t('common.buttons.update') }}
</NButton>
</NForm>
</NTabPane>
</NTabs>
</CommonPage>
</template>

用户: tzy
时间: 2024-01-21T06:07:37.026Z
消息: make run 是怎么启动python工程的？# Build configuration
# -------------------

APP_NAME := `sed -n 's/^ *name.*=.*"\([^"]*\)".*/\1/p' pyproject.toml`
APP_VERSION := `sed -n 's/^ *version.*=.*"\([^"]*\)".*/\1/p' pyproject.toml`
GIT_REVISION = `git rev-parse HEAD`

# Introspection targets
# ---------------------

.PHONY: help
help: header targets

.PHONY: header
header:
	@echo "\033[34mEnvironment\033[0m"
	@echo "\033[34m---------------------------------------------------------------\033[0m"
	@printf "\033[33m%-23s\033[0m" "APP_NAME"
	@printf "\033[35m%s\033[0m" $(APP_NAME)
	@echo ""
	@printf "\033[33m%-23s\033[0m" "APP_VERSION"
	@printf "\033[35m%s\033[0m" $(APP_VERSION)
	@echo ""
	@printf "\033[33m%-23s\033[0m" "GIT_REVISION"
	@printf "\033[35m%s\033[0m" $(GIT_REVISION)
	@echo "\n"

.PHONY: targets
targets:
	@echo "\033[34mDevelopment Targets\033[0m"
	@echo "\033[34m---------------------------------------------------------------\033[0m"
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-22s\033[0m %s\n", $$1, $$2}'

# Development targets
# -------------

.PHONY: install
install: ## Install dependencies
	poetry install

.PHONY: run
run: start

.PHONY: start
start: ## Starts the server
	poetry run python run.py

# Check, lint and format targets
# ------------------------------

.PHONY: check
check: check-format lint

.PHONY: check-format
check-format: ## Dry-run code formatter
	poetry run black ./ --check
	poetry run isort ./ --profile black --check

.PHONY: lint
lint: ## Run ruff
	poetry run ruff check ./app 
 
.PHONY: format
format: ## Run code formatter
	poetry run black ./
	poetry run isort ./ --profile black

.PHONY: check-lockfile
check-lockfile: ## Compares lock file with pyproject.toml
	poetry lock --check

.PHONY: test
test: ## Run the test suite
	$(eval include .env)
	$(eval export $(sh sed 's/=.*//' .env))

	poetry run pytest -vv -s --cache-clear ./

用户: tzy
时间: 2024-01-21T06:49:37.944Z
消息: 下面的代码有什么问题：<script setup>
import { h, onMounted, ref, resolveDirective, withDirectives } from 'vue'
import { NButton, NForm, NFormItem, NInput, NPopconfirm } from 'naive-ui'

import CommonPage from '@/components/page/CommonPage.vue'
import QueryBarItem from '@/components/query-bar/QueryBarItem.vue'
import CrudModal from '@/components/table/CrudModal.vue'
import CrudTable from '@/components/table/CrudTable.vue'
import TheIcon from '@/components/icon/TheIcon.vue'

import { renderIcon } from '@/utils'
import { useCRUD } from '@/composables'
// import { loginTypeMap, loginTypeOptions } from '@/constant/data'
import api from '@/api'

defineOptions({ name: 'Api列表' })

const $table = ref(null)
const queryItems = ref({})
const vPermission = resolveDirective('permission')

const {
  modalVisible,
  modalTitle,
  modalLoading,
  handleSave,
  modalForm,
  modalFormRef,
  handleEdit,
  handleDelete,
  handleAdd,
} = useCRUD({
  name: 'API',
  initForm: {},
  doCreate: api.createApi,
  doUpdate: api.updateApi,
  doDelete: api.deleteApi,
  refresh: () => $table.value?.handleSearch(),
})

const roleOption = ref([])

onMounted(() => {
  $table.value?.handleSearch()
  api.getRoleList({ page: 1, page_size: 9999 }).then((res) => (roleOption.value = res.data))
})

async function handleRefreshApi() {
  await $dialog.confirm({
    title: '提示',
    type: 'warning',
    content: '此操作会根据后端 app.routes 进行路由更新，确定继续刷新 API 操作？',
    async confirm() {
      await api.refreshApi()
      $message.success('刷新完成')
      $table.value?.handleSearch()
    },
  })
}

const addAPIRules = {
  path: [
    {
      required: true,
      message: '请输入API路径',
      trigger: ['input', 'blur', 'change'],
    },
  ],
  method: [
    {
      required: true,
      message: '请输入请求方式',
      trigger: ['input', 'blur', 'change'],
    },
  ],
  summary: [
    {
      required: true,
      message: '请输入API简介',
      trigger: ['input', 'blur', 'change'],
    },
  ],
  tags: [
    {
      required: true,
      message: '请输入Tags',
      trigger: ['input', 'blur', 'change'],
    },
  ],
}

const columns = [
  {
    title: 'API路径',
    key: 'path',
    width: 'auto',
    align: 'center',
    ellipsis: { tooltip: true },
  },
  {
    title: '请求方式',
    key: 'method',
    align: 'center',
    width: 'auto',
    ellipsis: { tooltip: true },
  },
  {
    title: 'API简介',
    key: 'summary',
    width: 'auto',
    align: 'center',
    ellipsis: { tooltip: true },
  },
  {
    title: 'Tags',
    key: 'tags',
    width: 'auto',
    align: 'center',
    ellipsis: { tooltip: true },
  },
  {
    title: '操作',
    key: 'actions',
    width: 'auto',
    align: 'center',
    fixed: 'right',
    render(row) {
      return [
        withDirectives(
          h(
            NButton,
            {
              size: 'small',
              type: 'primary',
              style: 'margin-right: 8px;',
              onClick: () => {
                handleEdit(row)
                modalForm.value.roles = row.roles.map((e) => (e = e.id))
              },
            },
            {
              default: () => '编辑',
              icon: renderIcon('material-symbols:edit', { size: 16 }),
            },
          ),
          [[vPermission, 'post/api/v1/api/update']],
        ),
        h(
          NPopconfirm,
          {
            onPositiveClick: () => handleDelete({ api_id: row.id }, false),
            onNegativeClick: () => {},
          },
          {
            trigger: () =>
              withDirectives(
                h(
                  NButton,
                  {
                    size: 'small',
                    type: 'error',
                  },
                  {
                    default: () => '删除',
                    icon: renderIcon('material-symbols:delete-outline', { size: 16 }),
                  },
                ),
                [[vPermission, 'delete/api/v1/api/delete']],
              ),
            default: () => h('div', {}, '确定删除该API吗?'),
          },
        ),
      ]
    },
  },
]
</script>

<template>
  <!-- 业务页面 -->
  <CommonPage show-footer title="API列表">
    <template #action>
      <div>
        <NButton
          v-permission="'post/api/v1/api/create'"
          class="float-right mr-15"
          type="primary"
          @click="handleAdd"
        >
          <TheIcon icon="material-symbols:add" :size="18" class="mr-5" />新建API
        </NButton>
        <NButton
          v-permission="'post/api/v1/api/refresh'"
          class="float-right mr-15"
          type="warning"
          @click="handleRefreshApi"
        >
          <TheIcon icon="material-symbols:refresh" :size="18" class="mr-5" />刷新API
        </NButton>
      </div>
    </template>
    <!-- 表格 -->
    <CrudTable
      ref="$table"
      v-model:query-items="queryItems"
      :columns="columns"
      :get-data="api.getApis"
    >
      <template #queryBar>
        <QueryBarItem label="路径" :label-width="40">
          <NInput
            v-model:value="queryItems.path"
            clearable
            type="text"
            placeholder="请输入API路径"
            @keypress.enter="$table?.handleSearch"
          />
        </QueryBarItem>
        <QueryBarItem label="API简介" :label-width="70">
          <NInput
            v-model:value="queryItems.summary"
            clearable
            type="text"
            placeholder="请输入API简介"
            @keypress.enter="$table?.handleSearch"
          />
        </QueryBarItem>
        <QueryBarItem label="Tags" :label-width="40">
          <NInput
            v-model:value="queryItems.tags"
            clearable
            type="text"
            placeholder="请输入API模块"
            @keypress.enter="$table?.handleSearch"
          />
        </QueryBarItem>
      </template>
    </CrudTable>

    <!-- 新增/编辑 弹窗 -->
    <CrudModal
      v-model:visible="modalVisible"
      :title="modalTitle"
      :loading="modalLoading"
      @save="handleSave"
    >
      <NForm
        ref="modalFormRef"
        label-placement="left"
        label-align="left"
        :label-width="80"
        :model="modalForm"
        :rules="addAPIRules"
      >
        <NFormItem label="API名称" path="path">
          <NInput v-model:value="modalForm.path" clearable placeholder="请输入API路径" />
        </NFormItem>
        <NFormItem label="请求方式" path="method">
          <NInput v-model:value="modalForm.method" clearable placeholder="请输入请求方式" />
        </NFormItem>
        <NFormItem label="API简介" path="summary">
          <NInput v-model:value="modalForm.summary" clearable placeholder="请输入API简介" />
        </NFormItem>
        <NFormItem label="Tags" path="tags">
          <NInput v-model:value="modalForm.tags" clearable placeholder="请输入Tags" />
        </NFormItem>
      </NForm>
    </CrudModal>
  </CommonPage>
</template>


用户: tzy
时间: 2024-01-21T06:49:56.457Z
消息: Uncaught (in promise) TypeError: Cannot read properties of undefined (reading '_withKeys')
    at withKeys (chunk-ESTIRR4N.js?v=a4d602d6:11012:20)
    at index.vue:176:1
    at renderFnWithContext (chunk-ESTIRR4N.js?v=a4d602d6:2275:13)
    at renderSlot (chunk-ESTIRR4N.js?v=a4d602d6:4409:53)
    at Proxy._sfc_render (QueryBarItem.vue:33:3)
    at renderComponentRoot (chunk-ESTIRR4N.js?v=a4d602d6:2334:17)
    at ReactiveEffect.componentUpdateFn [as fn] (chunk-ESTIRR4N.js?v=a4d602d6:7440:46)
    at ReactiveEffect.run (chunk-ESTIRR4N.js?v=a4d602d6:429:19)
    at instance.update (chunk-ESTIRR4N.js?v=a4d602d6:7571:17)
    at setupRenderEffect (chunk-ESTIRR4N.js?v=a4d602d6:7581:5)

用户: tzy
时间: 2024-01-21T07:01:40.621Z
消息: 下面的代码是从哪里查询数据的？import logging

from fastapi import APIRouter, Query
from fastapi.exceptions import HTTPException
from tortoise.expressions import Q

from app.controllers import role_controller
from app.schemas.base import Success, SuccessExtra
from app.schemas.roles import *

logger = logging.getLogger(__name__)
router = APIRouter()


@router.get("/list", summary="查看角色列表")
async def list_role(
    page: int = Query(1, description="页码"),
    page_size: int = Query(10, description="每页数量"),
    role_name: str = Query("", description="角色名称，用于查询"),
):
    q = Q()
    if role_name:
        q = Q(name__contains=role_name)
    total, role_objs = await role_controller.list(page=page, page_size=page_size, search=q)
    data = [await obj.to_dict() for obj in role_objs]
    return SuccessExtra(data=data, total=total, page=page, page_size=page_size)


@router.get("/get", summary="查看角色")
async def get_role(
    role_id: int = Query(..., description="角色ID"),
):
    role_obj = await role_controller.get(id=role_id)
    return Success(data=await role_obj.to_dict())


@router.post("/create", summary="创建角色")
async def create_role(role_in: RoleCreate):
    if await role_controller.is_exist(name=role_in.name):
        raise HTTPException(
            status_code=400,
            detail="The role with this rolename already exists in the system.",
        )
    await role_controller.create(obj_in=role_in)
    return Success(msg="Created Successfully")


@router.post("/update", summary="更新角色")
async def update_role(role_in: RoleUpdate):
    await role_controller.update(id=role_in.id, obj_in=role_in.update_dict())
    return Success(msg="Updated Successfully")


@router.delete("/delete", summary="删除角色")
async def delete_role(
    role_id: int = Query(..., description="角色ID"),
):
    await role_controller.remove(id=role_id)
    return Success(msg="Deleted Success")


@router.get("/authorized", summary="查看角色权限")
async def get_role_authorized(id: int = Query(..., description="角色ID")):
    role_obj = await role_controller.get(id=id)
    data = await role_obj.to_dict(m2m=True)
    return Success(data=data)


@router.post("/authorized", summary="更新角色权限")
async def update_role_authorized(role_in: RoleUpdateMenusApis):
    role_obj = await role_controller.get(id=role_in.id)
    await role_controller.update_roles(role=role_obj, menu_ids=role_in.menu_ids, api_infos=role_in.api_infos)
    return Success(msg="Updated Successfully")


用户: tzy
时间: 2024-01-21T07:07:53.050Z
消息: 下面的代码是如何连接数据库的？def register_db(app: FastAPI, db_url=None):
    register_tortoise(
        app,
        # db_url='sqlite://db.sqlite3',
        # modules={'models':['app.models', "aerich.models"]},
        {
        "connections": {
            "sqlite": {
                "engine": "tortoise.backends.sqlite",
                "credentials": {"file_path": f"{BASE_DIR}/db.sqlite3"},
            }
        },
        "apps": {
            "models": {
                "models": ["app.models"],
                "default_connection": "sqlite",
            },
        },
        "use_tz": False,
        "timezone": "Asia/Shanghai",
    },
        generate_schemas=True,
    )

用户: tzy
时间: 2024-01-21T07:10:20.784Z
消息: 那如果我要使用mysql，怎么办

用户: tzy
时间: 2024-01-21T10:17:59.681Z
消息: 为什么我连接不上服务器上的mysql？我已经运行root用户在任何主机上登陆，并且已暴露3306端口

用户: tzy
时间: 2024-01-21T14:22:15.834Z
消息: 下面的代码为什么生成了接口？from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field


class MenuType(str, Enum):
    CATALOG = "catalog"  # 目录
    MENU = "menu"  # 菜单


class BaseMenu(BaseModel):
    id: int
    name: str
    path: str
    remark: Optional[dict]
    menu_type: Optional[MenuType]
    icon: Optional[str]
    order: int
    parent_id: int
    is_hidden: bool
    component: str
    keepalive: bool
    redirect: Optional[str]
    children: Optional[list["BaseMenu"]]


class MenuCreate(BaseModel):
    menu_type: MenuType = Field(default=MenuType.CATALOG.value)
    name: str = Field(example="用户管理")
    icon: Optional[str] = "ph:user-list-bold"
    path: str = Field(example="/system/user")
    order: Optional[int] = Field(example=1)
    parent_id: Optional[int] = Field(example=0, default=0)
    is_hidden: Optional[bool] = False
    component: str = Field(default="Layout", example="/system/user")
    keepalive: Optional[bool] = True
    redirect: Optional[str] = ""


class MenuUpdate(BaseModel):
    id: int
    menu_type: Optional[MenuType] = Field(example=MenuType.CATALOG.value)
    name: Optional[str] = Field(example="用户管理")
    icon: Optional[str] = "ph:user-list-bold"
    path: Optional[str] = Field(example="/system/user")
    order: Optional[int] = Field(example=1)
    parent_id: Optional[int] = Field(example=0)
    is_hidden: Optional[bool] = False
    component: str = Field(example="/system/user")
    keepalive: Optional[bool] = False
    redirect: Optional[str] = ""

    def update_dict(self):
        return self.model_dump(exclude_unset=True, exclude={"id"})


用户: tzy
时间: 2024-01-21T14:22:49.509Z
消息: 那如何通过上面的代码写一个接口？写个示例看看

用户: tzy
时间: 2024-01-21T14:24:35.767Z
消息: 那这个代码在之中有什么意义？path: str = Field(example="/system/user")

用户: tzy
时间: 2024-01-21T14:52:05.015Z
消息: vue怎么写一个表单管理页面，给我详细的代码

用户: tzy
时间: 2024-01-22T07:24:47.107Z
消息: 下面这个问题怎么解决：misc.h:294:30: error: expected primary-expression at end of input
  Singleton(F objectFactory = F()) : m_objectFactory(objectFactory) {}

用户: tzy
时间: 2024-01-22T07:25:06.671Z
消息: 具体的代码是这样的：template <class T, class F = NewObject<T>, int instance=0>
class Singleton
{
public:
	Singleton(F objectFactory = F()) : m_objectFactory(objectFactory) {}

	// prevent this function from being inlined
	CRYPTOPP_NOINLINE const T & Ref(CRYPTOPP_NOINLINE_DOTDOTDOT) const;

private:
	F m_objectFactory;
};

用户: tzy
时间: 2024-01-22T14:04:32.734Z
消息: el-table组件，如何让column多的时候，滑动查看而不是挤在一起？

用户: tzy
时间: 2024-01-22T14:06:32.530Z
消息: 为什么我下面的代码写出的页面还是不能滑动？
<template>
	<div class="system-menu-container">
		<el-card shadow="hover">
			<div class="system-menu-search mb15">
        <el-form :inline="true">
          <el-form-item label="菜单名称">
            <el-input
                v-model="queryParams.title"
                placeholder="请输入菜单名称"
                clearable
                class="w-50 m-2"
                size="default"
            />
          </el-form-item>
          <el-form-item label="组件路径">
            <el-input
                v-model="queryParams.component"
                placeholder="请输入组件路径"
                clearable
                size="default"
                class="w-50 m-2"
            />
          </el-form-item>
          <el-form-item>
            <el-button size="default" type="primary" class="ml10" @click="handleQuery">
              <el-icon>
                <ele-Search />
              </el-icon>
              查询
            </el-button>
            <el-button size="default" type="success" class="ml10" @click="onOpenAddMenu(null)" v-auth="'api/v1/system/menu/add'">
              <el-icon>
                <ele-FolderAdd />
              </el-icon>
              新增菜单
            </el-button>
          </el-form-item>
        </el-form>
			</div>
			<el-table :data="menuTableData" style="width: 100%" row-key="path" :scroll-x="true">
				<el-table-column label="id" show-overflow-tooltip>
					<template #default="scope">
						<SvgIcon :name="scope.row.icon" />
						<span class="ml10">{{ scope.row.title }}</span>
					</template>
				</el-table-column>
				<el-table-column prop="path" label="is_active" show-overflow-tooltip></el-table-column>
				<el-table-column label="name" show-overflow-tooltip>
					<template #default="scope">
						<span>{{ scope.row.component }}</span>
					</template>
				</el-table-column>
				<el-table-column label="avatar" show-overflow-tooltip>
					<template #default="scope">
						<span>{{ scope.row.name }}</span>
					</template>
				</el-table-column>
				<el-table-column label="creator_notes" show-overflow-tooltip width="80">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="description" show-overflow-tooltip width="80">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="first_mes" show-overflow-tooltip width="80">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="mes_example" show-overflow-tooltip width="80">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="personality" show-overflow-tooltip width="80">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="post_history_instructions" show-overflow-tooltip width="80">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="scenario" show-overflow-tooltip width="80">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="system_prompt" show-overflow-tooltip width="80">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="tags" show-overflow-tooltip width="80">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="类型" show-overflow-tooltip width="80">
					<template #default="scope">
						<el-tag :type="scope.row.menuType===0?'danger':(scope.row.menuType===1?'success':'warning')"
                    size="small">{{scope.row.menuType===0?'目录':(scope.row.menuType===1?'菜单':'按钮') }}</el-tag>
					</template>
				</el-table-column>
        <el-table-column prop="isHide" label="显示状态" :formatter="formatIsHide" width="120"></el-table-column>
				<el-table-column label="操作"  width="240">
					<template #default="scope">
						<el-button v-if="scope.row.menuType!==2" size="small" text type="primary" @click="onOpenAddMenu(scope.row)" v-auth="'api/v1/system/menu/add'">新增</el-button>
						<el-button size="small" text type="primary" @click="onOpenEditMenu(scope.row)" v-auth="'api/v1/system/menu/update'">修改</el-button>
						<el-button size="small" text type="primary" @click="onTabelRowDel(scope.row)" v-auth="'api/v1/system/menu/delete'">删除</el-button>
					</template>
				</el-table-column>
			</el-table>
		</el-card>
		<EditMenu ref="editMenuRef" @menuList="menuList" :visibleOptions="sys_show_hide" :acType="acType"/>
	</div>
</template>

<script lang="ts">
import {ref, toRefs, reactive, onBeforeMount, defineComponent, getCurrentInstance, unref} from 'vue';
import { ElMessageBox, ElMessage } from 'element-plus';
import EditMenu from '/@/views/business/roleMananger/component/editMenu.vue';
import {delMenu, getMenuList} from "/@/api/system/menu";
export default defineComponent({
	name: 'apiV1SystemAuthMenuList',
	components: { EditMenu },
	setup() {
		const editMenuRef = ref();
		const state = reactive({
      queryParams:{
        title:"",
        component:""
      },
      menuTableData:[],
    });
    const {proxy} = getCurrentInstance() as any;
    const {sys_show_hide} = proxy.useDict('sys_show_hide')
    const acType = ref('add')
		// 打开新增菜单弹窗
		const onOpenAddMenu = (row:any) => {
      acType.value = 'add'
      editMenuRef.value.openDialog(row);
		};
		// 打开编辑菜单弹窗
		const onOpenEditMenu = (row: any) => {
      acType.value='edit'
			editMenuRef.value.openDialog(row);
		};
		// 删除当前行
		const onTabelRowDel = (row: any) => {
			ElMessageBox.confirm(`此操作将永久删除菜单：“${row.title}”, 是否继续?`, '提示', {
				confirmButtonText: '删除',
				cancelButtonText: '取消',
				type: 'warning',
			})
				.then(() => {
          delMenu(row.id).then(()=>{
            ElMessage.success('删除成功');
            proxy.$refs['editMenuRef'].resetMenuSession()
            menuList();
          })
				})
				.catch(() => {});
		};
    const formatIsHide = (row:any)=>{
      return proxy.selectDictLabel(unref(sys_show_hide), ''+row.isHide);
    };
    onBeforeMount(()=>{
      menuList()
    });
    const handleQuery=() => {
      menuList();
    };
    const menuList = ()=>{
      getMenuList(state.queryParams).then(res=>{
        state.menuTableData = proxy.handleTree(res.data.rules??[], "id","pid");
      })
    };
		return {
			editMenuRef,
			onOpenAddMenu,
			onOpenEditMenu,
			onTabelRowDel,
      formatIsHide,
      menuList,
      handleQuery,
			...toRefs(state),
      sys_show_hide,
      acType
		};
	},
});
</script>


用户: tzy
时间: 2024-01-22T14:08:15.187Z
消息: 还是不行，由于<el-table-colum>过多，全部挤在一起了

用户: tzy
时间: 2024-01-22T14:21:29.681Z
消息: 下面的代码，是如何初始化页面数据的？<template>
	<div class="system-menu-container">
		<el-card shadow="hover">
			<div class="system-menu-search mb15">
        <el-form :inline="true">
          <el-form-item label="菜单名称">
            <el-input
                v-model="queryParams.title"
                placeholder="请输入菜单名称"
                clearable
                class="w-50 m-2"
                size="default"
            />
          </el-form-item>
          <el-form-item label="组件路径">
            <el-input
                v-model="queryParams.component"
                placeholder="请输入组件路径"
                clearable
                size="default"
                class="w-50 m-2"
            />
          </el-form-item>
          <el-form-item>
            <el-button size="default" type="primary" class="ml10" @click="handleQuery">
              <el-icon>
                <ele-Search />
              </el-icon>
              查询
            </el-button>
            <el-button size="default" type="success" class="ml10" @click="onOpenAddMenu(null)" v-auth="'api/v1/system/menu/add'">
              <el-icon>
                <ele-FolderAdd />
              </el-icon>
              新增菜单
            </el-button>
          </el-form-item>
        </el-form>
			</div>
			<el-table :data="menuTableData" style="width: 100%" row-key="path" :scroll-x="true">
				<el-table-column label="id" show-overflow-tooltip>
					<template #default="scope">
						<span>{{ scope.row.component }}</span>
					</template>
				</el-table-column>
				<el-table-column prop="path" label="is_active" width="200" show-overflow-tooltip></el-table-column>
				<el-table-column label="name" show-overflow-tooltip>
					<template #default="scope">
						<span>{{ scope.row.component }}</span>
					</template>
				</el-table-column>
				<el-table-column label="avatar" show-overflow-tooltip>
					<template #default="scope">
						<span>{{ scope.row.name }}</span>
					</template>
				</el-table-column>
				<el-table-column label="creator_notes" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="description" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="first_mes" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="mes_example" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="personality" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="post_history_instructions" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="scenario" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="system_prompt" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="tags" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.weigh }}
					</template>
				</el-table-column>
				<el-table-column label="类型" show-overflow-tooltip width="80">
					<template #default="scope">
						<el-tag :type="scope.row.menuType===0?'danger':(scope.row.menuType===1?'success':'warning')"
                    size="small">{{scope.row.menuType===0?'目录':(scope.row.menuType===1?'菜单':'按钮') }}</el-tag>
					</template>
				</el-table-column>
        <el-table-column prop="isHide" label="显示状态" :formatter="formatIsHide" width="120"></el-table-column>
				<el-table-column label="操作"  width="240">
					<template #default="scope">
						<el-button v-if="scope.row.menuType!==2" size="small" text type="primary" @click="onOpenAddMenu(scope.row)" v-auth="'api/v1/system/menu/add'">新增</el-button>
						<el-button size="small" text type="primary" @click="onOpenEditMenu(scope.row)" v-auth="'api/v1/system/menu/update'">修改</el-button>
						<el-button size="small" text type="primary" @click="onTabelRowDel(scope.row)" v-auth="'api/v1/system/menu/delete'">删除</el-button>
					</template>
				</el-table-column>
			</el-table>
		</el-card>
		<EditMenu ref="editMenuRef" @menuList="menuList" :visibleOptions="sys_show_hide" :acType="acType"/>
	</div>
</template>

<script lang="ts">
import {ref, toRefs, reactive, onBeforeMount, defineComponent, getCurrentInstance, unref} from 'vue';
import { ElMessageBox, ElMessage } from 'element-plus';
import EditMenu from '/@/views/business/roleMananger/component/editMenu.vue';
import {delMenu, getMenuList} from "/@/api/system/menu";
export default defineComponent({
	name: 'apiV1SystemAuthMenuList',
	components: { EditMenu },
	setup() {
		const editMenuRef = ref();
		const state = reactive({
      queryParams:{
        title:"",
        component:""
      },
      menuTableData:[],
    });
    const {proxy} = getCurrentInstance() as any;
    const {sys_show_hide} = proxy.useDict('sys_show_hide')
    const acType = ref('add')
		// 打开新增菜单弹窗
		const onOpenAddMenu = (row:any) => {
      acType.value = 'add'
      editMenuRef.value.openDialog(row);
		};
		// 打开编辑菜单弹窗
		const onOpenEditMenu = (row: any) => {
      acType.value='edit'
			editMenuRef.value.openDialog(row);
		};
		// 删除当前行
		const onTabelRowDel = (row: any) => {
			ElMessageBox.confirm(`此操作将永久删除菜单：“${row.title}”, 是否继续?`, '提示', {
				confirmButtonText: '删除',
				cancelButtonText: '取消',
				type: 'warning',
			})
				.then(() => {
          delMenu(row.id).then(()=>{
            ElMessage.success('删除成功');
            proxy.$refs['editMenuRef'].resetMenuSession()
            menuList();
          })
				})
				.catch(() => {});
		};
    const formatIsHide = (row:any)=>{
      return proxy.selectDictLabel(unref(sys_show_hide), ''+row.isHide);
    };
    onBeforeMount(()=>{
      menuList()
    });
    const handleQuery=() => {
      menuList();
    };
    const menuList = ()=>{
      getMenuList(state.queryParams).then(res=>{
        state.menuTableData = proxy.handleTree(res.data.rules??[], "id","pid");
      })
    };
		return {
			editMenuRef,
			onOpenAddMenu,
			onOpenEditMenu,
			onTabelRowDel,
      formatIsHide,
      menuList,
      handleQuery,
			...toRefs(state),
      sys_show_hide,
      acType
		};
	},
});
</script>


用户: tzy
时间: 2024-01-22T14:23:10.320Z
消息: 我看每次都是从scope里面取数据，那么scope的数据又是如何来的？链路是怎么样的？通过我的代码详细分析一下

用户: tzy
时间: 2024-01-23T03:11:44.027Z
消息: WHERE dt =20231128   sql语句这样写有错吗

用户: tzy
时间: 2024-01-23T03:12:11.737Z
消息: WHERE dt =20231128  sql语句里面 20231128要加引号吗

用户: tzy
时间: 2024-01-23T03:13:32.449Z
消息: WHERE dt =20231128  sql语句里面 20231128要加引号吗  dt为string类型

用户: tzy
时间: 2024-01-24T10:02:09.912Z
消息: 用goframe里面的orm帮我查询数据库中的所有内容

用户: tzy
时间: 2024-01-24T10:02:27.003Z
消息: 用goframe里面的orm帮我写一段查询数据库中的所有内容的代码示例

用户: tzy
时间: 2024-01-24T10:03:47.354Z
消息: 用goframe里面的orm帮我写一段代码：查询数据库中的所有内容，并将数据转换为一个结构体

用户: tzy
时间: 2024-01-25T08:22:35.064Z
消息: goframe写一段api的请求体与回包结构体的定义，用于解析客户端的json请求，请求数据如下：[
    {
        "name": "ApiReqTemplate.json",
        "percentage": 0,
        "status": "ready",
        "size": 252,
        "raw": {
            "uid": 1706170248722
        },
        "uid": 1706170248722
    }
]

用户: tzy
时间: 2024-01-25T08:24:13.669Z
消息: 你的定义有误呀，一是因为你没有注意到json是数组结构的，二是因为你没有g.Meta字段

用户: tzy
时间: 2024-01-25T08:24:38.539Z
消息: 你的定义有误呀，一是因为你没有注意到json是数组结构的，二是因为你没有g.Meta字段

用户: tzy
时间: 2024-01-25T09:18:00.546Z
消息: loginpassword是什么意思呢

用户: tzy
时间: 2024-01-25T09:20:11.336Z
消息: GENERAL_WITHHOLDING_P|INDUSTRY|APP_STORE   是什么意思

用户: tzy
时间: 2024-01-25T09:36:40.875Z
消息: goframe中的dao.Roles.Ctx(ctx).TX(tx).InsertAndGetId(data)是什么意思？

用户: tzy
时间: 2024-01-25T09:44:27.675Z
消息: 2DFace  是什么意思

用户: tzy
时间: 2024-01-25T10:10:06.495Z
消息: ts发起请求的时候，如果请求体是一个数组，并且数组只有一个元素，那么发送的类型就不会是数组了，如何解决？

用户: tzy
时间: 2024-01-25T10:10:23.253Z
消息: 我使用的是request函数，如何解决？

用户: tzy
时间: 2024-01-26T02:54:17.298Z
消息: 为什么当上传文件只有一个的时候state.fileList不是一个数组？如何让它恒为一个数组？
<template>
	<div class="system-edit-menu-container">
		<el-dialog :title="(acType==='add'?'新增':'修改')+'菜单'" v-model="isShowDialog"
               width="769px" :close-on-click-modal="false">
			<el-upload
				accept=".json"
				multiple
				action=""
				:limit="5"
				:on-change="handleChange"
				:on-remove="handleRemove"
				:auto-upload="false"
				:file-list="fileList"
				:on-exceed="handleExceed"
				>
				<el-button slot="trigger" size="small" type="primary" @click="resetFileCount">选取角色配置文件</el-button>
			</el-upload>
			<template #footer>
				<span class="dialog-footer">
					<el-button @click="onCancel" size="default">取 消</el-button>
					<el-button type="primary" @click="onSubmit" size="default" :loading="loading">导入配置</el-button>
				</span>
			</template>
		</el-dialog>
	</div>
</template>

<script lang="ts">
import { reactive, toRefs, defineComponent,ref,unref,getCurrentInstance,nextTick } from 'vue';
import IconSelector from '/@/components/iconSelector/index.vue';
import { refreshBackEndControlRoutes } from "/@/router/backEnd";
import {roleJsonUpload} from "/@/api/business";
import {ElMessage} from "element-plus"
import { stringify } from 'querystring';
import { isArray } from 'lodash';


export default defineComponent({
	name: 'roleEditMenu',
	components: { IconSelector },
	props:{
		visibleOptions:{
		type:Array,
		default:()=>[],
		},
		acType:{
		type:String,
		default:()=>'add'
		}
	},
	setup(props,{emit}) {
    const ruleFormRef = ref<HTMLElement | null>(null);
    const {proxy} = getCurrentInstance() as any;
		const state = reactive({
      		loading: false,
			isShowDialog: false,
			file: "",
			fileList: [],
			fileCount : 0,
		});

		// 打开弹窗
		const openDialog = (row: any) => {
      		nextTick(()=>{
			state.isShowDialog = true;
			state.loading = false;
		})
	};
	
	// 关闭弹窗
	const closeDialog = () => {
		state.isShowDialog = false;
	};
	// 取消
	const onCancel = () => {
		closeDialog();
	};

	const resetFileCount = () => {
		state.fileCount = 0;
	};
        
	const handleChange = (file,fileList) => {// 文件状态改变钩子
		state.fileList = fileList;
    };
        
const handleRemove = (file,fileList) => {// 删除上传文件
	state.fileList = fileList
};


const handleExceed = () => {// 超出限制个数钩子
	// this.$parent.handleExceed()
};


// 新增
const onSubmit = () => {
	console.log("submit",state.fileList)
	roleJsonUpload(state.fileList).then(()=>{
		ElMessage.success('角色添加成功');
		closeDialog(); // 关闭弹窗
	}).finally(()=>{
		state.loading = false;
	})
};

    // 重置菜单session
    const resetMenuSession = () => {
      refreshBackEndControlRoutes();
    };
		return {
      		ruleFormRef,
			openDialog,
			closeDialog,
			handleChange,
			onCancel,
			onSubmit,
			handleRemove,
      		resetMenuSession,
			handleExceed,
			resetFileCount,
			...toRefs(state),
		};
	},
});
</script>


用户: tzy
时间: 2024-01-26T02:56:19.490Z
消息: 按这样的方式修改后，仍然不行

用户: tzy
时间: 2024-01-26T03:00:35.919Z
消息: 为什么这段代码：console.log(typeof(state.fileList), Array.isArray(state.fileList) )，打印的结果为：object true？

用户: tzy
时间: 2024-01-26T03:02:25.668Z
消息: 那既然如此，我如何知道state.fileList是否是一个数组？

用户: tzy
时间: 2024-01-26T03:03:35.332Z
消息: 不行呀，即使state.fileList的内容为{"msg":[{"name":"Alana copy.json","percentage":0,"status":"ready","size":24972,"raw":{"uid":1706238182162},"uid":1706238182162}]}，Array.isArray依旧返回true，这不是我希望的

用户: tzy
时间: 2024-01-26T03:12:47.755Z
消息: 怎么判断一个对象是Proxy(Array)还是Proxy(Object)？

用户: tzy
时间: 2024-01-26T03:13:29.730Z
消息: 那如何将Object.prototype类型变成只有一个元素的Array.prototype类型？

用户: tzy
时间: 2024-01-26T03:15:38.793Z
消息: 判断state.fileList对象是Proxy(Array)还是Proxy(Object),如果它是Proxy(Object)，那么将它转换为只有一个元素的Proxy(Array)

用户: tzy
时间: 2024-01-26T03:21:27.831Z
消息: 为什么我的fileList是never[]类型？

用户: tzy
时间: 2024-01-26T06:57:54.539Z
消息: 帮我修改下面的vue代码，使得state.fileList里面存储文件的内容<template>
	<div class="system-edit-menu-container">
		<el-dialog :title="(acType==='add'?'新增':'修改')+'菜单'" v-model="isShowDialog"
               width="769px" :close-on-click-modal="false">
			<el-upload
				accept=".json"
				multiple
				action=""
				:limit="5"
				:on-change="handleChange"
				:on-remove="handleRemove"
				:auto-upload="false"
				:file-list="fileList"
				:on-exceed="handleExceed"
				>
				<el-button slot="trigger" size="small" type="primary" @click="resetFileCount">选取角色配置文件</el-button>
			</el-upload>
			<template #footer>
				<span class="dialog-footer">
					<el-button @click="onCancel" size="default">取 消</el-button>
					<el-button type="primary" @click="onSubmit" size="default" :loading="loading">导入配置</el-button>
				</span>
			</template>
		</el-dialog>
	</div>
</template>

<script lang="ts">
import { reactive, toRefs, defineComponent,ref,unref,getCurrentInstance,nextTick } from 'vue';
import IconSelector from '/@/components/iconSelector/index.vue';
import { refreshBackEndControlRoutes } from "/@/router/backEnd";
import {roleJsonUpload} from "/@/api/business";
import {ElMessage} from "element-plus"
import { stringify } from 'querystring';
import { isArray } from 'lodash';


export default defineComponent({
	name: 'roleEditMenu',
	components: { IconSelector },
	props:{
		visibleOptions:{
		type:Array,
		default:()=>[],
		},
		acType:{
		type:String,
		default:()=>'add'
		}
	},
	setup(props,{emit}) {
    const ruleFormRef = ref<HTMLElement | null>(null);
    const {proxy} = getCurrentInstance() as any;
		const state = reactive({
      		loading: false,
			isShowDialog: false,
			file: "",
			fileList: [] as any[],
			fileCount : 0,
		});

		// 打开弹窗
		const openDialog = (row: any) => {
      		nextTick(()=>{
			state.isShowDialog = true;
			state.loading = false;	
			state.fileList = [] as any[];
		})
	};
	
	// 关闭弹窗
	const closeDialog = () => {
		state.isShowDialog = false;
	};
	// 取消
	const onCancel = () => {
		closeDialog();
	};

	const resetFileCount = () => {
		state.fileCount = 0;
	};
        
	const handleChange = (file,fileList) => {// 文件状态改变钩子
		state.fileList.push(file)
		console.log(state.fileList)
    };
        
const handleRemove = (file,fileList) => {// 删除上传文件
	state.fileList = fileList
};


const handleExceed = () => {// 超出限制个数钩子
	// this.$parent.handleExceed()
};


// 新增
const onSubmit = () => {
	console.log("submit",state.fileList)
	console.log(typeof(state.fileList.values()), state.fileList instanceof Array )
	
	roleJsonUpload(state.fileList).then(()=>{
		ElMessage.success('角色添加成功');
		closeDialog(); // 关闭弹窗
	}).finally(()=>{
		state.loading = false;
	})
};

    // 重置菜单session
    const resetMenuSession = () => {
      refreshBackEndControlRoutes();
    };
		return {
      		ruleFormRef,
			openDialog,
			closeDialog,
			handleChange,
			onCancel,
			onSubmit,
			handleRemove,
      		resetMenuSession,
			handleExceed,
			resetFileCount,
			...toRefs(state),
		};
	},
});
</script>


用户: tzy
时间: 2024-01-26T06:59:21.965Z
消息: TypeError: Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'

用户: tzy
时间: 2024-01-26T07:00:05.388Z
消息: 帮我修改下面的vue代码，使得state.fileList里面存储文件的内容<template>
<div class="system-edit-menu-container">
<el-dialog :title="(acType==='add'?'新增':'修改')+'菜单'" v-model="isShowDialog"
width="769px" :close-on-click-modal="false">
<el-upload
accept=".json"
multiple
action=""
:limit="5"
:on-change="handleChange"
:on-remove="handleRemove"
:auto-upload="false"
:file-list="fileList"
:on-exceed="handleExceed"
>
<el-button slot="trigger" size="small" type="primary" @click="resetFileCount">选取角色配置文件</el-button>
</el-upload>
<template #footer>
<span class="dialog-footer">
<el-button @click="onCancel" size="default">取 消</el-button>
<el-button type="primary" @click="onSubmit" size="default" :loading="loading">导入配置</el-button>
</span>
</template>
</el-dialog>
</div>
</template>

<script lang="ts">
import { reactive, toRefs, defineComponent,ref,unref,getCurrentInstance,nextTick } from 'vue';
import IconSelector from '/@/components/iconSelector/index.vue';
import { refreshBackEndControlRoutes } from "/@/router/backEnd";
import {roleJsonUpload} from "/@/api/business";
import {ElMessage} from "element-plus"
import { stringify } from 'querystring';
import { isArray } from 'lodash';

export default defineComponent({
name: 'roleEditMenu',
components: { IconSelector },
props:{
visibleOptions:{
type:Array,
default:()=>[],
},
acType:{
type:String,
default:()=>'add'
}
},
setup(props,{emit}) {
const ruleFormRef = ref<HTMLElement | null>(null);
const {proxy} = getCurrentInstance() as any;
const state = reactive({
loading: false,
isShowDialog: false,
file: "",
fileList: [] as any[],
fileCount : 0,
});

	// 打开弹窗
	const openDialog = (row: any) => {
  		nextTick(()=>{
		state.isShowDialog = true;
		state.loading = false;	
		state.fileList = [] as any[];
	})
};

// 关闭弹窗
const closeDialog = () => {
	state.isShowDialog = false;
};
// 取消
const onCancel = () => {
	closeDialog();
};

const resetFileCount = () => {
	state.fileCount = 0;
};
    
const handleChange = (file,fileList) => {// 文件状态改变钩子
	state.fileList.push(file)
	console.log(state.fileList)
};
const handleRemove = (file,fileList) => {// 删除上传文件
state.fileList = fileList
};

const handleExceed = () => {// 超出限制个数钩子
// this.$parent.handleExceed()
};

// 新增
const onSubmit = () => {
console.log("submit",state.fileList)
console.log(typeof(state.fileList.values()), state.fileList instanceof Array )

roleJsonUpload(state.fileList).then(()=>{
	ElMessage.success('角色添加成功');
	closeDialog(); // 关闭弹窗
}).finally(()=>{
	state.loading = false;
})
};

// 重置菜单session
const resetMenuSession = () => {
  refreshBackEndControlRoutes();
};
	return {
  		ruleFormRef,
		openDialog,
		closeDialog,
		handleChange,
		onCancel,
		onSubmit,
		handleRemove,
  		resetMenuSession,
		handleExceed,
		resetFileCount,
		...toRefs(state),
	};
},
});
</script>




用户: tzy
时间: 2024-01-26T07:02:28.942Z
消息: 我上传的文件内容是一串json数据，如何将json数据读出并存储在state.fileList中？

用户: tzy
时间: 2024-01-26T07:49:45.818Z
消息: 下面的代码，为什么在删除操作的时候，console.log("row:",row);这行代码不打印任何信息？
<template>
	<div class="system-menu-container">
		<el-card shadow="hover">
			<div class="system-menu-search mb15">
        <el-form :inline="true">
          <el-form-item label="角色ID">
            <el-input
                v-model="queryParams.title"
                placeholder="请输入角色ID"
                clearable
                class="w-50 m-2"
                size="default"
            />
          </el-form-item>
          <el-form-item label="角色名称">
            <el-input
                v-model="queryParams.component"
                placeholder="请输入角色名称"
                clearable
                size="default"
                class="w-50 m-2"
            />
          </el-form-item>
          <el-form-item>
            <el-button size="default" type="primary" class="ml10" @click="handleQuery">
              <el-icon>
                <ele-Search />
              </el-icon>
              查询
            </el-button>
            <el-button size="default" type="success" class="ml10" @click="onOpenAddMenu(null)" v-auth="'api/v1/system/menu/add'">
              <el-icon>
                <ele-FolderAdd />
              </el-icon>
              导入角色配置
            </el-button>
          </el-form-item>
        </el-form>
			</div>
			<el-table :data="menuTableData" style="width: 100%" row-key="path" :scroll-x="true">
				<el-table-column label="id" show-overflow-tooltip>
					<template #default="scope">
						<span>{{ scope.row.id }}</span>
					</template>
				</el-table-column>
				<el-table-column label="is_active" show-overflow-tooltip width="100">
					<template #default="scope">
						<span>{{ scope.row.isActive }}</span>
					</template>
				</el-table-column>
				<el-table-column label="name" show-overflow-tooltip>
					<template #default="scope">
						<span>{{ scope.row.name }}</span>
					</template>
				</el-table-column>
				<el-table-column label="avatar" show-overflow-tooltip>
					<template #default="scope">
						<span>{{ scope.row.avatar }}</span>
					</template>
				</el-table-column>
				<el-table-column label="creator_notes" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.creatorNotes }}
					</template>
				</el-table-column>
				<el-table-column label="description" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.description }}
					</template>
				</el-table-column>
				<el-table-column label="first_mes" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.firstMes }}
					</template>
				</el-table-column>
				<el-table-column label="mes_example" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.mesExample }}
					</template>
				</el-table-column>
				<el-table-column label="personality" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.personality }}
					</template>
				</el-table-column>
				<el-table-column label="post_history_instructions" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.postHistoryInstructions }}
					</template>
				</el-table-column>
				<el-table-column label="scenario" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.scenario }}
					</template>
				</el-table-column>
				<el-table-column label="system_prompt" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.systemPrompt }}
					</template>
				</el-table-column>
				<el-table-column label="tags" show-overflow-tooltip width="200">
					<template #default="scope">
						{{ scope.row.tags }}
					</template>
				</el-table-column>
				<el-table-column label="操作"  width="200">
					<template #default="scope">
						<el-button size="small" text type="primary" @click="onTabelRowDel(scope.row)" v-auth="'api/v1/system/menu/delete'">删除</el-button>
					</template>
				</el-table-column>
			</el-table>
		</el-card>
		<EditMenu ref="editMenuRef" @menuList="menuList" :visibleOptions="sys_show_hide" :acType="acType"/>
	</div>
</template>

<script lang="ts">
import {ref, toRefs, reactive, onBeforeMount, defineComponent, getCurrentInstance, unref} from 'vue';
import { ElMessageBox, ElMessage } from 'element-plus';
import EditMenu from '/@/views/business/roleManager/component/editMenu.vue';
import {delMenu, getRoleList} from "/@/api/business";
export default defineComponent({
	name: 'apiV1SystemAuthMenuList',
	components: { EditMenu },
	setup() {
		const editMenuRef = ref();
		const state = reactive({
      queryParams:{
        title:"",
        component:""
      },
      menuTableData:[],
    });
    const {proxy} = getCurrentInstance() as any;
    const {sys_show_hide} = proxy.useDict('sys_show_hide')
    const acType = ref('add')
		// 打开新增菜单弹窗
		const onOpenAddMenu = (row:any) => {
			acType.value = 'add'
			editMenuRef.value.openDialog(row);
		};
		// 打开编辑菜单弹窗
		const onOpenEditMenu = (row: any) => {
      acType.value='edit'
			editMenuRef.value.openDialog(row);
		};
		// 删除当前行
		const onTabelRowDel = (row: any) => {
			console.log("row:",row);
			ElMessageBox.confirm(`此操作将永久删除角色配置：“${row.name}”, 是否继续?`, '提示', {
				confirmButtonText: '删除',
				cancelButtonText: '取消',
				type: 'warning',
			})
				.then(() => {
          delMenu(row.id).then(()=>{
            ElMessage.success('删除成功');
            proxy.$refs['editMenuRef'].resetMenuSession()
            menuList();
          })
				})
				.catch(() => {});
		};
    const formatIsHide = (row:any)=>{
      return proxy.selectDictLabel(unref(sys_show_hide), ''+row.isHide);
    };
    onBeforeMount(()=>{
      menuList()
    });
    const handleQuery=() => {
      menuList();
    };
    const menuList = ()=>{
		getRoleList(state.queryParams).then(res=>{
        state.menuTableData = proxy.handleTree(res.data.rules??[], "id","pid");
		console.log(state.menuTableData[0])
      })
    };
		return {
			editMenuRef,
			onOpenAddMenu,
			onOpenEditMenu,
			onTabelRowDel,
			formatIsHide,
			menuList,
			handleQuery,
			...toRefs(state),
      sys_show_hide,
      acType
		};
	},
});
</script>


用户: tzy
时间: 2024-01-26T07:53:02.871Z
消息: 下面的代码，为什么在删除操作的时候，console.log("row:",row);这行代码不打印任何信息？
<template>
<div class="system-menu-container">
<el-card shadow="hover">
<div class="system-menu-search mb15">
<el-form :inline="true">
<el-form-item label="角色ID">
<el-input
v-model="queryParams.title"
placeholder="请输入角色ID"
clearable
class="w-50 m-2"
size="default"
/>
</el-form-item>
<el-form-item label="角色名称">
<el-input
v-model="queryParams.component"
placeholder="请输入角色名称"
clearable
size="default"
class="w-50 m-2"
/>
</el-form-item>
<el-form-item>
<el-button size="default" type="primary" class="ml10" @click="handleQuery">
<el-icon>
<ele-Search />
</el-icon>
查询
</el-button>
<el-button size="default" type="success" class="ml10" @click="onOpenAddMenu(null)" v-auth="'api/v1/system/menu/add'">
<el-icon>
<ele-FolderAdd />
</el-icon>
导入角色配置
</el-button>
</el-form-item>
</el-form>
</div>
<el-table :data="menuTableData" style="width: 100%" row-key="path" :scroll-x="true">
<el-table-column label="id" show-overflow-tooltip>
<template #default="scope">
<span>{{ scope.row.id }}</span>
</template>
</el-table-column>
<el-table-column label="is_active" show-overflow-tooltip width="100">
<template #default="scope">
<span>{{ scope.row.isActive }}</span>
</template>
</el-table-column>
<el-table-column label="name" show-overflow-tooltip>
<template #default="scope">
<span>{{ scope.row.name }}</span>
</template>
</el-table-column>
<el-table-column label="avatar" show-overflow-tooltip>
<template #default="scope">
<span>{{ scope.row.avatar }}</span>
</template>
</el-table-column>
<el-table-column label="creator_notes" show-overflow-tooltip width="200">
<template #default="scope">
{{ scope.row.creatorNotes }}
</template>
</el-table-column>
<el-table-column label="description" show-overflow-tooltip width="200">
<template #default="scope">
{{ scope.row.description }}
</template>
</el-table-column>
<el-table-column label="first_mes" show-overflow-tooltip width="200">
<template #default="scope">
{{ scope.row.firstMes }}
</template>
</el-table-column>
<el-table-column label="mes_example" show-overflow-tooltip width="200">
<template #default="scope">
{{ scope.row.mesExample }}
</template>
</el-table-column>
<el-table-column label="personality" show-overflow-tooltip width="200">
<template #default="scope">
{{ scope.row.personality }}
</template>
</el-table-column>
<el-table-column label="post_history_instructions" show-overflow-tooltip width="200">
<template #default="scope">
{{ scope.row.postHistoryInstructions }}
</template>
</el-table-column>
<el-table-column label="scenario" show-overflow-tooltip width="200">
<template #default="scope">
{{ scope.row.scenario }}
</template>
</el-table-column>
<el-table-column label="system_prompt" show-overflow-tooltip width="200">
<template #default="scope">
{{ scope.row.systemPrompt }}
</template>
</el-table-column>
<el-table-column label="tags" show-overflow-tooltip width="200">
<template #default="scope">
{{ scope.row.tags }}
</template>
</el-table-column>
<el-table-column label="操作"  width="200">
<template #default="scope">
<el-button size="small" text type="primary" @click="onTabelRowDel(scope.row)" v-auth="'api/v1/system/menu/delete'">删除</el-button>
</template>
</el-table-column>
</el-table>
</el-card>
<EditMenu ref="editMenuRef" @menuList="menuList" :visibleOptions="sys_show_hide" :acType="acType"/>
</div>
</template>

<script lang="ts">
import {ref, toRefs, reactive, onBeforeMount, defineComponent, getCurrentInstance, unref} from 'vue';
import { ElMessageBox, ElMessage } from 'element-plus';
import EditMenu from '/@/views/business/roleManager/component/editMenu.vue';
import {delMenu, getRoleList} from "/@/api/business";
export default defineComponent({
name: 'apiV1SystemAuthMenuList',
components: { EditMenu },
setup() {
const editMenuRef = ref();
const state = reactive({
queryParams:{
title:"",
component:""
},
menuTableData:[],
});
const {proxy} = getCurrentInstance() as any;
const {sys_show_hide} = proxy.useDict('sys_show_hide')
const acType = ref('add')
// 打开新增菜单弹窗
const onOpenAddMenu = (row:any) => {
acType.value = 'add'
editMenuRef.value.openDialog(row);
};
// 打开编辑菜单弹窗
const onOpenEditMenu = (row: any) => {
acType.value='edit'
editMenuRef.value.openDialog(row);
};
// 删除当前行
const onTabelRowDel = (row: any) => {
console.log("row:",row);
ElMessageBox.confirm(此操作将永久删除角色配置：“${row.name}”, 是否继续?, '提示', {
confirmButtonText: '删除',
cancelButtonText: '取消',
type: 'warning',
})
.then(() => {
delMenu(row.id).then(()=>{
ElMessage.success('删除成功');
proxy.$refs['editMenuRef'].resetMenuSession()
menuList();
})
})
.catch(() => {});
};
const formatIsHide = (row:any)=>{
return proxy.selectDictLabel(unref(sys_show_hide), ''+row.isHide);
};
onBeforeMount(()=>{
menuList()
});
const handleQuery=() => {
menuList();
};
const menuList = ()=>{
getRoleList(state.queryParams).then(res=>{
state.menuTableData = proxy.handleTree(res.data.rules??[], "id","pid");
console.log(state.menuTableData[0])
})
};
return {
editMenuRef,
onOpenAddMenu,
onOpenEditMenu,
onTabelRowDel,
formatIsHide,
menuList,
handleQuery,
...toRefs(state),
sys_show_hide,
acType
};
},
});
</script>

用户: tzy
时间: 2024-01-26T07:54:19.031Z
消息: 那为什么执行删除的时候，row.name没有任何数据呢，在数据展示的时候是没问题的

用户: tzy
时间: 2024-01-26T08:11:31.124Z
消息: 下面代码中：<el-button size="small" text type="primary" @click="onTabelRowDel(scope.row)" v-auth="'api/v1/business/delRoleConf'">删除</el-button>，v-auth有什么用？

用户: tzy
时间: 2024-01-26T08:12:31.588Z
消息: 那它是如何验证权限的？

用户: tzy
时间: 2024-01-26T09:29:04.918Z
消息: 汇报分为 汇报人和谁

用户: tzy
时间: 2024-01-26T09:29:32.157Z
消息: 接收汇报的人或团队 叫什么

用户: tzy
时间: 2024-01-26T14:21:45.474Z
消息: 我在mac上如何用go工程临时编译exe？

用户: tzy
时间: 2024-01-26T14:23:02.557Z
消息: 我在mac上如何用go语言临时编译出exe文件，并让它在windows执行？？

用户: tzy
时间: 2024-01-26T15:46:04.544Z
消息: 我的nginx配置如下：worker_processes auto;
events {
    worker_connections 1024;
}

http {
    include mime.types;
    charset utf-8;
    sendfile on;
    keepalive_timeout 65;
    gzip on;

    server {
        listen 80;
        server_name 47.99.70.58;
        # 正式接口
        location / {
            proxy_pass http://127.0.0.1:8000/;
            proxy_buffering off;
        }

        location /sys {
            proxy_pass http://127.0.0.1:8808/;
            proxy_buffering off;
        }
        location /api/v1 {
            proxy_pass http://127.0.0.1:8808/api/v1/;
            proxy_buffering off;
        }
        # location /openapi.json {
        #     proxy_pass http://127.0.0.1:8000/openapi.json;
        # }
        # 开发接口
        location /dev/ {
            proxy_pass http://127.0.0.1:8001/;
            proxy_buffering off;
        }
    }
}。
那么如果我请求“http://47.99.70.58/api/v1/pub/captcha/get”，最终47.99.70.58机器接收到请求的路径是哪里？

用户: tzy
时间: 2024-01-26T15:49:03.300Z
消息: 但是我http://127.0.0.1:8808的服务并没有收到请求，这是为什么？

用户: tzy
时间: 2024-01-28T07:33:25.407Z
消息: 遇到下面的情况怎么办：open ./resource/casbin/rbac_model.conf: The system cannot find the path specified.。我能确保路径是正确的

用户: tzy
时间: 2024-01-28T14:42:18.866Z
消息: 下面的代码state.iframeUrl 是如何收到数据的？
<template>
	<div class="layout-view-bg-white flex mt1" :style="{ height: `calc(100vh - ${setIframeHeight}`, border: 'none' }" v-loading="iframeLoading">
		<iframe :src="iframeUrl" frameborder="0" height="100%" width="100%" ref="iframeDom" v-show="!iframeLoading"></iframe>
	</div>
</template>

<script lang="ts">
import { defineComponent, reactive, toRefs, onMounted, nextTick, watch, computed } from 'vue';
import { storeToRefs } from 'pinia';
import { useRoute } from 'vue-router';
import { useThemeConfig } from '/@/stores/themeConfig';
import { useTagsViewRoutes } from '/@/stores/tagsViewRoutes';

export default defineComponent({
	name: 'layoutIfameView',
	setup() {
		const storesThemeConfig = useThemeConfig();
		const storesTagsViewRoutes = useTagsViewRoutes();
		const { themeConfig } = storeToRefs(storesThemeConfig);
		const { isTagsViewCurrenFull } = storeToRefs(storesTagsViewRoutes);
		const route = useRoute();
		const state = reactive({
			iframeDom: null as HTMLIFrameElement | null,
			iframeLoading: true,
			iframeUrl: '',
		});
		// 初始化页面加载 loading
		const initIframeLoad = () => {
			state.iframeUrl = <any>route.meta.isLink;
			console.log("url:",state.iframeUrl);
			nextTick(() => {
				state.iframeLoading = true;
				const iframe = state.iframeDom;
				if (!iframe) return false;
				iframe.onload = () => {
					state.iframeLoading = false;
				};
			});
		};
		// 设置 iframe 的高度
		const setIframeHeight = computed(() => {
			let { isTagsview } = themeConfig.value;
			if (isTagsViewCurrenFull.value) {
				return `1px`;
			} else {
				if (isTagsview) return `86px`;
				else return `51px`;
			}
		});
		// 页面加载时
		onMounted(() => {
			initIframeLoad();
		});
		// 监听路由变化，多个 iframe 时使用
		watch(
			() => route.path,
			() => {
				initIframeLoad();
			}
		);
		return {
			setIframeHeight,
			...toRefs(state),
		};
	},
});
</script>

用户: tzy
时间: 2024-01-28T14:42:54.958Z
消息: route.meta.isLink的值又是哪里来的呢？

用户: tzy
时间: 2024-01-30T05:20:56.384Z
消息: 下列go语言代码，为什么Components结构体解析成json的时候，无法将Schemas中的map一起解析到json中？
type Components struct {
	Schemas         Schemas         `json:"schemas,omitempty"`
	Parameters      ParametersMap   `json:"parameters,omitempty"`
	Headers         Headers         `json:"headers,omitempty"`
	RequestBodies   RequestBodies   `json:"requestBodies,omitempty"`
	Responses       Responses       `json:"responses,omitempty"`
	SecuritySchemes SecuritySchemes `json:"securitySchemes,omitempty"`
	Examples        Examples        `json:"examples,omitempty"`
	Links           Links           `json:"links,omitempty"`
	Callbacks       Callbacks       `json:"callbacks,omitempty"`
}

type Schemas struct {
	refs map[string]any
}

用户: tzy
时间: 2024-01-30T05:30:16.579Z
消息: go语言是否有办法在字符串中，使用变量的值，如："hello {name}"?

用户: tzy
时间: 2024-01-30T05:30:52.740Z
消息: go语言是否有办法在字符串中，使用变量的值，如："hello {name}"?

用户: tzy
时间: 2024-01-30T15:50:27.537Z
消息: nginx将81端口的所有请求转发到8088端口的nginx配置是怎么样的

用户: tzy
时间: 2024-01-31T02:19:30.971Z
消息: go语言有没有库方便我构造复杂的json数据？尽可能避免我大量创建结构体

用户: tzy
时间: 2024-01-31T02:19:49.458Z
消息: 给我用这个库写个demo看看

用户: tzy
时间: 2024-01-31T02:21:28.473Z
消息: 由于我的json数据更加复杂，我要尽可能避免创建过多结构体，我需要更便利的库

用户: tzy
时间: 2024-01-31T02:33:16.841Z
消息: 你的建议不错，但是还有没有更加便利的，甚至可以省去map[string]interface{}的办法呢？

用户: tzy
时间: 2024-01-31T02:34:06.086Z
消息: 写几个demo对比看看

用户: tzy
时间: 2024-02-01T03:11:28.631Z
消息: _MemberRegister  这是什么意思

用户: tzy
时间: 2024-02-01T03:12:02.659Z
消息: Register

用户: tzy
时间: 2024-02-02T03:41:12.247Z
消息: shell命令如何删除以"dataenrich"开头，但是不以"0202000"结尾的日志？

用户: tzy
时间: 2024-02-02T03:41:59.457Z
消息: shell命令如何删除以"dataenrich"开头，但是不以"0202000"结尾的日志？

用户: tzy
时间: 2024-02-02T04:09:23.517Z
消息: 为什么下面的代码不打印：for dir in /usr/local/services/spp_antifraud_data*/log; do
  if [ -d "$dir" ]; then
    find "$dir" -type f -name "dataenrich*" ! -name "*240202*" -exec ls {} \;
  fi
done

用户: tzy
时间: 2024-02-02T04:09:58.462Z
消息: 我就是需要把文件名列出来

用户: tzy
时间: 2024-02-02T04:13:01.416Z
消息: 这段代码能不能改成不删除文件，而是打印目标文件名？：“find . -type f -name "dataenrich*" ! -name "*240202*" -exec rm -f {} \;

用户: tzy
时间: 2024-02-02T04:14:28.976Z
消息: 下面的代码中，find "$dir" 似乎不能正确查找文件夹，如何修改代码：for dir in /usr/local/services/spp_antifraud_data*/log; do
  if [ -d "$dir" ]; then
    find "$dir" -type f -name "dataenrich*" ! -name "*240202*" -exec echo {} \;
  fi
done


用户: tzy
时间: 2024-02-02T06:31:37.268Z
消息: 帮我写个shell脚本，ssh登陆服务器，并且执行ls命令

用户: tzy
时间: 2024-02-02T06:32:26.056Z
消息: 帮我写个shell脚本，ssh登陆服务器，并且执行命令：for dir in /usr/local/services/spp_antifraud_data*/log; do
  if [ -d "$dir" ]; then
    cd "$dir"
    find . -type f -name "dataenrich*" ! -name "*240202*" -exec rm -f {} \;
  fi
done

用户: tzy
时间: 2024-02-02T06:33:04.711Z
消息: 帮我写一个shell脚本：ssh登陆服务器，并执行命令：for dir in /usr/local/services/spp_antifraud_data*/log; do
  if [ -d "$dir" ]; then
    cd "$dir"
    find . -type f -name "dataenrich*" ! -name "*240202*" -exec rm -f {} \;
  fi
done

用户: tzy
时间: 2024-02-02T06:35:51.447Z
消息: 如果有一批服务器需要这么操作怎么改写代码？

用户: tzy
时间: 2024-02-02T06:36:09.965Z
消息: 用户名是一样的，可以不用每次配置用户名

用户: tzy
时间: 2024-02-03T03:39:29.534Z
消息: 下面openapiv3的json数据为什么无法正确让前端显示“响应数据类型”和“请求数据类型？josn数据如下：{"api.user.getUserInfo":{"properties":{"Msg":{"format":"string","properties":"{}","type":"string"}},"required":["Msg"],"type":"object"}}
{"openapi":"3.0.0","components":{"schemas":{"Ca":{"properties":{"CC":{"format":"obj","description":"123","type":"string2"}},"type":"string","required":["CC"]},"MsgName":{"properties":{"A":{"format":"obj","description":"123","type":"string2"},"B":{"$ref":"#/components/schemas/Ca"}},"type":"string","required":["A"]}}},"info":{"title":"OpenApiV3.Info.Title","description":"OpenApiV3.Info.Description","termsOfService":"OpenApiV3.Info.TermsOfService","version":"OpenApiV3.Info.Version"},"paths":{"/v1/GetUserInfo":{"summary":"OpenApiV3.Path.Summary","description":"OpenApiV3.Path.Description","get":{"description":"OpenApiV3.Path.Get.Description","operationId":"验证码.获取验证码","parameters":[{"description":"Msg.Description","in":"MsgBody","name":"MsgName","required":true}],"requestBody":{"content":{"application/tx":{"schema":{"$ref":"#/components/schemas/MsgName"}}}},"responses":{"200":{"content":{"application/aa":{"schema":{"$ref":"#/components/schemas/MsgName"}}},"description":"OpenApiV3.Path.Get.Responses.200.Value.Description"}},"summary":"获取验证码","tags":["验证码"]}}}}

用户: tzy
时间: 2024-02-03T03:40:05.657Z
消息: 下面openapiv3的json数据为什么无法正确让前端显示“响应数据类型”和“请求数据类型？json数据如下：{"api.user.getUserInfo":{"properties":{"Msg":{"format":"string","properties":"{}","type":"string"}},"required":["Msg"],"type":"object"}}
{"openapi":"3.0.0","components":{"schemas":{"Ca":{"properties":{"CC":{"format":"obj","description":"123","type":"string2"}},"type":"string","required":["CC"]},"MsgName":{"properties":{"A":{"format":"obj","description":"123","type":"string2"},"B":{"ref":"#/components/schemas/Ca"}},"type":"string","required":["A"]}}},"info":{"title":"OpenApiV3.Info.Title","description":"OpenApiV3.Info.Description","termsOfService":"OpenApiV3.Info.TermsOfService","version":"OpenApiV3.Info.Version"},"paths":{"/v1/GetUserInfo":{"summary":"OpenApiV3.Path.Summary","description":"OpenApiV3.Path.Description","get":{"description":"OpenApiV3.Path.Get.Description","operationId":"验证码.获取验证码","parameters":[{"description":"Msg.Description","in":"MsgBody","name":"MsgName","required":true}],"requestBody":{"content":{"application/tx":{"schema":{"ref":"#/components/schemas/MsgName"}}}},"responses":{"200":{"content":{"application/aa":{"schema":{"$ref":"#/components/schemas/MsgName"}}},"description":"OpenApiV3.Path.Get.Responses.200.Value.Description"}},"summary":"获取验证码","tags":["验证码"]}}}}

用户: tzy
时间: 2024-02-03T03:40:23.823Z
消息: 我已经告诉你json数据的内容了，你告诉我哪里出了问题

用户: tzy
时间: 2024-02-04T10:07:18.165Z
消息: 工作下周计划

用户: tzy
时间: 2024-02-04T10:08:04.693Z
消息: 下周工作计划为写完这周没写完的分析报告以及试着分析特殊案例

用户: tzy
时间: 2024-02-06T02:47:01.410Z
消息: go语言，将json数据转化为结构体的场景下，是否有办法使得结构体中不用定义标签也可以完成解析？

用户: tzy
时间: 2024-02-06T02:50:44.215Z
消息: 那你说的这个例子，如果需要解析的json字段是大写的怎么办？

用户: tzy
时间: 2024-02-06T02:51:33.189Z
消息: 不用json标签是否可以办到？

用户: tzy
时间: 2024-02-06T03:45:35.249Z
消息: 帮我分析下面的go语言代码，为什么不会走到打印“her”的地方？
	// 构造handle函数
	handelFunc := func(c *gin.Context) {
		reqBodyJson, _ := c.GetRawData()
		reqBodyType := api.ReqType
		param := reflect.New(reqBodyType.Elem()).Interface()

		//fmt.Println("params:", reflect.New(reqBodyType.Elem()).Type())
		// 解析JSON数据到参数实例
		err := json.Unmarshal(reqBodyJson, param)
		if err != nil {
			c.String(http.StatusBadRequest, "Invalid Json Request:", err)
			return
		}

		indirectParam := reflect.Indirect(reflect.ValueOf(param))
		if isJsonParamMissed(indirectParam) {
			c.String(http.StatusBadRequest, "Invalid Json Request: ParamMissed")
			return
		}
		api.HandleFunc.Call([]reflect.Value{
			reflect.ValueOf(ctrl),
			reflect.ValueOf(c),
			reflect.ValueOf(param),
		})
	}

	fmt.Println("her:", api.Method)
	// 注册handel函数
	switch api.Method {
	case http.MethodGet, http.MethodPost, http.MethodPut, http.MethodPatch, http.MethodTrace,
		http.MethodHead, http.MethodOptions, http.MethodDelete, http.MethodConnect, "ANY":
		fmt.Println(api.Method)
		if api.Method == "ANY" {
			Serv.g.Any(api.ReqPath, handelFunc)
		} else {
			Serv.g.Handle(api.Method, api.ReqPath, handelFunc)
		}

	default:
		fmt.Errorf("error Method")
	}

用户: tzy
时间: 2024-02-06T03:46:02.453Z
消息: 帮我分析下面的go语言代码，为什么不会走到打印"her:"的地方？
// 构造handle函数
handelFunc := func(c *gin.Context) {
reqBodyJson, _ := c.GetRawData()
reqBodyType := api.ReqType
param := reflect.New(reqBodyType.Elem()).Interface()

	//fmt.Println("params:", reflect.New(reqBodyType.Elem()).Type())
	// 解析JSON数据到参数实例
	err := json.Unmarshal(reqBodyJson, param)
	if err != nil {
		c.String(http.StatusBadRequest, "Invalid Json Request:", err)
		return
	}

	indirectParam := reflect.Indirect(reflect.ValueOf(param))
	if isJsonParamMissed(indirectParam) {
		c.String(http.StatusBadRequest, "Invalid Json Request: ParamMissed")
		return
	}
	api.HandleFunc.Call([]reflect.Value{
		reflect.ValueOf(ctrl),
		reflect.ValueOf(c),
		reflect.ValueOf(param),
	})
}

fmt.Println("her:", api.Method)
// 注册handel函数
switch api.Method {
case http.MethodGet, http.MethodPost, http.MethodPut, http.MethodPatch, http.MethodTrace,
	http.MethodHead, http.MethodOptions, http.MethodDelete, http.MethodConnect, "ANY":
	fmt.Println(api.Method)
	if api.Method == "ANY" {
		Serv.g.Any(api.ReqPath, handelFunc)
	} else {
		Serv.g.Handle(api.Method, api.ReqPath, handelFunc)
	}

default:
	fmt.Errorf("error Method")
}

用户: tzy
时间: 2024-02-06T03:46:36.608Z
消息: 帮我分析下面的go语言代码，为什么不会走到打印"her:"的地方？并且也没有任何打印信息，包括fmt.Errorf("error Method")
// 构造handle函数
handelFunc := func(c *gin.Context) {
reqBodyJson, _ := c.GetRawData()
reqBodyType := api.ReqType
param := reflect.New(reqBodyType.Elem()).Interface()

//fmt.Println("params:", reflect.New(reqBodyType.Elem()).Type())
// 解析JSON数据到参数实例
err := json.Unmarshal(reqBodyJson, param)
if err != nil {
	c.String(http.StatusBadRequest, "Invalid Json Request:", err)
	return
}

indirectParam := reflect.Indirect(reflect.ValueOf(param))
if isJsonParamMissed(indirectParam) {
	c.String(http.StatusBadRequest, "Invalid Json Request: ParamMissed")
	return
}
api.HandleFunc.Call([]reflect.Value{
	reflect.ValueOf(ctrl),
	reflect.ValueOf(c),
	reflect.ValueOf(param),
})
}

fmt.Println("her:", api.Method)
// 注册handel函数
switch api.Method {
case http.MethodGet, http.MethodPost, http.MethodPut, http.MethodPatch, http.MethodTrace,
http.MethodHead, http.MethodOptions, http.MethodDelete, http.MethodConnect, "ANY":
fmt.Println(api.Method)
if api.Method == "ANY" {
Serv.g.Any(api.ReqPath, handelFunc)
} else {
Serv.g.Handle(api.Method, api.ReqPath, handelFunc)
}

default:
fmt.Errorf("error Method")
}

用户: tzy
时间: 2024-02-06T03:47:15.794Z
消息: 我还没有执行handelFunc函数，为什么api.HandleFunc.Call([]reflect.Value{})会提前调用？

用户: tzy
时间: 2024-02-06T03:47:42.322Z
消息: 如何改写使得其成为一个闭包？

用户: tzy
时间: 2024-02-06T04:31:15.347Z
消息: 那么我有个问题，我原来的代码不就是一个闭包吗，为什么它还是会执行api.HandleFunc.Call([]reflect.Value{
reflect.ValueOf(ctrl),
reflect.ValueOf(c),
reflect.ValueOf(param),
})
}？

用户: tzy
时间: 2024-02-06T05:17:25.690Z
消息: gin框架如何判断是否已经对客户端写入过数据？

用户: tzy
时间: 2024-02-06T07:15:38.929Z
消息: js中的XMLHttpRequest对象，有什么办法使用get方法发送httpbody信息？我使用send方法，貌似无法正常发送body的信息

用户: tzy
时间: 2024-02-07T07:51:18.971Z
消息: php5.4的代码中没有打印日志，所有的信息都是通过echo函数输出的。但是我现在使用的是nginx来访问php程序，那么我如何查看代码中echo出来的内容？

用户: tzy
时间: 2024-02-07T07:55:54.336Z
消息: 你的第三个方法似乎无法捕获输出的内容，只能看nginx的访问日志

用户: tzy
时间: 2024-02-07T07:59:51.274Z
消息: [error] 19907#19907: *111666 FastCGI sent in stderr: "PHP message: PHP Warning:  mysql_num_rows() expects parameter 1 to be resource, boolean given in /usr/share/nginx/html/action.php on line 313

用户: tzy
时间: 2024-02-07T13:16:50.247Z
消息: http的query请求和form请求分别是什么？能举个例子吗？它们之间有什么区别？

用户: tzy
时间: 2024-02-07T13:18:27.978Z
消息: 给我画一幅画，一个女孩站在一辆车旁边，车是奔驰的迈巴赫，女孩穿着红色的衣服。要卡通画风

用户: tzy
时间: 2024-02-07T13:34:28.905Z
消息: 我有个问题，难道form请求不也是放在url里面的吗？比如gin的cotext.Request.Form是否就是获取url参数的？

用户: tzy
时间: 2024-02-07T13:35:22.744Z
消息: 你的示例里面展示的是gin框架的PostForm而不是Form

用户: tzy
时间: 2024-02-07T13:37:08.069Z
消息: 我们用的最多的是Post和Get方法，那么其他的http方法是否支持body传参？

用户: tzy
时间: 2024-02-07T13:41:54.859Z
消息: Form参数是httpbody中的参数是否正确？

用户: tzy
时间: 2024-02-07T13:44:28.486Z
消息: 有什么办法区分客户端发来的httpbody数据是json数据还是form数据？

用户: tzy
时间: 2024-02-10T07:49:25.514Z
消息: 下面是什么情况： mysql -ugame
ERROR 1045 (28000): Access denied for user 'game'@'localhost' (using password: NO)。怎么处理？

用户: tzy
时间: 2024-02-10T10:50:11.979Z
消息: 我写的代码出错了，你帮我看一下是什么原因导致的：package main

import (
	"fmt"
	"github.com/gin-gonic/gin"
)

type require struct {
	Abc int
}

func man() {
	g := gin.Default()

	g.PUT("/here/:abc", func(c *gin.Context) {
		//fmt.Println(c.PostForm("abc"))
		fmt.Println(c.Query("def"))
		fmt.Println(c.Param("abc"))
		fmt.Println(c.GetPostForm("Abc"))123213
		//fmt.Println(c.ShouldBindWith())
		//req := require{}
		//err := c.ShouldBindUri(&req)
		//fmt.Println(err)
		//fmt.Println(req)

		//req := require{}
		//reqbody, _ := c.Get
		//json.Unmarshal(reqbody, &req)
		//fmt.Println(req)

		c.JSON(200, "haha")
	})

	g.Run(":8000")
}


用户: tzy
时间: 2024-02-10T10:57:27.209Z
消息: 奔驰C和宝马三系哪个空间更大？性价比更高？给我具体的对比数据，并告诉我结论。一定要详细的分析

用户: tzy
时间: 2024-02-10T11:00:58.616Z
消息: 奔驰C和宝马三系哪个空间更大？性价比更高？给我具体的对比数据，并且不少于2000字的分析

用户: tzy
时间: 2024-02-10T12:29:52.347Z
消息: 我使用go语言，获取了require结构体的的reflect对象，那么我在遍历require的成员变量的时候，如何跳过tServer.HttpJsonBody这种继承来的字段？
type require struct {
	tServer.HttpJsonBody
	Account int    `desc:"用户账号"`
	Pass    string `desc:"用户密码"`
}

用户: tzy
时间: 2024-02-10T12:31:00.545Z
消息: tServer.HttpJsonBody只是一个示例，实际运用场景中可能继承的是别的对象。所以我希望的是在遍历的时候跳过类似的继承来的对象，该如何做？

用户: tzy
时间: 2024-02-10T12:46:43.633Z
消息: reflect.value是否能检验出它是不是匿名字段呢？

用户: tzy
时间: 2024-02-10T12:49:36.896Z
消息: 下面的代码，在遍历到继承的匿名字段时，必定会返回true，如何修正代码？
// 判断request json对象必选参数是否缺失
func isJsonParamMissed(jsonInstance reflect.Value) bool {
	for i := 0; i < jsonInstance.NumField(); i++ {

		fieldValue := jsonInstance.Field(i)
		// 如果是可选项则跳过判断
		if strings.Contains(jsonInstance.Type().Field(i).Tag.Get("json"), "omitempty") {
			continue
		}
		// 结构体类型递归判断
		if fieldValue.Type().Kind() == reflect.Struct {
			if isJsonParamMissed(fieldValue) {
				fmt.Println(fieldValue.Type().Kind())
				return true
			}
		}

		// 基础数据类型直接判断
		if fieldValue.IsZero() {
			fmt.Println(fieldValue.Type())
			return true
		}
	}

	return false
}

用户: tzy
时间: 2024-02-10T12:54:00.226Z
消息: 按照你的写法，是不是其实可以不用fieldValue变量完成isJsonParamMissed函数？如何改进？

用户: tzy
时间: 2024-02-10T13:07:44.790Z
消息: 我想在结构体标签里面设置一个字段，表示该成员函数是可选的，可以不传入。那么这个字段叫什么比较合适呢？可以写个示例吗

用户: tzy
时间: 2024-02-10T13:08:22.304Z
消息: 把"optional"改成"isOpt"怎么样？

用户: tzy
时间: 2024-02-10T13:31:09.609Z
消息: 把"optional"改成"isOpt"怎么样？

用户: tzy
时间: 2024-02-10T13:31:42.729Z
消息: 能否不以kv的形式标记字段，并让程序读取呢？

用户: tzy
时间: 2024-02-12T06:10:52.906Z
消息: 我的一个docker镜像里面的文件内容是根据docker的启动参数来指定的，此时我希望修改docker

用户: tzy
时间: 2024-02-12T06:11:59.737Z
消息: 我的一个docker镜像里面的文件内容是根据docker的启动参数来指定的，此时我希望修改docker镜像内的一个文件，并且生成一个新的镜像该怎么做呢？我希望新镜像跟旧镜像一样，其他的文件都是根据docker的启动参数来指定的，唯一的不同是我更改了其中的一个文件

用户: tzy
时间: 2024-02-12T06:13:11.146Z
消息: 我并没有原来创建镜像的dockerfile，只有一个启动容器的docker-compose

用户: tzy
时间: 2024-02-12T06:13:46.371Z
消息: 问题是，我如何构建Dockerfile呢？我并不知道该容器要怎么启动

用户: tzy
时间: 2024-02-12T06:14:24.923Z
消息: 下面的dockerfile是正确的吗？
# 使用原始镜像作为基础
FROM original_image

# 将需要修改的文件拷贝到镜像中
COPY new_file /path/to/new_file

用户: tzy
时间: 2024-02-13T09:29:11.875Z
消息: 我想买一辆车，请你帮我对比一下奔驰C和宝马3系之间的参数，给我一份详细的分析，告诉我同样的价位，哪一个产品更加有性价比

用户: tzy
时间: 2024-02-13T09:29:30.801Z
消息: 没有具体的车型和年份要求

用户: tzy
时间: 2024-02-15T16:24:59.394Z
消息: 开始游戏时，出现下面的情况怎么办？Plugin[UnityConsole 0.1.0.0]targets a wrong version of BepInEx(3.2.0.0)and might not work until you update

用户: tzy
时间: 2024-02-15T16:29:29.614Z
消息: 去哪里下载最新版本的BepInEx插件版本为3.2.0.0?

用户: tzy
时间: 2024-02-22T09:14:03.322Z
消息: 2024-02-22 17:13:31 ERROR Shell run failed!
2024-02-22 17:13:31 ERROR Current task status: ERROR

用户: tzy
时间: 2024-02-22T09:14:22.553Z
消息: 2024-02-22 17:13:31 ERROR Shell run failed!
2024-02-22 17:13:31 ERROR Current task status: ERROR   这个报错是什么意思呢

用户: tzy
时间: 2024-02-22T09:16:17.890Z
消息: 2024-02-22 17:15:51,630 ERROR [BaseBatchJob.java:184] - Unrecognized Exception found. reason: ODPS-0130161:[3,17] Parse exception - invalid token '='
[400] com.aliyun.odps.OdpsException: ODPS-0130161:[3,17] Parse exception - invalid token '='  这个报错是什么意思呢

